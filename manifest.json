{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.9", "generated_at": "2023-02-14T15:05:40.749511Z", "invocation_id": "819cdad5-a941-4c35-b3b4-c1e00658a93d", "env": {}, "project_id": "923eb5520ba9ee4fdec1022e129d1721", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.merchant_experience_unified_touchpoints.STG_FIVE9_BR": {"raw_sql": "/*\n* Staging Five9 table for BR region\n* This is a table which acts as a staging table to get all the relevant Five9 data for BR which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_REPORT\n* CURRENT DATA    = CALLLOG_REPORT_FROM_YESTERDAY_WITHOUT_NOTES\n*/\n\n{{ config(materialized='table') }}\nSELECT TIMESTAMP::TIMESTAMP                  AS TIMESTAMP,\n       ANI::TEXT                             AS ANI,\n       CALL_ID::TEXT                         AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL(AFTER_CALL_WORK_TIME,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(IVR_TIME,0) AS IVR_TIME,\n       IFNULL(TALK_TIME,0) AS TALK_TIME,\n       IFNULL(TIME_TO_ABANDON,0) AS TIME_TO_ABANDON,\n       IFNULL(TOTAL_QUEUE_TIME,0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       CUSTOM_PESQUISANPS,\n       CUSTOM_PESQUISAPROBLEMARESOLVIDO,\n       ROUND(CUSTOM_PESQUISANOTAATENDIMENTO) AS CUSTOM_PESQUISANOTAATENDIMENTO,\n       LIST_NAME,\n       DISPOSITION_PATH,\n       CUSTOM_SF_ID_ENCONTRADO,\n       CUSTOM_SUBJECT,\n       CUSTOM_SOLUTION_EFFECTIVENESS,\n       CUSTOM_READER_TYPE,\n       COALESCE(disposition IN ('URA Fechada', 'AfterHours'), false) as IS_AFTERHOURS\nFROM {{ source('five9', 'five9_report') }} FIVE9_BR_HISTORICAL -- = HISTORICAL TABLE\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-11-30'\nUNION\nSELECT TIMESTAMP::TIMESTAMP             AS TIMESTAMP,\n       ANI::TEXT                        AS ANI,\n       CALL_ID::TEXT                    AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL(SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME))*60 + HOUR(TO_TIME(AFTER_CALL_WORK_TIME))*60*60,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME))*60 + HOUR(TO_TIME(IVR_TIME))*60*60,0) AS IVR_TIME,\n       IFNULL(SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME))*60 + HOUR(TO_TIME(TALK_TIME))*60*60,0) AS TALK_TIME,\n       IFNULL(SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON))*60 + HOUR(TO_TIME(TIME_TO_ABANDON))*60*60,0) AS TIME_TO_ABANDON,\n       IFNULL(SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME))*60 + HOUR(TO_TIME(TOTAL_QUEUE_TIME))*60*60,0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       CUSTOM_PESQUISA_NPS,\n       CUSTOM_PESQUISA_PROBLEMA_RESOLVIDO,\n       CUSTOM_PESQUISA_NOTA_ATENDIMENTO AS CUSTOM_PESQUISANOTAATENDIMENTO,\n       LIST_NAME,\n       DISPOSITION_PATH,\n       CUSTOM_SF_ID_ENCONTRADO,\n       CUSTOM_SUBJECT,\n       CUSTOM_SOLUTION_EFFECTIVENESS,\n       CUSTOM_READER_TYPE,\n       COALESCE(disposition IN ('URA Fechada', 'AfterHours'), false) as IS_AFTERHOURS\nFROM {{ source('five9', 'calllog_report_from_yesterday_without_notes') }} FIVE9_BR_CURRENT -- = CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-12-01'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.five9.five9_report", "source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "STG_FIVE9_BR"], "unique_id": "model.merchant_experience_unified_touchpoints.STG_FIVE9_BR", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/STG_FIVE9_BR.sql", "original_file_path": "models/staging/STG_FIVE9_BR.sql", "name": "STG_FIVE9_BR", "alias": "STG_FIVE9_BR", "checksum": {"name": "sha256", "checksum": "0bd237e09ed569556b38da4cdfaab963e271c5034b4cca665c4227551503787e"}, "tags": [], "refs": [], "sources": [["five9", "five9_report"], ["five9", "calllog_report_from_yesterday_without_notes"]], "description": "Staging Five9 table for BR", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/STG_FIVE9_BR.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1487439, "compiled_sql": "/*\n* Staging Five9 table for BR region\n* This is a table which acts as a staging table to get all the relevant Five9 data for BR which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_REPORT\n* CURRENT DATA    = CALLLOG_REPORT_FROM_YESTERDAY_WITHOUT_NOTES\n*/\n\n\nSELECT TIMESTAMP::TIMESTAMP                  AS TIMESTAMP,\n       ANI::TEXT                             AS ANI,\n       CALL_ID::TEXT                         AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL(AFTER_CALL_WORK_TIME,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(IVR_TIME,0) AS IVR_TIME,\n       IFNULL(TALK_TIME,0) AS TALK_TIME,\n       IFNULL(TIME_TO_ABANDON,0) AS TIME_TO_ABANDON,\n       IFNULL(TOTAL_QUEUE_TIME,0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       CUSTOM_PESQUISANPS,\n       CUSTOM_PESQUISAPROBLEMARESOLVIDO,\n       ROUND(CUSTOM_PESQUISANOTAATENDIMENTO) AS CUSTOM_PESQUISANOTAATENDIMENTO,\n       LIST_NAME,\n       DISPOSITION_PATH,\n       CUSTOM_SF_ID_ENCONTRADO,\n       CUSTOM_SUBJECT,\n       CUSTOM_SOLUTION_EFFECTIVENESS,\n       CUSTOM_READER_TYPE,\n       COALESCE(disposition IN ('URA Fechada', 'AfterHours'), false) as IS_AFTERHOURS\nFROM SUMUP_DWH_PROD.SRC_FIVE9.five9_report FIVE9_BR_HISTORICAL -- = HISTORICAL TABLE\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-11-30'\nUNION\nSELECT TIMESTAMP::TIMESTAMP             AS TIMESTAMP,\n       ANI::TEXT                        AS ANI,\n       CALL_ID::TEXT                    AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL(SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME))*60 + HOUR(TO_TIME(AFTER_CALL_WORK_TIME))*60*60,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME))*60 + HOUR(TO_TIME(IVR_TIME))*60*60,0) AS IVR_TIME,\n       IFNULL(SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME))*60 + HOUR(TO_TIME(TALK_TIME))*60*60,0) AS TALK_TIME,\n       IFNULL(SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON))*60 + HOUR(TO_TIME(TIME_TO_ABANDON))*60*60,0) AS TIME_TO_ABANDON,\n       IFNULL(SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME))*60 + HOUR(TO_TIME(TOTAL_QUEUE_TIME))*60*60,0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       CUSTOM_PESQUISA_NPS,\n       CUSTOM_PESQUISA_PROBLEMA_RESOLVIDO,\n       CUSTOM_PESQUISA_NOTA_ATENDIMENTO AS CUSTOM_PESQUISANOTAATENDIMENTO,\n       LIST_NAME,\n       DISPOSITION_PATH,\n       CUSTOM_SF_ID_ENCONTRADO,\n       CUSTOM_SUBJECT,\n       CUSTOM_SOLUTION_EFFECTIVENESS,\n       CUSTOM_READER_TYPE,\n       COALESCE(disposition IN ('URA Fechada', 'AfterHours'), false) as IS_AFTERHOURS\nFROM SUMUP_DWH_PROD.SRC_FIVE9.calllog_report_from_yesterday_without_notes FIVE9_BR_CURRENT -- = CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-12-01'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_BR"}, "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US": {"raw_sql": "/*\n* Staging Five9 table for LATAM (includes only ES countries and excludes BR) & US\n* This is a table which acts as a staging table to get all the relevant Five9 data for LATAM and US which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_US_CL_STANDARD_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH_CL_US\n*/\n\n{{ config(materialized='table') }}\nSELECT TIMESTAMP::TIMESTAMP                                                         AS TIMESTAMP,\n       CASE WHEN ANI::TEXT = 'nan' THEN NULL ELSE ANI::TEXT END                     AS ANI,\n       CALL_ID::TEXT                                                                AS CALL_ID,\n       CALL_TYPE                                                                    AS CALL_TYPE,\n       CASE WHEN CAMPAIGN::TEXT = '[None]' THEN NULL ELSE CAMPAIGN END              AS CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT                                                                   AS DNIS,\n       CASE WHEN IVR_PATH::TEXT = 'nan' THEN NULL ELSE LOWER(IVR_PATH) END          AS IVR_PATH,\n       CASE WHEN RECORDINGS::TEXT = 'nan' THEN NULL ELSE RECORDINGS END             AS RECORDINGS,\n       CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL END                    AS SKILL,\n       IFNULL(AFTER_CALL_WORK_TIME,0)                                               AS AFTER_CALL_WORK_TIME,\n       IFNULL(IVR_TIME,0)                                                           AS IVR_TIME,\n       IFNULL(TALK_TIME,0)                                                          AS TALK_TIME,\n       IFNULL(TIME_TO_ABANDON,0)                                                    AS TIME_TO_ABANDON,\n       IFNULL(TOTAL_QUEUE_TIME,0)                                                   AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS::TEXT = 'nan' THEN NULL ELSE TRANSFERS::TEXT END         AS TRANSFERS,\n       CASE WHEN AGENT_EMAIL::TEXT = 'nan' THEN NULL ELSE LOWER(TRIM(AGENT_EMAIL)) END AS AGENT_EMAIL,\n       CASE WHEN AGENT_GROUP::TEXT = 'nan' THEN NULL ELSE AGENT_GROUP END           AS AGENT_GROUP,\n       CASE WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL ELSE CUSTOM_SOLVED::TEXT END AS CUSTOM_SOLVED,\n       CASE WHEN CUSTOM_NPS::TEXT = 'nan' THEN NULL ELSE ROUND(CUSTOM_NPS) END      AS CUSTOM_NPS,\n       CASE WHEN LIST_NAME::TEXT = 'nan' THEN NULL ELSE LIST_NAME END               AS LIST_NAME,\n       CASE WHEN DISPOSITION_PATH::TEXT = 'nan' THEN NULL ELSE DISPOSITION_PATH END AS DISPOSITION_PATH,\n       CASE WHEN NOTES::TEXT = 'nan' THEN NULL ELSE REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                                          END                       AS NOTES,\n       CASE\n           WHEN SALESFORCE_FIELDS_ID::TEXT = 'nan' THEN NULL\n           ELSE SALESFORCE_FIELDS_ID END                                            AS SALESFORCE_FIELDS_ID,\n       SESSION_ID::TEXT AS SESSION_ID,\n       COALESCE(disposition IN ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'), false) AS IS_AFTERHOURS,\n       COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', false) AS IS_DEFLECTED\nFROM {{ source('five9', 'five9_us_cl_standard_report') }} FIVE9_LATAM_US_HISTORICAL -- HISTORICAL TABLE\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT TIMESTAMP::TIMESTAMP                                            AS TIMESTAMP,\n       ANI::TEXT                                                       AS ANI,\n       CALL_ID::VARCHAR                                                AS CALL_ID,\n       CALL_TYPE                                                       AS CALL_TYPE,\n       CASE WHEN CAMPAIGN::TEXT = '[None]' THEN NULL ELSE CAMPAIGN END AS CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT                                                      AS DNIS,\n       LOWER(IVR_PATH)                                                 AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL END       AS SKILL,\n       IFNULL(SECOND(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME,'-','0')))*60*60,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(SECOND(TO_TIME(REPLACE(IVR_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(IVR_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(IVR_TIME,'-','0')))*60*60,0) AS IVR_TIME,\n       IFNULL(SECOND(TO_TIME(REPLACE(TALK_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(TALK_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(TALK_TIME,'-','0')))*60*60,0) AS TALK_TIME,\n       IFNULL(SECOND(TO_TIME(REPLACE(TIME_TO_ABANDON,'-','0'))) + MINUTE(TO_TIME(REPLACE(TIME_TO_ABANDON,'-','0')))*60 + HOUR(TO_TIME(REPLACE(TIME_TO_ABANDON,'-','0')))*60*60,0) AS TIME_TO_ABANDON,\n       IFNULL(SECOND(TO_TIME(REPLACE(TOTAL_QUEUE_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(TOTAL_QUEUE_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(TOTAL_QUEUE_TIME,'-','0')))*60*60,0) AS TOTAL_QUEUE_TIME,\n       TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       CASE WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL ELSE CUSTOM_SOLVED::TEXT END  AS CUSTOM_SOLVED,\n       CUSTOM_NPS,\n       LIST_NAME,\n       DISPOSITION_PATH,\n       REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                       AS NOTES,\n       SALESFORCE_FIELDS_ID,\n       SESSION_ID::TEXT AS SESSION_ID,\n       COALESCE(disposition IN ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'), false) AS IS_AFTERHOURS,\n       COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', false) AS IS_DEFLECTED\nFROM {{ source('five9', 'call_logreport_dwh_cl_us') }} FIVE9_LATAM_US_CURRENT -- CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us", "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "STG_FIVE9_ESLATAM_US"], "unique_id": "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/STG_FIVE9_ESLATAM_US.sql", "original_file_path": "models/staging/STG_FIVE9_ESLATAM_US.sql", "name": "STG_FIVE9_ESLATAM_US", "alias": "STG_FIVE9_ESLATAM_US", "checksum": {"name": "sha256", "checksum": "46332f1b86c2c5af1fd728d381d1b0aa40c34aa13f50bbef135d790f69c31d50"}, "tags": [], "refs": [], "sources": [["five9", "call_logreport_dwh_cl_us"], ["five9", "five9_us_cl_standard_report"]], "description": "Staging Five9 table for LATAM (includes only ES countries and excludes BR) & US", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/STG_FIVE9_ESLATAM_US.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1491005, "compiled_sql": "/*\n* Staging Five9 table for LATAM (includes only ES countries and excludes BR) & US\n* This is a table which acts as a staging table to get all the relevant Five9 data for LATAM and US which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_US_CL_STANDARD_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH_CL_US\n*/\n\n\nSELECT TIMESTAMP::TIMESTAMP                                                         AS TIMESTAMP,\n       CASE WHEN ANI::TEXT = 'nan' THEN NULL ELSE ANI::TEXT END                     AS ANI,\n       CALL_ID::TEXT                                                                AS CALL_ID,\n       CALL_TYPE                                                                    AS CALL_TYPE,\n       CASE WHEN CAMPAIGN::TEXT = '[None]' THEN NULL ELSE CAMPAIGN END              AS CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT                                                                   AS DNIS,\n       CASE WHEN IVR_PATH::TEXT = 'nan' THEN NULL ELSE LOWER(IVR_PATH) END          AS IVR_PATH,\n       CASE WHEN RECORDINGS::TEXT = 'nan' THEN NULL ELSE RECORDINGS END             AS RECORDINGS,\n       CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL END                    AS SKILL,\n       IFNULL(AFTER_CALL_WORK_TIME,0)                                               AS AFTER_CALL_WORK_TIME,\n       IFNULL(IVR_TIME,0)                                                           AS IVR_TIME,\n       IFNULL(TALK_TIME,0)                                                          AS TALK_TIME,\n       IFNULL(TIME_TO_ABANDON,0)                                                    AS TIME_TO_ABANDON,\n       IFNULL(TOTAL_QUEUE_TIME,0)                                                   AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS::TEXT = 'nan' THEN NULL ELSE TRANSFERS::TEXT END         AS TRANSFERS,\n       CASE WHEN AGENT_EMAIL::TEXT = 'nan' THEN NULL ELSE LOWER(TRIM(AGENT_EMAIL)) END AS AGENT_EMAIL,\n       CASE WHEN AGENT_GROUP::TEXT = 'nan' THEN NULL ELSE AGENT_GROUP END           AS AGENT_GROUP,\n       CASE WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL ELSE CUSTOM_SOLVED::TEXT END AS CUSTOM_SOLVED,\n       CASE WHEN CUSTOM_NPS::TEXT = 'nan' THEN NULL ELSE ROUND(CUSTOM_NPS) END      AS CUSTOM_NPS,\n       CASE WHEN LIST_NAME::TEXT = 'nan' THEN NULL ELSE LIST_NAME END               AS LIST_NAME,\n       CASE WHEN DISPOSITION_PATH::TEXT = 'nan' THEN NULL ELSE DISPOSITION_PATH END AS DISPOSITION_PATH,\n       CASE WHEN NOTES::TEXT = 'nan' THEN NULL ELSE REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                                          END                       AS NOTES,\n       CASE\n           WHEN SALESFORCE_FIELDS_ID::TEXT = 'nan' THEN NULL\n           ELSE SALESFORCE_FIELDS_ID END                                            AS SALESFORCE_FIELDS_ID,\n       SESSION_ID::TEXT AS SESSION_ID,\n       COALESCE(disposition IN ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'), false) AS IS_AFTERHOURS,\n       COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', false) AS IS_DEFLECTED\nFROM SUMUP_DWH_PROD.SRC_FIVE9.five9_us_cl_standard_report FIVE9_LATAM_US_HISTORICAL -- HISTORICAL TABLE\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT TIMESTAMP::TIMESTAMP                                            AS TIMESTAMP,\n       ANI::TEXT                                                       AS ANI,\n       CALL_ID::VARCHAR                                                AS CALL_ID,\n       CALL_TYPE                                                       AS CALL_TYPE,\n       CASE WHEN CAMPAIGN::TEXT = '[None]' THEN NULL ELSE CAMPAIGN END AS CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT                                                      AS DNIS,\n       LOWER(IVR_PATH)                                                 AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL END       AS SKILL,\n       IFNULL(SECOND(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME,'-','0')))*60*60,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(SECOND(TO_TIME(REPLACE(IVR_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(IVR_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(IVR_TIME,'-','0')))*60*60,0) AS IVR_TIME,\n       IFNULL(SECOND(TO_TIME(REPLACE(TALK_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(TALK_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(TALK_TIME,'-','0')))*60*60,0) AS TALK_TIME,\n       IFNULL(SECOND(TO_TIME(REPLACE(TIME_TO_ABANDON,'-','0'))) + MINUTE(TO_TIME(REPLACE(TIME_TO_ABANDON,'-','0')))*60 + HOUR(TO_TIME(REPLACE(TIME_TO_ABANDON,'-','0')))*60*60,0) AS TIME_TO_ABANDON,\n       IFNULL(SECOND(TO_TIME(REPLACE(TOTAL_QUEUE_TIME,'-','0'))) + MINUTE(TO_TIME(REPLACE(TOTAL_QUEUE_TIME,'-','0')))*60 + HOUR(TO_TIME(REPLACE(TOTAL_QUEUE_TIME,'-','0')))*60*60,0) AS TOTAL_QUEUE_TIME,\n       TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       CASE WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL ELSE CUSTOM_SOLVED::TEXT END  AS CUSTOM_SOLVED,\n       CUSTOM_NPS,\n       LIST_NAME,\n       DISPOSITION_PATH,\n       REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                       AS NOTES,\n       SALESFORCE_FIELDS_ID,\n       SESSION_ID::TEXT AS SESSION_ID,\n       COALESCE(disposition IN ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'), false) AS IS_AFTERHOURS,\n       COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', false) AS IS_DEFLECTED\nFROM SUMUP_DWH_PROD.SRC_FIVE9.call_logreport_dwh_cl_us FIVE9_LATAM_US_CURRENT -- CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_ESLATAM_US"}, "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU": {"raw_sql": "/*\n* Staging Five9 table for EU region\n* This is a table which acts as a staging table to get all the relevant Five9 data for EU which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_EUROPE_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH\n*/\n\n{{ config(materialized='table') }}\nSELECT TIMESTAMP::TIMESTAMP         AS TIMESTAMP,\n       ANI::TEXT                    AS ANI,\n       CALL_ID::TEXT                AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL(AFTER_CALL_WORK_TIME,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(IVR_TIME,0) AS IVR_TIME,\n       IFNULL(TALK_TIME,0) AS TALK_TIME,\n       IFNULL(TIME_TO_ABANDON,0) AS TIME_TO_ABANDON,\n       IFNULL(TOTAL_QUEUE_TIME,0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       ABANDON_RATE,\n       CALLS_COMPLETED_IN_IVR,\n       DISPOSITION_PATH,\n       SALESFORCE_SALESFORCE_ID::TEXT AS SALESFORCE_SALESFORCE_ID,\n       SALESFORCE_MERCHANT_ID::TEXT AS SALESFORCE_MERCHANT_ID,\n       REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                       AS NOTES,\n       SUMUP_SURVEY_ANSWER_INTEGER,\n       SESSION_ID::TEXT AS SESSION_ID,\n       SALESFORCE_CUSTOMER_TYPE,\n       NULL AS REVAMP_IVR_CALL_ESCALATED,\n       COALESCE(disposition = 'AfterHours', false) as IS_AFTERHOURS,\n       COALESCE(disposition = 'Deflected_To_Funnel', false) as IS_DEFLECTED\nFROM {{ source('five9', 'five9_europe_report') }} FIVE9_EU_HISTORICAL -- = HISTORICAL TABLE\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT TIMESTAMP::TIMESTAMP         AS TIMESTAMP,\n       ANI::TEXT                    AS ANI,\n       CALL_ID::TEXT                AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL((SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME))*60 + HOUR(TO_TIME(AFTER_CALL_WORK_TIME))*60*60),0) AS AFTER_CALL_WORK_TIME,\n       IFNULL((SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME))*60 + HOUR(TO_TIME(IVR_TIME))*60*60),0) AS IVR_TIME,\n       IFNULL((SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME))*60 + HOUR(TO_TIME(TALK_TIME))*60*60),0) AS TALK_TIME,\n       IFNULL((SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON))*60 + HOUR(TO_TIME(TIME_TO_ABANDON))*60*60),0) AS TIME_TO_ABANDON,\n       IFNULL((SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME))*60 + HOUR(TO_TIME(TOTAL_QUEUE_TIME))*60*60),0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       ABANDON_RATE,\n       CALLS_COMPLETED_IN_IVR,\n       DISPOSITION_PATH,\n       SALESFORCE_SALESFORCE_ID::TEXT AS SALESFORCE_SALESFORCE_ID,\n       SALESFORCE_MERCHANT_ID::TEXT AS SALESFORCE_MERCHANT_ID,\n       REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                       AS NOTES,\n       SUMUP_SURVEY_ANSWER_INTEGER,\n       SESSION_ID::TEXT AS SESSION_ID,\n       SALESFORCE_CUSTOMER_TYPE,\n       REVAMP_IVR_CALL_ESCALATED,\n       COALESCE(disposition = 'AfterHours', false) as IS_AFTERHOURS,\n       COALESCE(disposition = 'Deflected_To_Funnel', false) as IS_DEFLECTED\nFROM {{ source('five9', 'call_logreport_dwh') }} FIVE9_EU_CURRENT -- = CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh", "source.merchant_experience_unified_touchpoints.five9.five9_europe_report"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "STG_FIVE9_EU"], "unique_id": "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/STG_FIVE9_EU.sql", "original_file_path": "models/staging/STG_FIVE9_EU.sql", "name": "STG_FIVE9_EU", "alias": "STG_FIVE9_EU", "checksum": {"name": "sha256", "checksum": "c8974402912007791814bd6760e47b3e17853701937c36914d50ea9d5b946353"}, "tags": [], "refs": [], "sources": [["five9", "call_logreport_dwh"], ["five9", "five9_europe_report"]], "description": "Staging Five9 table for EU", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/STG_FIVE9_EU.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1489174, "compiled_sql": "/*\n* Staging Five9 table for EU region\n* This is a table which acts as a staging table to get all the relevant Five9 data for EU which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_EUROPE_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH\n*/\n\n\nSELECT TIMESTAMP::TIMESTAMP         AS TIMESTAMP,\n       ANI::TEXT                    AS ANI,\n       CALL_ID::TEXT                AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL(AFTER_CALL_WORK_TIME,0) AS AFTER_CALL_WORK_TIME,\n       IFNULL(IVR_TIME,0) AS IVR_TIME,\n       IFNULL(TALK_TIME,0) AS TALK_TIME,\n       IFNULL(TIME_TO_ABANDON,0) AS TIME_TO_ABANDON,\n       IFNULL(TOTAL_QUEUE_TIME,0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       ABANDON_RATE,\n       CALLS_COMPLETED_IN_IVR,\n       DISPOSITION_PATH,\n       SALESFORCE_SALESFORCE_ID::TEXT AS SALESFORCE_SALESFORCE_ID,\n       SALESFORCE_MERCHANT_ID::TEXT AS SALESFORCE_MERCHANT_ID,\n       REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                       AS NOTES,\n       SUMUP_SURVEY_ANSWER_INTEGER,\n       SESSION_ID::TEXT AS SESSION_ID,\n       SALESFORCE_CUSTOMER_TYPE,\n       NULL AS REVAMP_IVR_CALL_ESCALATED,\n       COALESCE(disposition = 'AfterHours', false) as IS_AFTERHOURS,\n       COALESCE(disposition = 'Deflected_To_Funnel', false) as IS_DEFLECTED\nFROM SUMUP_DWH_PROD.SRC_FIVE9.five9_europe_report FIVE9_EU_HISTORICAL -- = HISTORICAL TABLE\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT TIMESTAMP::TIMESTAMP         AS TIMESTAMP,\n       ANI::TEXT                    AS ANI,\n       CALL_ID::TEXT                AS CALL_ID,\n       CALL_TYPE,\n       CAMPAIGN,\n       CAMPAIGN_TYPE,\n       DISPOSITION,\n       DNIS::TEXT,\n       LOWER(IVR_PATH)             AS IVR_PATH,\n       RECORDINGS,\n       CASE WHEN SKILL = '[None]' THEN NULL ELSE SKILL END AS SKILL,\n       IFNULL((SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME))*60 + HOUR(TO_TIME(AFTER_CALL_WORK_TIME))*60*60),0) AS AFTER_CALL_WORK_TIME,\n       IFNULL((SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME))*60 + HOUR(TO_TIME(IVR_TIME))*60*60),0) AS IVR_TIME,\n       IFNULL((SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME))*60 + HOUR(TO_TIME(TALK_TIME))*60*60),0) AS TALK_TIME,\n       IFNULL((SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON))*60 + HOUR(TO_TIME(TIME_TO_ABANDON))*60*60),0) AS TIME_TO_ABANDON,\n       IFNULL((SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME))*60 + HOUR(TO_TIME(TOTAL_QUEUE_TIME))*60*60),0) AS TOTAL_QUEUE_TIME,\n       CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END AS TRANSFERS,\n       LOWER(TRIM(AGENT_EMAIL)) AS AGENT_EMAIL,\n       AGENT_GROUP,\n       ABANDON_RATE,\n       CALLS_COMPLETED_IN_IVR,\n       DISPOSITION_PATH,\n       SALESFORCE_SALESFORCE_ID::TEXT AS SALESFORCE_SALESFORCE_ID,\n       SALESFORCE_MERCHANT_ID::TEXT AS SALESFORCE_MERCHANT_ID,\n       REPLACE(\n                   regexp_replace(NOTES, '\\r|\\n', ''), ',', ''\n               )                       AS NOTES,\n       SUMUP_SURVEY_ANSWER_INTEGER,\n       SESSION_ID::TEXT AS SESSION_ID,\n       SALESFORCE_CUSTOMER_TYPE,\n       REVAMP_IVR_CALL_ESCALATED,\n       COALESCE(disposition = 'AfterHours', false) as IS_AFTERHOURS,\n       COALESCE(disposition = 'Deflected_To_Funnel', false) as IS_DEFLECTED\nFROM SUMUP_DWH_PROD.SRC_FIVE9.call_logreport_dwh FIVE9_EU_CURRENT -- = CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_EU"}, "model.merchant_experience_unified_touchpoints.stg_five9_br_new": {"raw_sql": "/*\n* Staging Five9 table for BR region\n* This is a table which acts as a staging table to get all the relevant Five9 data for BR which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_REPORT\n* CURRENT DATA    = CALLLOG_REPORT_FROM_YESTERDAY_WITHOUT_NOTES\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                CUSTOM_SF_ID_ENCONTRADO::TEXT                                   AS salesforce_id,\n                ANI::TEXT                                                       AS caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL(AFTER_CALL_WORK_TIME, 0)                                 AS after_call_work_time,\n                IFNULL(IVR_TIME, 0)                                             AS ivr_time,\n                IFNULL(TALK_TIME, 0)                                            AS talk_time,\n                IFNULL(TIME_TO_ABANDON, 0)                                      AS time_to_abandon,\n                IFNULL(TOTAL_QUEUE_TIME, 0)                                     AS total_queue_time,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))                                        AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CUSTOM_PESQUISANPS::TEXT                                        AS csat_tex_evaluation,\n                CUSTOM_PESQUISAPROBLEMARESOLVIDO::TEXT                          AS csat_problem_solved,\n                ROUND(CUSTOM_PESQUISANOTAATENDIMENTO)::INT                      AS csat_score,\n                CUSTOM_SUBJECT::TEXT                                            AS subject,\n                CUSTOM_SOLUTION_EFFECTIVENESS::TEXT                             AS custom_solution_effectivness,\n                CUSTOM_READER_TYPE::TEXT                                        AS custom_reader_type,\n                COALESCE(disposition IN ('URA Fechada', 'AfterHours'), FALSE)   AS is_afterhours,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM {{ source('five9', 'five9_report') }} -- HISTORICAL TABLE BRAZIL\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-11-30'\nUNION\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                CUSTOM_SF_ID_ENCONTRADO::TEXT                                   AS salesforce_id,\n                ANI::TEXT                                                       as caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL(SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 +\n                       HOUR(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 * 60, 0)        AS AFTER_CALL_WORK_TIME,\n                IFNULL(SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME)) * 60 + HOUR(TO_TIME(IVR_TIME)) * 60 * 60,\n                       0)                                                       AS IVR_TIME,\n                IFNULL(SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME)) * 60 +\n                       HOUR(TO_TIME(TALK_TIME)) * 60 * 60, 0)                   AS TALK_TIME,\n                IFNULL(SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON)) * 60 +\n                       HOUR(TO_TIME(TIME_TO_ABANDON)) * 60 * 60, 0)             AS TIME_TO_ABANDON,\n                IFNULL(SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME)) * 60 +\n                       HOUR(TO_TIME(TOTAL_QUEUE_TIME)) * 60 * 60, 0)            AS TOTAL_QUEUE_TIME,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))                                        AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CUSTOM_PESQUISA_NPS::TEXT                                       AS csat_tex_evaluation,\n                CUSTOM_PESQUISA_PROBLEMA_RESOLVIDO::TEXT                        AS csat_problem_solved,\n                ROUND(CUSTOM_PESQUISA_NOTA_ATENDIMENTO)::INT                    AS csat_score,\n                CUSTOM_SUBJECT::TEXT                                            AS subject,\n                CUSTOM_SOLUTION_EFFECTIVENESS::TEXT                             AS custom_solution_effectivness,\n                CUSTOM_READER_TYPE::TEXT                                        AS custom_reader_type,\n                COALESCE(disposition IN ('URA Fechada', 'AfterHours'), FALSE)   AS is_afterhours,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM {{ source('five9', 'calllog_report_from_yesterday_without_notes') }} -- CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-12-01'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.five9.five9_report", "source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "five9", "stg_five9_br_new"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_five9_br_new", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/five9/stg_five9_br_new.sql", "original_file_path": "models/staging/five9/stg_five9_br_new.sql", "name": "stg_five9_br_new", "alias": "stg_five9_br_new", "checksum": {"name": "sha256", "checksum": "d16bbd481cf99b8889cfaad2349baec9f5ff62e6d9939bcdc9559133a3169dc9"}, "tags": [], "refs": [], "sources": [["five9", "five9_report"], ["five9", "calllog_report_from_yesterday_without_notes"]], "description": "Staging Five9 table for BR region", "columns": {"call_id": {"name": "call_id", "description": "unique identifier for the call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_id": {"name": "salesforce_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caller_phone": {"name": "caller_phone", "description": "represents the phone number of the caller", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_type": {"name": "call_type", "description": "represents the type of call (Inbound etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "represents the campaign used in five9. Used to map countries", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "represents the type of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition_path": {"name": "disposition_path", "description": "represents the first level of contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition": {"name": "disposition", "description": "represents the second level of contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "support_phone": {"name": "support_phone", "description": "represents the phone number contacted by the caller", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ivr_path": {"name": "ivr_path", "description": "represents the ivr path", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recordings": {"name": "recordings", "description": "represents the duration of the interaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "skill": {"name": "skill", "description": "represents the skill used by the agent. Used to map languages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "after_call_work_time": {"name": "after_call_work_time", "description": "represents the duration of the after_call_work state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ivr_time": {"name": "ivr_time", "description": "represents the duration of the ivr time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "talk_time": {"name": "talk_time", "description": "represents the duration of the talk_time state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_to_abandon": {"name": "time_to_abandon", "description": "represents the time to abandon the queue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_queue_time": {"name": "total_queue_time", "description": "represents the duration of the queue time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfers": {"name": "transfers", "description": "represents the transfer call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "represents the email of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_group": {"name": "agent_group", "description": "represents the user group of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csat_text_evaluation": {"name": "csat_text_evaluation", "description": "represents the evaluation of the survey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csat_problem_solved": {"name": "csat_problem_solved", "description": "represents the answer of the survey regarding the resolution", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csat_score": {"name": "csat_score", "description": "represents the csat score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_name": {"name": "list_name", "description": "represents the list name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "represents the subject of the call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_solution_effectiveness": {"name": "custom_solution_effectiveness", "description": "tbc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_reader_type": {"name": "custom_reader_type", "description": "indicates the reader type of the caller", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_afterhours": {"name": "is_afterhours", "description": "boolean that indicates if the call happened after working hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of call creation", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/five9/stg_five9_br.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/five9/stg_five9_br_new.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1608067, "compiled_sql": "/*\n* Staging Five9 table for BR region\n* This is a table which acts as a staging table to get all the relevant Five9 data for BR which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_REPORT\n* CURRENT DATA    = CALLLOG_REPORT_FROM_YESTERDAY_WITHOUT_NOTES\n*/\n\n\n\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                CUSTOM_SF_ID_ENCONTRADO::TEXT                                   AS salesforce_id,\n                ANI::TEXT                                                       AS caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL(AFTER_CALL_WORK_TIME, 0)                                 AS after_call_work_time,\n                IFNULL(IVR_TIME, 0)                                             AS ivr_time,\n                IFNULL(TALK_TIME, 0)                                            AS talk_time,\n                IFNULL(TIME_TO_ABANDON, 0)                                      AS time_to_abandon,\n                IFNULL(TOTAL_QUEUE_TIME, 0)                                     AS total_queue_time,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))                                        AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CUSTOM_PESQUISANPS::TEXT                                        AS csat_tex_evaluation,\n                CUSTOM_PESQUISAPROBLEMARESOLVIDO::TEXT                          AS csat_problem_solved,\n                ROUND(CUSTOM_PESQUISANOTAATENDIMENTO)::INT                      AS csat_score,\n                CUSTOM_SUBJECT::TEXT                                            AS subject,\n                CUSTOM_SOLUTION_EFFECTIVENESS::TEXT                             AS custom_solution_effectivness,\n                CUSTOM_READER_TYPE::TEXT                                        AS custom_reader_type,\n                COALESCE(disposition IN ('URA Fechada', 'AfterHours'), FALSE)   AS is_afterhours,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM SUMUP_DWH_PROD.SRC_FIVE9.five9_report -- HISTORICAL TABLE BRAZIL\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-11-30'\nUNION\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                CUSTOM_SF_ID_ENCONTRADO::TEXT                                   AS salesforce_id,\n                ANI::TEXT                                                       as caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL(SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 +\n                       HOUR(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 * 60, 0)        AS AFTER_CALL_WORK_TIME,\n                IFNULL(SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME)) * 60 + HOUR(TO_TIME(IVR_TIME)) * 60 * 60,\n                       0)                                                       AS IVR_TIME,\n                IFNULL(SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME)) * 60 +\n                       HOUR(TO_TIME(TALK_TIME)) * 60 * 60, 0)                   AS TALK_TIME,\n                IFNULL(SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON)) * 60 +\n                       HOUR(TO_TIME(TIME_TO_ABANDON)) * 60 * 60, 0)             AS TIME_TO_ABANDON,\n                IFNULL(SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME)) * 60 +\n                       HOUR(TO_TIME(TOTAL_QUEUE_TIME)) * 60 * 60, 0)            AS TOTAL_QUEUE_TIME,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))                                        AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CUSTOM_PESQUISA_NPS::TEXT                                       AS csat_tex_evaluation,\n                CUSTOM_PESQUISA_PROBLEMA_RESOLVIDO::TEXT                        AS csat_problem_solved,\n                ROUND(CUSTOM_PESQUISA_NOTA_ATENDIMENTO)::INT                    AS csat_score,\n                CUSTOM_SUBJECT::TEXT                                            AS subject,\n                CUSTOM_SOLUTION_EFFECTIVENESS::TEXT                             AS custom_solution_effectivness,\n                CUSTOM_READER_TYPE::TEXT                                        AS custom_reader_type,\n                COALESCE(disposition IN ('URA Fechada', 'AfterHours'), FALSE)   AS is_afterhours,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM SUMUP_DWH_PROD.SRC_FIVE9.calllog_report_from_yesterday_without_notes -- CURRENT TABLE\nWHERE TIMESTAMP::DATE >= '2021-12-01'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_five9_br_new"}, "model.merchant_experience_unified_touchpoints.stg_five9_eslatam_us_new": {"raw_sql": "/*\n* Staging Five9 table for LATAM (includes only ES countries and excludes BR) & US\n* This is a table which acts as a staging table to get all the relevant Five9 data for LATAM and US which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_US_CL_STANDARD_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH_CL_US\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n                CALL_ID::TEXT                                                                                         AS call_id,\n                CASE\n                    WHEN SALESFORCE_FIELDS_ID::TEXT = 'nan' THEN NULL\n                    ELSE SALESFORCE_FIELDS_ID END                                                                     AS salesforce_id,\n                SESSION_ID::TEXT                                                                                      AS session_id,\n                CASE\n                    WHEN ANI::TEXT = 'nan' THEN NULL\n                    ELSE ANI::TEXT END                                                                                AS caller_phone,\n                CALL_TYPE::TEXT                                                                                       AS call_type,\n                CASE\n                    WHEN CAMPAIGN::TEXT = '[None]' THEN NULL\n                    ELSE CAMPAIGN::TEXT END                                                                           AS campaign,\n                CAMPAIGN_TYPE::TEXT                                                                                   AS campaign_type,\n                CASE\n                    WHEN DISPOSITION_PATH::TEXT = 'nan' THEN NULL\n                    ELSE DISPOSITION_PATH::TEXT END                                                                   AS disposition_path,\n                DISPOSITION::TEXT                                                                                     AS disposition,\n                DNIS::TEXT                                                                                            AS called_phone,\n                CASE\n                    WHEN IVR_PATH::TEXT = 'nan' THEN NULL\n                    ELSE LOWER(IVR_PATH)::TEXT END                                                                    AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END                                       AS skill,\n                IFNULL(AFTER_CALL_WORK_TIME, 0)                                                                       AS after_call_work_time,\n                IFNULL(IVR_TIME, 0)                                                                                   AS ivr_time,\n                IFNULL(TALK_TIME, 0)                                                                                  AS talk_time,\n                IFNULL(TIME_TO_ABANDON, 0)                                                                            AS time_to_abandon,\n                IFNULL(TOTAL_QUEUE_TIME, 0)                                                                           AS total_queue_time,\n                CASE WHEN TRANSFERS::TEXT = 'nan' THEN NULL ELSE TRANSFERS::TEXT END                                  AS transfers,\n                CASE\n                    WHEN AGENT_EMAIL::TEXT = 'nan' THEN NULL\n                    ELSE LOWER(TRIM(AGENT_EMAIL))::TEXT END                                                           AS agent_email,\n                CASE WHEN AGENT_GROUP::TEXT = 'nan' THEN NULL ELSE AGENT_GROUP::TEXT END                              AS agent_group,\n                CASE\n                    WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL\n                    ELSE CUSTOM_SOLVED::TEXT END                                                                      AS custom_solved,\n                CASE\n                    WHEN CUSTOM_NPS::TEXT = 'nan' THEN NULL\n                    ELSE ROUND(CUSTOM_NPS)::INT END                                                                   AS custom_nps,\n                CASE\n                    WHEN NOTES::TEXT = 'nan' THEN NULL\n                    ELSE REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '') END                                     AS notes,\n                COALESCE(disposition IN\n                         ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'),\n                         false)                                                                                       AS is_afterhours,\n                COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', false)                                           AS is_deflected,\n                TIMESTAMP::TIMESTAMP                                                                                  AS created_at\nFROM {{ source('five9', 'five9_us_cl_standard_report') }} -- HISTORICAL TABLE ES-LATAM US\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT DISTINCT\n                CALL_ID::TEXT                                                               AS call_id,\n                CASE\n                    WHEN SALESFORCE_FIELDS_ID::TEXT = 'nan' THEN NULL\n                    ELSE SALESFORCE_FIELDS_ID END                                           AS salesforce_id,\n                SESSION_ID::TEXT                                                            AS session_id,\n                CASE\n                    WHEN ANI::TEXT = 'nan' THEN NULL\n                    ELSE ANI::TEXT END                                                      AS caller_phone,\n                CALL_TYPE::TEXT                                                             AS call_type,\n                CASE\n                    WHEN CAMPAIGN::TEXT = '[None]' THEN NULL\n                    ELSE CAMPAIGN::TEXT END                                                 AS campaign,\n                CAMPAIGN_TYPE::TEXT                                                         AS campaign_type,\n                CASE\n                    WHEN DISPOSITION_PATH::TEXT = 'nan' THEN NULL\n                    ELSE DISPOSITION_PATH::TEXT END                                         AS disposition_path,\n                DISPOSITION::TEXT                                                           AS disposition,\n                DNIS::TEXT                                                                  AS called_phone,\n                CASE WHEN IVR_PATH::TEXT = 'nan' THEN NULL ELSE LOWER(IVR_PATH)::TEXT END   AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END             AS skill,\n                IFNULL(SECOND(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME, '-', '0'))) * 60 * 60, 0) AS after_call_work_time,\n                IFNULL(SECOND(TO_TIME(REPLACE(IVR_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(IVR_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(IVR_TIME, '-', '0'))) * 60 * 60, 0)             AS ivr_time,\n                IFNULL(SECOND(TO_TIME(REPLACE(TALK_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(TALK_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(TALK_TIME, '-', '0'))) * 60 * 60, 0)            AS talk_time,\n                IFNULL(SECOND(TO_TIME(REPLACE(TIME_TO_ABANDON, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(TIME_TO_ABANDON, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(TIME_TO_ABANDON, '-', '0'))) * 60 * 60, 0)      AS time_to_abandon,\n                IFNULL(SECOND(TO_TIME(REPLACE(TOTAL_QUEUE_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(TOTAL_QUEUE_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(TOTAL_QUEUE_TIME, '-', '0'))) * 60 * 60, 0)     AS total_queue_time,\n                TRANSFERS::TEXT                                                             AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))::TEXT                                              AS agent_email,\n                AGENT_GROUP::TEXT                                                           AS agent_group,\n                CASE\n                    WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL\n                    ELSE CUSTOM_SOLVED::TEXT END                                            AS custom_solved,\n                ROUND(CUSTOM_NPS)::INT                                                      AS custom_nps,\n                REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '')                        AS notes,\n                COALESCE(disposition IN\n                         ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'),\n                         FALSE)                                                             AS is_afterhours,\n                COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', FALSE)                 AS is_deflected,\n                TIMESTAMP::TIMESTAMP                                                        AS created_at\nFROM {{ source('five9', 'call_logreport_dwh_cl_us') }} -- CURRENT TABLE ES-LATAM US\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us", "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "five9", "stg_five9_eslatam_us_new"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_five9_eslatam_us_new", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/five9/stg_five9_eslatam_us_new.sql", "original_file_path": "models/staging/five9/stg_five9_eslatam_us_new.sql", "name": "stg_five9_eslatam_us_new", "alias": "stg_five9_eslatam_us_new", "checksum": {"name": "sha256", "checksum": "6cd7ede085104bbcae84aa237abfaf19c815d0ecb0805d7e4db16b5e25238803"}, "tags": [], "refs": [], "sources": [["five9", "call_logreport_dwh_cl_us"], ["five9", "five9_us_cl_standard_report"]], "description": "Staging Five9 table for LATAM (includes only ES countries and excludes BR) & US", "columns": {"call_id": {"name": "call_id", "description": "unique identifier for the call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_id": {"name": "salesforce_id", "description": "identifier for the call stored in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "identifier for five9 session (used to join salesforce task)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caller_phone": {"name": "caller_phone", "description": "represents the phone number of the caller", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_type": {"name": "call_type", "description": "represents the type of call (Inbound etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "represents the campaign used in five9. Used to map countries", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "represents the type of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition_path": {"name": "disposition_path", "description": "represents the first level of contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition": {"name": "disposition", "description": "represents the second level of contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "support_phone": {"name": "support_phone", "description": "represents the phone number contacted by the caller", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ivr_path": {"name": "ivr_path", "description": "represents the ivr path", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recordings": {"name": "recordings", "description": "represents the duration of the interaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "skill": {"name": "skill", "description": "represents the skill used by the agent. Used to map languages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "after_call_work_time": {"name": "after_call_work_time", "description": "represents the duration of the after_call_work state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ivr_time": {"name": "ivr_time", "description": "represents the duration of the ivr time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "talk_time": {"name": "talk_time", "description": "represents the duration of the talk_time state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_to_abandon": {"name": "time_to_abandon", "description": "represents the time to abandon the queue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_queue_time": {"name": "total_queue_time", "description": "represents the duration of the queue time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfers": {"name": "transfers", "description": "represents the transfer call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "represents the email of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_group": {"name": "agent_group", "description": "represents the user group of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_solved": {"name": "custom_solved", "description": "represents the answer of the survey regarding the resolution", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_nps": {"name": "custom_nps", "description": "represents the csat score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_name": {"name": "list_name", "description": "represents the name of the list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "represents the notes left by the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_afterhours": {"name": "is_afterhours", "description": "boolean to identify calls after working hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deflected": {"name": "is_deflected", "description": "boolean to identify deflected calls", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of call creation", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/five9/stg_five9_eslatam_us.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/five9/stg_five9_eslatam_us_new.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1655512, "compiled_sql": "/*\n* Staging Five9 table for LATAM (includes only ES countries and excludes BR) & US\n* This is a table which acts as a staging table to get all the relevant Five9 data for LATAM and US which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_US_CL_STANDARD_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH_CL_US\n*/\n\n\n\nSELECT DISTINCT\n                CALL_ID::TEXT                                                                                         AS call_id,\n                CASE\n                    WHEN SALESFORCE_FIELDS_ID::TEXT = 'nan' THEN NULL\n                    ELSE SALESFORCE_FIELDS_ID END                                                                     AS salesforce_id,\n                SESSION_ID::TEXT                                                                                      AS session_id,\n                CASE\n                    WHEN ANI::TEXT = 'nan' THEN NULL\n                    ELSE ANI::TEXT END                                                                                AS caller_phone,\n                CALL_TYPE::TEXT                                                                                       AS call_type,\n                CASE\n                    WHEN CAMPAIGN::TEXT = '[None]' THEN NULL\n                    ELSE CAMPAIGN::TEXT END                                                                           AS campaign,\n                CAMPAIGN_TYPE::TEXT                                                                                   AS campaign_type,\n                CASE\n                    WHEN DISPOSITION_PATH::TEXT = 'nan' THEN NULL\n                    ELSE DISPOSITION_PATH::TEXT END                                                                   AS disposition_path,\n                DISPOSITION::TEXT                                                                                     AS disposition,\n                DNIS::TEXT                                                                                            AS called_phone,\n                CASE\n                    WHEN IVR_PATH::TEXT = 'nan' THEN NULL\n                    ELSE LOWER(IVR_PATH)::TEXT END                                                                    AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END                                       AS skill,\n                IFNULL(AFTER_CALL_WORK_TIME, 0)                                                                       AS after_call_work_time,\n                IFNULL(IVR_TIME, 0)                                                                                   AS ivr_time,\n                IFNULL(TALK_TIME, 0)                                                                                  AS talk_time,\n                IFNULL(TIME_TO_ABANDON, 0)                                                                            AS time_to_abandon,\n                IFNULL(TOTAL_QUEUE_TIME, 0)                                                                           AS total_queue_time,\n                CASE WHEN TRANSFERS::TEXT = 'nan' THEN NULL ELSE TRANSFERS::TEXT END                                  AS transfers,\n                CASE\n                    WHEN AGENT_EMAIL::TEXT = 'nan' THEN NULL\n                    ELSE LOWER(TRIM(AGENT_EMAIL))::TEXT END                                                           AS agent_email,\n                CASE WHEN AGENT_GROUP::TEXT = 'nan' THEN NULL ELSE AGENT_GROUP::TEXT END                              AS agent_group,\n                CASE\n                    WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL\n                    ELSE CUSTOM_SOLVED::TEXT END                                                                      AS custom_solved,\n                CASE\n                    WHEN CUSTOM_NPS::TEXT = 'nan' THEN NULL\n                    ELSE ROUND(CUSTOM_NPS)::INT END                                                                   AS custom_nps,\n                CASE\n                    WHEN NOTES::TEXT = 'nan' THEN NULL\n                    ELSE REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '') END                                     AS notes,\n                COALESCE(disposition IN\n                         ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'),\n                         false)                                                                                       AS is_afterhours,\n                COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', false)                                           AS is_deflected,\n                TIMESTAMP::TIMESTAMP                                                                                  AS created_at\nFROM SUMUP_DWH_PROD.SRC_FIVE9.five9_us_cl_standard_report -- HISTORICAL TABLE ES-LATAM US\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT DISTINCT\n                CALL_ID::TEXT                                                               AS call_id,\n                CASE\n                    WHEN SALESFORCE_FIELDS_ID::TEXT = 'nan' THEN NULL\n                    ELSE SALESFORCE_FIELDS_ID END                                           AS salesforce_id,\n                SESSION_ID::TEXT                                                            AS session_id,\n                CASE\n                    WHEN ANI::TEXT = 'nan' THEN NULL\n                    ELSE ANI::TEXT END                                                      AS caller_phone,\n                CALL_TYPE::TEXT                                                             AS call_type,\n                CASE\n                    WHEN CAMPAIGN::TEXT = '[None]' THEN NULL\n                    ELSE CAMPAIGN::TEXT END                                                 AS campaign,\n                CAMPAIGN_TYPE::TEXT                                                         AS campaign_type,\n                CASE\n                    WHEN DISPOSITION_PATH::TEXT = 'nan' THEN NULL\n                    ELSE DISPOSITION_PATH::TEXT END                                         AS disposition_path,\n                DISPOSITION::TEXT                                                           AS disposition,\n                DNIS::TEXT                                                                  AS called_phone,\n                CASE WHEN IVR_PATH::TEXT = 'nan' THEN NULL ELSE LOWER(IVR_PATH)::TEXT END   AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END             AS skill,\n                IFNULL(SECOND(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(AFTER_CALL_WORK_TIME, '-', '0'))) * 60 * 60, 0) AS after_call_work_time,\n                IFNULL(SECOND(TO_TIME(REPLACE(IVR_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(IVR_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(IVR_TIME, '-', '0'))) * 60 * 60, 0)             AS ivr_time,\n                IFNULL(SECOND(TO_TIME(REPLACE(TALK_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(TALK_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(TALK_TIME, '-', '0'))) * 60 * 60, 0)            AS talk_time,\n                IFNULL(SECOND(TO_TIME(REPLACE(TIME_TO_ABANDON, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(TIME_TO_ABANDON, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(TIME_TO_ABANDON, '-', '0'))) * 60 * 60, 0)      AS time_to_abandon,\n                IFNULL(SECOND(TO_TIME(REPLACE(TOTAL_QUEUE_TIME, '-', '0'))) +\n                       MINUTE(TO_TIME(REPLACE(TOTAL_QUEUE_TIME, '-', '0'))) * 60 +\n                       HOUR(TO_TIME(REPLACE(TOTAL_QUEUE_TIME, '-', '0'))) * 60 * 60, 0)     AS total_queue_time,\n                TRANSFERS::TEXT                                                             AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))::TEXT                                              AS agent_email,\n                AGENT_GROUP::TEXT                                                           AS agent_group,\n                CASE\n                    WHEN CUSTOM_SOLVED::TEXT = 'nan' THEN NULL\n                    ELSE CUSTOM_SOLVED::TEXT END                                            AS custom_solved,\n                ROUND(CUSTOM_NPS)::INT                                                      AS custom_nps,\n                REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '')                        AS notes,\n                COALESCE(disposition IN\n                         ('AfterHours', 'AfterHours Calls', 'AfterHours AllHands', 'AfterHours Holiday', 'CL Feriado'),\n                         FALSE)                                                             AS is_afterhours,\n                COALESCE(disposition = 'CL WhatsApp IVR - SERVICED', FALSE)                 AS is_deflected,\n                TIMESTAMP::TIMESTAMP                                                        AS created_at\nFROM SUMUP_DWH_PROD.SRC_FIVE9.call_logreport_dwh_cl_us -- CURRENT TABLE ES-LATAM US\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_five9_eslatam_us_new"}, "model.merchant_experience_unified_touchpoints.stg_five9_eu_new": {"raw_sql": "/*\n* Staging Five9 table for EU region\n* This is a table which acts as a staging table to get all the relevant Five9 data for EU which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_EUROPE_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                SALESFORCE_SALESFORCE_ID::TEXT                                  AS salesforce_id,\n                SALESFORCE_MERCHANT_ID::TEXT                                    AS salesforce_merchant_id,\n                SESSION_ID::TEXT                                                AS session_id,\n                ANI::TEXT                                                       AS caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL(AFTER_CALL_WORK_TIME, 0)                                 AS after_call_work_time,\n                IFNULL(IVR_TIME, 0)                                             AS ivr_time,\n                IFNULL(TALK_TIME, 0)                                            AS talk_time,\n                IFNULL(TIME_TO_ABANDON, 0)                                      AS time_to_abandon,\n                IFNULL(TOTAL_QUEUE_TIME, 0)                                     AS total_queue_time,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))::TEXT                                  AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CASE\n                    WHEN CALLS_COMPLETED_IN_IVR = 1 THEN 'Completed'\n                    WHEN CALLS_COMPLETED_IN_IVR = 0 THEN 'Not Completed'\n                    ELSE 'Unknown' END                                          AS call_completed_in_ivr,\n                REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '')::TEXT      AS notes,\n                SUMUP_SURVEY_ANSWER_INTEGER::INT                                AS survey_answer,\n                SALESFORCE_CUSTOMER_TYPE::TEXT                                  AS salesforce_customer_type,\n                NULL                                                            AS revamp_ivr_call_escalated,\n                COALESCE(disposition = 'AfterHours', false)                     as is_afterhours,\n                COALESCE(disposition = 'Deflected_To_Funnel', false)            as is_deflected,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM {{ source('five9', 'five9_europe_report') }} -- HISTORICAL TABLE EU\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                SALESFORCE_SALESFORCE_ID::TEXT                                  AS salesforce_id,\n                SALESFORCE_MERCHANT_ID::TEXT                                    AS salesforce_merchant_id,\n                SESSION_ID::TEXT                                                AS session_id,\n                ANI::TEXT                                                       AS caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL((SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 +\n                        HOUR(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 * 60), 0)      AS AFTER_CALL_WORK_TIME,\n                IFNULL((SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME)) * 60 + HOUR(TO_TIME(IVR_TIME)) * 60 * 60),\n                       0)                                                       AS IVR_TIME,\n                IFNULL((SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME)) * 60 +\n                        HOUR(TO_TIME(TALK_TIME)) * 60 * 60), 0)                 AS TALK_TIME,\n                IFNULL((SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON)) * 60 +\n                        HOUR(TO_TIME(TIME_TO_ABANDON)) * 60 * 60), 0)           AS TIME_TO_ABANDON,\n                IFNULL((SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME)) * 60 +\n                        HOUR(TO_TIME(TOTAL_QUEUE_TIME)) * 60 * 60), 0)          AS TOTAL_QUEUE_TIME,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))::TEXT                                  AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CASE\n                    WHEN CALLS_COMPLETED_IN_IVR = 1 THEN 'Completed'\n                    WHEN CALLS_COMPLETED_IN_IVR = 0 THEN 'Not Completed'\n                    ELSE 'Unknown' END                                          AS call_completed_in_ivr,\n                REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '')::TEXT      AS notes,\n                SUMUP_SURVEY_ANSWER_INTEGER::INT                                AS survey_answer,\n                SALESFORCE_CUSTOMER_TYPE::TEXT                                  AS salesforce_customer_type,\n                NULL                                                            AS revamp_ivr_call_escalated,\n                COALESCE(disposition = 'AfterHours', false)                     as is_afterhours,\n                COALESCE(disposition = 'Deflected_To_Funnel', false)            as is_deflected,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM {{ source('five9', 'call_logreport_dwh') }}-- CURRENT TABLE EU\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh", "source.merchant_experience_unified_touchpoints.five9.five9_europe_report"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "five9", "stg_five9_eu_new"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_five9_eu_new", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/five9/stg_five9_eu_new.sql", "original_file_path": "models/staging/five9/stg_five9_eu_new.sql", "name": "stg_five9_eu_new", "alias": "stg_five9_eu_new", "checksum": {"name": "sha256", "checksum": "88e9aae010aecd732bf9ba88835833aafe3f631632c87fcb40850be739afbc72"}, "tags": [], "refs": [], "sources": [["five9", "call_logreport_dwh"], ["five9", "five9_europe_report"]], "description": "Staging Five9 table for EU region", "columns": {"call_id": {"name": "call_id", "description": "unique identifier for the call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_id": {"name": "salesforce_id", "description": "identifier for the call stored in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_merchant_id": {"name": "salesforce_merchant_id", "description": "identifier for merchant stored in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "identifier for five9 session (used to join salesforce task)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caller_phone": {"name": "caller_phone", "description": "represents the phone number of the caller", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_type": {"name": "call_type", "description": "represents the type of call (Inbound etc)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "represents the campaign used in five9. Used to map countries", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "represents the type of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition_path": {"name": "disposition_path", "description": "represents the first level of contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition": {"name": "disposition", "description": "represents the second level of contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "support_phone": {"name": "support_phone", "description": "represents the phone number contacted by the caller", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ivr_path": {"name": "ivr_path", "description": "represents the ivr path", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recordings": {"name": "recordings", "description": "represents the duration of the interaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "skill": {"name": "skill", "description": "represents the skill used by the agent. Used to map languages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "after_call_work_time": {"name": "after_call_work_time", "description": "represents the duration of the after_call_work state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ivr_time": {"name": "ivr_time", "description": "represents the duration of the ivr time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "talk_time": {"name": "talk_time", "description": "represents the duration of the talk_time state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_to_abandon": {"name": "time_to_abandon", "description": "represents the time to abandon the queue", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_queue_time": {"name": "total_queue_time", "description": "represents the duration of the queue time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfers": {"name": "transfers", "description": "represents the transfer call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "represents the email of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_group": {"name": "agent_group", "description": "represents the user group of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_completed_in_ivr": {"name": "call_completed_in_ivr", "description": "indicates if the call was completed in the ivr", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "represents the notes left by the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revamp_ivr_call_escalated": {"name": "revamp_ivr_call_escalated", "description": "placeholder to union other five9 staging table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "survey_answer": {"name": "survey_answer", "description": "represents the csat score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_customer_type": {"name": "salesforce_customer_type", "description": "represents the customer type information stored in salesforce", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_afterhours": {"name": "is_afterhours", "description": "boolean to identify calls after working hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deflected": {"name": "is_deflected", "description": "boolean to identify deflected calls", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of call creation", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/five9/stg_five9_eu.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/five9/stg_five9_eu_new.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1699114, "compiled_sql": "/*\n* Staging Five9 table for EU region\n* This is a table which acts as a staging table to get all the relevant Five9 data for EU which is needed for tp unified models\n* HISTORICAL DATA = FIVE9_EUROPE_REPORT\n* CURRENT DATA    = CALL_LOGREPORT_DWH\n*/\n\n\n\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                SALESFORCE_SALESFORCE_ID::TEXT                                  AS salesforce_id,\n                SALESFORCE_MERCHANT_ID::TEXT                                    AS salesforce_merchant_id,\n                SESSION_ID::TEXT                                                AS session_id,\n                ANI::TEXT                                                       AS caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL(AFTER_CALL_WORK_TIME, 0)                                 AS after_call_work_time,\n                IFNULL(IVR_TIME, 0)                                             AS ivr_time,\n                IFNULL(TALK_TIME, 0)                                            AS talk_time,\n                IFNULL(TIME_TO_ABANDON, 0)                                      AS time_to_abandon,\n                IFNULL(TOTAL_QUEUE_TIME, 0)                                     AS total_queue_time,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))::TEXT                                  AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CASE\n                    WHEN CALLS_COMPLETED_IN_IVR = 1 THEN 'Completed'\n                    WHEN CALLS_COMPLETED_IN_IVR = 0 THEN 'Not Completed'\n                    ELSE 'Unknown' END                                          AS call_completed_in_ivr,\n                REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '')::TEXT      AS notes,\n                SUMUP_SURVEY_ANSWER_INTEGER::INT                                AS survey_answer,\n                SALESFORCE_CUSTOMER_TYPE::TEXT                                  AS salesforce_customer_type,\n                NULL                                                            AS revamp_ivr_call_escalated,\n                COALESCE(disposition = 'AfterHours', false)                     as is_afterhours,\n                COALESCE(disposition = 'Deflected_To_Funnel', false)            as is_deflected,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM SUMUP_DWH_PROD.SRC_FIVE9.five9_europe_report -- HISTORICAL TABLE EU\nWHERE TIMESTAMP::DATE BETWEEN '2020-01-01' AND '2021-10-31'\nUNION\nSELECT DISTINCT\n                CALL_ID::TEXT                                                   AS call_id,\n                SALESFORCE_SALESFORCE_ID::TEXT                                  AS salesforce_id,\n                SALESFORCE_MERCHANT_ID::TEXT                                    AS salesforce_merchant_id,\n                SESSION_ID::TEXT                                                AS session_id,\n                ANI::TEXT                                                       AS caller_phone,\n                CALL_TYPE::TEXT                                                 AS call_type,\n                CAMPAIGN::TEXT                                                  AS campaign,\n                CAMPAIGN_TYPE::TEXT                                             AS campaign_type,\n                DISPOSITION_PATH::TEXT                                          AS disposition_path,\n                DISPOSITION::TEXT                                               AS disposition,\n                DNIS::TEXT                                                      AS called_phone,\n                LOWER(IVR_PATH)::TEXT                                           AS ivr_path,\n                CASE WHEN SKILL::TEXT = '[None]' THEN NULL ELSE SKILL::TEXT END AS skill,\n                IFNULL((SECOND(TO_TIME(AFTER_CALL_WORK_TIME)) + MINUTE(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 +\n                        HOUR(TO_TIME(AFTER_CALL_WORK_TIME)) * 60 * 60), 0)      AS AFTER_CALL_WORK_TIME,\n                IFNULL((SECOND(TO_TIME(IVR_TIME)) + MINUTE(TO_TIME(IVR_TIME)) * 60 + HOUR(TO_TIME(IVR_TIME)) * 60 * 60),\n                       0)                                                       AS IVR_TIME,\n                IFNULL((SECOND(TO_TIME(TALK_TIME)) + MINUTE(TO_TIME(TALK_TIME)) * 60 +\n                        HOUR(TO_TIME(TALK_TIME)) * 60 * 60), 0)                 AS TALK_TIME,\n                IFNULL((SECOND(TO_TIME(TIME_TO_ABANDON)) + MINUTE(TO_TIME(TIME_TO_ABANDON)) * 60 +\n                        HOUR(TO_TIME(TIME_TO_ABANDON)) * 60 * 60), 0)           AS TIME_TO_ABANDON,\n                IFNULL((SECOND(TO_TIME(TOTAL_QUEUE_TIME)) + MINUTE(TO_TIME(TOTAL_QUEUE_TIME)) * 60 +\n                        HOUR(TO_TIME(TOTAL_QUEUE_TIME)) * 60 * 60), 0)          AS TOTAL_QUEUE_TIME,\n                CASE WHEN TRANSFERS = 1 THEN 1 ELSE NULL END                    AS transfers,\n                LOWER(TRIM(AGENT_EMAIL))::TEXT                                  AS agent_email,\n                AGENT_GROUP::TEXT                                               AS agent_group,\n                CASE\n                    WHEN CALLS_COMPLETED_IN_IVR = 1 THEN 'Completed'\n                    WHEN CALLS_COMPLETED_IN_IVR = 0 THEN 'Not Completed'\n                    ELSE 'Unknown' END                                          AS call_completed_in_ivr,\n                REPLACE(regexp_replace(NOTES, '\\r|\\n', ''), ',', '')::TEXT      AS notes,\n                SUMUP_SURVEY_ANSWER_INTEGER::INT                                AS survey_answer,\n                SALESFORCE_CUSTOMER_TYPE::TEXT                                  AS salesforce_customer_type,\n                NULL                                                            AS revamp_ivr_call_escalated,\n                COALESCE(disposition = 'AfterHours', false)                     as is_afterhours,\n                COALESCE(disposition = 'Deflected_To_Funnel', false)            as is_deflected,\n                TIMESTAMP::TIMESTAMP                                            AS created_at\nFROM SUMUP_DWH_PROD.SRC_FIVE9.call_logreport_dwh-- CURRENT TABLE EU\nWHERE TIMESTAMP::DATE >= '2021-11-01'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_five9_eu_new"}, "model.merchant_experience_unified_touchpoints.stg_five9_states_eu": {"raw_sql": "/*\n* Staging Five9 table for agent states for EU\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n                CALL_ID__FIVE9::TEXT                                                  AS call_id,\n                LOWER(AGENT_EMAIL)::TEXT                                              AS agent_email,\n                CAMPAIGN::TEXT                                                        AS campaign,\n                REASON_CODE::TEXT                                                     AS reason_code,\n                STATE::TEXT                                                           AS state,\n                TRANSFERRED_TO_SKILL__FIVE9::TEXT                                     AS transfer_to_skill,\n                TRANSFERRED_TO_AGENT__FIVE9::TEXT                                     AS transfer_to_agent,\n                CALLS_UNANSWERED_BY_AGENT__FIVE9::INT                                 AS unanswered_call,\n                AGENT_STATE_TIME::INT                                                 AS state_time,\n                TO_TIMESTAMP(TIMESTAMP_MILLISECOND__FIVE9, 'YYYY-MM-DD HH:MI:SS:FF1') AS created_at\nFROM {{ source('funnel', 'agent_state_five9') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.funnel.agent_state_five9"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "five9", "stg_five9_states_eu"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_five9_states_eu", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/five9/stg_five9_states_eu.sql", "original_file_path": "models/staging/five9/stg_five9_states_eu.sql", "name": "stg_five9_states_eu", "alias": "stg_five9_states_eu", "checksum": {"name": "sha256", "checksum": "c1a3f4bca99fbb6e63085eae18853af83276a39e595229505a7043b7818ba78a"}, "tags": [], "refs": [], "sources": [["funnel", "agent_state_five9"]], "description": "Staging Five9 table for agent states for EU", "columns": {"call_id": {"name": "call_id", "description": "unique identifier for the call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "represents the email address of the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "represents the campaign used in five9. Used to map countries", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_code": {"name": "reason_code", "description": "represents the reason_code used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "represents the state used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_to_skill": {"name": "transfer_to_skill", "description": "indicates a transfer to a different skill", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_to_agent": {"name": "transfer_to_agent", "description": "indicates a transfer to a different agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state_time": {"name": "state_time", "description": "represents the duration of the state in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/five9/stg_five9_states_eu.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/five9/stg_five9_states_eu.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1712794, "compiled_sql": "/*\n* Staging Five9 table for agent states for EU\n*/\n\n\n\nSELECT DISTINCT\n                CALL_ID__FIVE9::TEXT                                                  AS call_id,\n                LOWER(AGENT_EMAIL)::TEXT                                              AS agent_email,\n                CAMPAIGN::TEXT                                                        AS campaign,\n                REASON_CODE::TEXT                                                     AS reason_code,\n                STATE::TEXT                                                           AS state,\n                TRANSFERRED_TO_SKILL__FIVE9::TEXT                                     AS transfer_to_skill,\n                TRANSFERRED_TO_AGENT__FIVE9::TEXT                                     AS transfer_to_agent,\n                CALLS_UNANSWERED_BY_AGENT__FIVE9::INT                                 AS unanswered_call,\n                AGENT_STATE_TIME::INT                                                 AS state_time,\n                TO_TIMESTAMP(TIMESTAMP_MILLISECOND__FIVE9, 'YYYY-MM-DD HH:MI:SS:FF1') AS created_at\nFROM SHARED_FUNNEL_EU_OPERATIONS__MGBXANDJKGW6VCVANQV.FUNNEL__MGBXANDJKGW6VCVANQV.agent_state_five9", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_five9_states_eu"}, "model.merchant_experience_unified_touchpoints.stg_acquisition_cohort": {"raw_sql": "/*\n* Staging table for merchant data\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    CARD_READER_OWNER_DATE::TIMESTAMP AS card_reader_owner_at\nFROM {{ source('merchants_olap', 'v_m_dim_acquisition_cohort') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "merchants", "stg_acquisition_cohort"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_acquisition_cohort", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/merchants/stg_acquisition_cohort.sql", "original_file_path": "models/staging/merchants/stg_acquisition_cohort.sql", "name": "stg_acquisition_cohort", "alias": "stg_acquisition_cohort", "checksum": {"name": "sha256", "checksum": "4180881fcb0bfb84b72d22ce23cab3d2df11fe5f5c7b2ee866055ad2cc8f07e9"}, "tags": [], "refs": [], "sources": [["merchants_olap", "v_m_dim_acquisition_cohort"]], "description": "Staging table for merchant acquisition data including card reader owner date", "columns": {"dim_merchant_id": {"name": "dim_merchant_id", "description": "surrogate key id for olap tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_reader_owner_at": {"name": "card_reader_owner_at", "description": "timestamp indicating when the merchant purchased the card reader", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/merchants/stg_acquisition_cohort.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/merchants/stg_acquisition_cohort.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1717503, "compiled_sql": "/*\n* Staging table for merchant data\n*/\n\n\n\nSELECT DISTINCT\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    CARD_READER_OWNER_DATE::TIMESTAMP AS card_reader_owner_at\nFROM SUMUP_DWH_PROD.OLAP.v_m_dim_acquisition_cohort", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_acquisition_cohort"}, "model.merchant_experience_unified_touchpoints.stg_cooperation": {"raw_sql": "/*\n* Staging table for merchant data on cooperation\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    COOPERATION_TYPE::TEXT AS cooperation_type\nFROM {{ source('merchants_olap', 'v_m_dim_cooperation') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "merchants", "stg_cooperation"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_cooperation", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/merchants/stg_cooperation.sql", "original_file_path": "models/staging/merchants/stg_cooperation.sql", "name": "stg_cooperation", "alias": "stg_cooperation", "checksum": {"name": "sha256", "checksum": "ffbd6bf51a340ed66504cfa7b9ee29156e15f062f3e387c425fde5f9bc328de7"}, "tags": [], "refs": [], "sources": [["merchants_olap", "v_m_dim_cooperation"]], "description": "Staging table for merchant data on cooperation", "columns": {"dim_merchant_id": {"name": "dim_merchant_id", "description": "surrogate key id for olap tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cooperation_type": {"name": "cooperation_type", "description": "represents the type of cooperation if applicable", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/merchants/stg_cooperation.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/merchants/stg_cooperation.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1724617, "compiled_sql": "/*\n* Staging table for merchant data on cooperation\n*/\n\n\n\nSELECT DISTINCT\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    COOPERATION_TYPE::TEXT AS cooperation_type\nFROM SUMUP_DWH_PROD.OLAP.v_m_dim_cooperation", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_cooperation"}, "model.merchant_experience_unified_touchpoints.stg_dim_merchants": {"raw_sql": "/*\n* Staging table for merchant data\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    MERCHANT_ID::TEXT AS merchant_id,\n    MERCHANT_CODE::TEXT AS merchant_code,\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    MCC_LEVEL::TEXT AS mcc_level,\n    MCC_CODE::TEXT AS mcc_code,\n    MERCHANT_COUNTRY::TEXT AS country,\n    COALESCE(IS_TEST, FALSE) AS is_test,\n    SIGNUP_DATE::DATE AS signup_date,\n    DATE_OF_BIRTH::DATE AS date_of_birth\nFROM {{ source('merchants_olap', 'v_m_dim_merchant') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "merchants", "stg_dim_merchants"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_dim_merchants", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/merchants/stg_dim_merchants.sql", "original_file_path": "models/staging/merchants/stg_dim_merchants.sql", "name": "stg_dim_merchants", "alias": "stg_dim_merchants", "checksum": {"name": "sha256", "checksum": "f2746a075908763a39651a786f72a75ee01a3ad2e00a9dee65e6a48d55a048d1"}, "tags": [], "refs": [], "sources": [["merchants_olap", "v_m_dim_merchant"]], "description": "Staging table for merchant data coming from olap", "columns": {"merchant_id": {"name": "merchant_id", "description": "unique identifier for merchants", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_code": {"name": "merchant_code", "description": "identifier for merchants mostly used to join salesforce data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dim_merchant_id": {"name": "dim_merchant_id", "description": "surrogate key id for olap tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mcc_level": {"name": "mcc_level", "description": "merchant category indicating the type of business", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mcc_code": {"name": "mcc_code", "description": "merchant category code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "merchant country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_test": {"name": "is_test", "description": "boolean to indicate if the account is a test account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_date": {"name": "signup_date", "description": "sign up date of merchant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_of_birth": {"name": "date_of_birth", "description": "date of birth used to calculate merchant age", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/merchants/stg_dim_merchants.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/merchants/stg_dim_merchants.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1741614, "compiled_sql": "/*\n* Staging table for merchant data\n*/\n\n\n\nSELECT DISTINCT\n    MERCHANT_ID::TEXT AS merchant_id,\n    MERCHANT_CODE::TEXT AS merchant_code,\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    MCC_LEVEL::TEXT AS mcc_level,\n    MCC_CODE::TEXT AS mcc_code,\n    MERCHANT_COUNTRY::TEXT AS country,\n    COALESCE(IS_TEST, FALSE) AS is_test,\n    SIGNUP_DATE::DATE AS signup_date,\n    DATE_OF_BIRTH::DATE AS date_of_birth\nFROM SUMUP_DWH_PROD.OLAP.v_m_dim_merchant", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_dim_merchants"}, "model.merchant_experience_unified_touchpoints.stg_facts_transactions": {"raw_sql": "/*\n* Staging table for merchant transactions facts\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    DIM_MERCHANT_ID::TEXT as dim_merchant_id,\n    DATE_1ST_SUCCESS_TX::DATE first_success_tx_date,\n    DATE_5TH_SUCCESS_TX::DATE fifth_success_tx_date\nFROM {{ source('merchants_olap', 'v_m_facts_transaction') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "merchants", "stg_facts_transactions"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_facts_transactions", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/merchants/stg_facts_transactions.sql", "original_file_path": "models/staging/merchants/stg_facts_transactions.sql", "name": "stg_facts_transactions", "alias": "stg_facts_transactions", "checksum": {"name": "sha256", "checksum": "23224be9fb94a1ae15a6527ffb5c78b4fccaf5c6ea4929713483e2389f9c2153"}, "tags": [], "refs": [], "sources": [["merchants_olap", "v_m_facts_transaction"]], "description": "Staging table for merchant transactions facts used in touchpoint attribution", "columns": {"dim_merchant_id": {"name": "dim_merchant_id", "description": "surrogate key id for olap tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_success_tx_date": {"name": "first_success_tx_date", "description": "date of the 1st successful transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fifth_success_tx_date": {"name": "fifth_success_tx_date", "description": "date of the 5th successful transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/merchants/stg_facts_transactions.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/merchants/stg_facts_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1747992, "compiled_sql": "/*\n* Staging table for merchant transactions facts\n*/\n\n\n\nSELECT DISTINCT\n    DIM_MERCHANT_ID::TEXT as dim_merchant_id,\n    DATE_1ST_SUCCESS_TX::DATE first_success_tx_date,\n    DATE_5TH_SUCCESS_TX::DATE fifth_success_tx_date\nFROM SUMUP_DWH_PROD.OLAP.v_m_facts_transaction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_facts_transactions"}, "model.merchant_experience_unified_touchpoints.stg_legal_types": {"raw_sql": "/*\n* Staging table for legal types of merchants\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    merchants.ID::TEXT AS merchant_id,\n    merchants.LEGAL_TYPE_ID::TEXT AS legal_type_id,\n    merchants.MERCHANT_CODE::TEXT AS merchant_code,\n    legal_types.DESCRIPTION::TEXT AS description,\n    CASE\n        WHEN legal_types.SIGNUP_SCREEN = '2' THEN 'Sole Trader'\n        WHEN legal_types.SIGNUP_SCREEN = '1' THEN 'Company'\n        ELSE 'Unknown' END AS legal_type\nFROM {{ source('merchants', 'merchants') }}\nLEFT JOIN {{ source('merchants', 'legal_types') }}\nON merchants.LEGAL_TYPE_ID = legal_types.ID", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.merchants.merchants", "source.merchant_experience_unified_touchpoints.merchants.legal_types"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "merchants", "stg_legal_types"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_legal_types", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/merchants/stg_legal_types.sql", "original_file_path": "models/staging/merchants/stg_legal_types.sql", "name": "stg_legal_types", "alias": "stg_legal_types", "checksum": {"name": "sha256", "checksum": "3afb68351ef378157ca932a799702b93475e19417dee634162abaca3bfffc4bd"}, "tags": [], "refs": [], "sources": [["merchants", "merchants"], ["merchants", "legal_types"]], "description": "Staging table for legal types of merchants", "columns": {"merchant_id": {"name": "merchant_id", "description": "unique identifier for the merchant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "legal_type_id": {"name": "legal_type_id", "description": "identifier for legal type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_code": {"name": "merchant_code", "description": "identifier for the merchant in code format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "represents the description of the legal type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "legal_type": {"name": "legal_type", "description": "indicate the legal type (Sole Trader/Company/Unknown)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/merchants/stg_legal_types.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/merchants/stg_legal_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1757376, "compiled_sql": "/*\n* Staging table for legal types of merchants\n*/\n\n\n\nSELECT DISTINCT\n    merchants.ID::TEXT AS merchant_id,\n    merchants.LEGAL_TYPE_ID::TEXT AS legal_type_id,\n    merchants.MERCHANT_CODE::TEXT AS merchant_code,\n    legal_types.DESCRIPTION::TEXT AS description,\n    CASE\n        WHEN legal_types.SIGNUP_SCREEN = '2' THEN 'Sole Trader'\n        WHEN legal_types.SIGNUP_SCREEN = '1' THEN 'Company'\n        ELSE 'Unknown' END AS legal_type\nFROM SUMUP_DWH_PROD.SRC_PAYMENT.merchants\nLEFT JOIN SUMUP_DWH_PROD.SRC_PAYMENT.legal_types\nON merchants.LEGAL_TYPE_ID = legal_types.ID", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_legal_types"}, "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation": {"raw_sql": "/*\n* Staging table for merchant segmentation to identify small merchants\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    MERCHANT_ID::TEXT AS merchant_id,\n    MERCHANT_CODE::TEXT AS merchant_code,\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    MERCHANT_COUNTRY::TEXT AS country,\n    COALESCE(SMALL_MERCHANT_IN_MONTH_T_F, FALSE) AS is_small_merchant,\n    TX_MONTH::DATE AS month_transaction_date\nFROM {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "merchants", "stg_small_merchant_segmentation"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/merchants/stg_small_merchant_segmentation.sql", "original_file_path": "models/staging/merchants/stg_small_merchant_segmentation.sql", "name": "stg_small_merchant_segmentation", "alias": "stg_small_merchant_segmentation", "checksum": {"name": "sha256", "checksum": "5aefd2136f86ac147aa41fd2a08cb9c04bf4c3d7f9f604b4bc873fe62bc2223d"}, "tags": [], "refs": [], "sources": [["merchant_segmentation", "ae_t_small_merchant_segmentation"]], "description": "Staging table for merchant segmentation to identify small merchants", "columns": {"merchant_id": {"name": "merchant_id", "description": "unique identifier for merchants", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_code": {"name": "merchant_code", "description": "identifier for merchants mostly used to join salesforce data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dim_merchant_id": {"name": "dim_merchant_id", "description": "surrogate key id for olap tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "merchant country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_small_merchant": {"name": "is_small_merchant", "description": "boolean to indicate if merchant is a small merchant in month", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_transaction_date": {"name": "month_transaction_date", "description": "representing the calendar month of the transacting merchant", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/merchants/stg_small_merchant_segmentation.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/merchants/stg_small_merchant_segmentation.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.176701, "compiled_sql": "/*\n* Staging table for merchant segmentation to identify small merchants\n*/\n\n\n\nSELECT DISTINCT\n    MERCHANT_ID::TEXT AS merchant_id,\n    MERCHANT_CODE::TEXT AS merchant_code,\n    DIM_MERCHANT_ID::TEXT AS dim_merchant_id,\n    MERCHANT_COUNTRY::TEXT AS country,\n    COALESCE(SMALL_MERCHANT_IN_MONTH_T_F, FALSE) AS is_small_merchant,\n    TX_MONTH::DATE AS month_transaction_date\nFROM SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_small_merchant_segmentation"}, "model.merchant_experience_unified_touchpoints.stg_fulfillment_requests": {"raw_sql": "/*\n* Staging table for Fulfillment request table\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    request.SHIPMENT_ID::TEXT AS request_id,\n    request.CUSTOMER_REFERENCE::TEXT AS merchant_code,\n    request.COUNTRY_CODE::TEXT AS country,\n    request.SOURCE::TEXT AS source,\n    request.ORDER_TYPE::TEXT AS order_type,\n    request.CREATED_AT::TEXT AS created_at\nFROM {{ source('plugger', 'fulfillment_request') }} request\nLEFT JOIN {{ source('plugger', 'fulfillment_request_item') }} request_item\n    ON request.shipment_id = request_item.id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.plugger.fulfillment_request_item", "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "plugger", "stg_fulfillment_requests"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_fulfillment_requests", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/plugger/stg_fulfillment_requests.sql", "original_file_path": "models/staging/plugger/stg_fulfillment_requests.sql", "name": "stg_fulfillment_requests", "alias": "stg_fulfillment_requests", "checksum": {"name": "sha256", "checksum": "065cebcdca604d404848776e72fb0e192f99bfebe61489ff5a045616245d0b40"}, "tags": [], "refs": [], "sources": [["plugger", "fulfillment_request_item"], ["plugger", "fulfillment_request"]], "description": "Staging table for Fulfillment request table", "columns": {"request_id": {"name": "request_id", "description": "unique identifier for the request", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_code": {"name": "merchant_code", "description": "identifier for the merchant code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "represents country of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "represents the source of the request", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_type": {"name": "order_type", "description": "represents the type of replacement order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of the request", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/plugger/stg_fulfillment_requests.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/plugger/stg_fulfillment_requests.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.1776423, "compiled_sql": "/*\n* Staging table for Fulfillment request table\n*/\n\n\n\nSELECT DISTINCT\n    request.SHIPMENT_ID::TEXT AS request_id,\n    request.CUSTOMER_REFERENCE::TEXT AS merchant_code,\n    request.COUNTRY_CODE::TEXT AS country,\n    request.SOURCE::TEXT AS source,\n    request.ORDER_TYPE::TEXT AS order_type,\n    request.CREATED_AT::TEXT AS created_at\nFROM SUMUP_DWH_PROD.SRC_PLUGGER.fulfillment_request request\nLEFT JOIN SUMUP_DWH_PROD.SRC_PLUGGER.fulfillment_request_item request_item\n    ON request.shipment_id = request_item.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_fulfillment_requests"}, "model.merchant_experience_unified_touchpoints.v_user_manager": {"raw_sql": "/*\n* User manager view for salesforce users\n*/\n\n{{ config(materialized='view') }}\n\nSELECT USER.ID       AS USER_ID,\n       MANAGER.EMAIL AS MANAGER_EMAIL\nFROM SRC_SALESFORCE.USER USER\n     JOIN SRC_SALESFORCE.USER MANAGER ON USER.MANAGER_ID = MANAGER.ID", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "user", "v_user_manager"], "unique_id": "model.merchant_experience_unified_touchpoints.v_user_manager", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "user/v_user_manager.sql", "original_file_path": "models/user/v_user_manager.sql", "name": "v_user_manager", "alias": "v_user_manager", "checksum": {"name": "sha256", "checksum": "8d4f96eb439fa785e21b28c1feb823c76e27f2a498b0150d3b17f7e6f002f7da"}, "tags": [], "refs": [], "sources": [], "description": "Manager of Salesforce Users", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "manager_email": {"name": "manager_email", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/user/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/user/v_user_manager.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676045139.310697, "compiled_sql": "/*\n* User manager view for salesforce users\n*/\n\n\n\nSELECT USER.ID       AS USER_ID,\n       MANAGER.EMAIL AS MANAGER_EMAIL\nFROM SRC_SALESFORCE.USER USER\n     JOIN SRC_SALESFORCE.USER MANAGER ON USER.MANAGER_ID = MANAGER.ID", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user_manager"}, "analysis.merchant_experience_unified_touchpoints.callback_request": {"raw_sql": "/*\n* Callback view\n*/\n\n{{ config(materialized='table') }}\n\nWITH callback_sla as\n(SELECT \n    crr.id AS callback_id,\n    t.id AS task_id,\n    crr.created_by_id AS createdby_id,\n    crr.name,\n    crr.market_c,\n    crr.topic_c AS callback_topic,\n    CASE\n        WHEN crr.origin_c = 'app_Android' THEN 'App (Android)'\n        WHEN crr.origin_c = 'app_iOS' THEN 'App (iOS)'\n        ELSE crr.origin_c\n    END AS origin,\n    crr.created_date AS callback_requesttime,\n    min(fer.\"TIMESTAMP\") AS first_attempttime,\n    -- This field has changed - now it's in minutes - before it was in format XX: XX : XX\n    TIMESTAMPDIFF(minute, crr.created_date::timestamp_ntz, min(fer.timestamp)) AS duration_between_request_and_first_attempt,\n        CASE\n            WHEN crr.created_by_id::text = '0052p00000AACZ4AAP'::text AND TIMESTAMPDIFF(minute, crr.created_date::timestamp_ntz, min(fer.timestamp)) < 30 THEN true\n            WHEN crr.created_by_id::text <> '0052p00000AACZ4AAP'::text AND TIMESTAMPDIFF(minute, crr.created_date::timestamp_ntz, min(fer.timestamp)) < 5 THEN true\n            ELSE false\n        END AS is_sla_met,\n    crr.status_c AS status,\n    crr.status_details_c as status_details,\n    crr.attempts_c AS attempts,\n    crr.parent_id_c,\n    ROW_NUMBER() OVER (PARTITION BY crr.id ORDER BY 7) AS row_rank\n   FROM src_salesforce.callback_request_c crr\n     LEFT JOIN src_salesforce.task t\n        ON crr.id::text = t.what_id::text\n     LEFT JOIN {{ ref ('STG_FIVE9_EU') }} fer\n        ON t.five_9_five_9_session_id_c::text = fer.session_id::text\n  GROUP BY crr.id ,t.id, crr.created_by_id,crr.name, crr.market_c, crr.topic_c, crr.origin_c, crr.created_date,\n    crr.status_c, crr.status_details_c, crr.attempts_c, crr.parent_id_c\n  )\n  -- The row ranking eliminates the duplicates which I get from joining task and callback requests together, as one callback request may have multiple task records linked to itself. \n  -- Added some additional specs to the view, such as Origin, Status, Status details, Attempts and ParentId\n  SELECT * \n  FROM callback_sla\n  WHERE row_rank = 1", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_EU"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "analysis", "archive", "callback_request"], "unique_id": "analysis.merchant_experience_unified_touchpoints.callback_request", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "analysis/archive/callback_request.sql", "original_file_path": "analyses/archive/callback_request.sql", "name": "callback_request", "alias": "callback_request", "checksum": {"name": "sha256", "checksum": "2867eceab8ef9fb8c6a0186295b4a57c6e4b27d16c6bf4d142dc22fc80664b83"}, "tags": [], "refs": [["STG_FIVE9_EU"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/analyses/archive/callback_request.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676045139.0366116, "compiled_sql": "/*\n* Callback view\n*/\n\n\n\nWITH callback_sla as\n(SELECT \n    crr.id AS callback_id,\n    t.id AS task_id,\n    crr.created_by_id AS createdby_id,\n    crr.name,\n    crr.market_c,\n    crr.topic_c AS callback_topic,\n    CASE\n        WHEN crr.origin_c = 'app_Android' THEN 'App (Android)'\n        WHEN crr.origin_c = 'app_iOS' THEN 'App (iOS)'\n        ELSE crr.origin_c\n    END AS origin,\n    crr.created_date AS callback_requesttime,\n    min(fer.\"TIMESTAMP\") AS first_attempttime,\n    -- This field has changed - now it's in minutes - before it was in format XX: XX : XX\n    TIMESTAMPDIFF(minute, crr.created_date::timestamp_ntz, min(fer.timestamp)) AS duration_between_request_and_first_attempt,\n        CASE\n            WHEN crr.created_by_id::text = '0052p00000AACZ4AAP'::text AND TIMESTAMPDIFF(minute, crr.created_date::timestamp_ntz, min(fer.timestamp)) < 30 THEN true\n            WHEN crr.created_by_id::text <> '0052p00000AACZ4AAP'::text AND TIMESTAMPDIFF(minute, crr.created_date::timestamp_ntz, min(fer.timestamp)) < 5 THEN true\n            ELSE false\n        END AS is_sla_met,\n    crr.status_c AS status,\n    crr.status_details_c as status_details,\n    crr.attempts_c AS attempts,\n    crr.parent_id_c,\n    ROW_NUMBER() OVER (PARTITION BY crr.id ORDER BY 7) AS row_rank\n   FROM src_salesforce.callback_request_c crr\n     LEFT JOIN src_salesforce.task t\n        ON crr.id::text = t.what_id::text\n     LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_EU fer\n        ON t.five_9_five_9_session_id_c::text = fer.session_id::text\n  GROUP BY crr.id ,t.id, crr.created_by_id,crr.name, crr.market_c, crr.topic_c, crr.origin_c, crr.created_date,\n    crr.status_c, crr.status_details_c, crr.attempts_c, crr.parent_id_c\n  )\n  -- The row ranking eliminates the duplicates which I get from joining task and callback requests together, as one callback request may have multiple task records linked to itself. \n  -- Added some additional specs to the view, such as Origin, Status, Status details, Attempts and ParentId\n  SELECT * \n  FROM callback_sla\n  WHERE row_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "seed.merchant_experience_unified_touchpoints.case_history_status_rank": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "case_history_status_rank"], "unique_id": "seed.merchant_experience_unified_touchpoints.case_history_status_rank", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "case_history_status_rank.csv", "original_file_path": "seeds/case_history_status_rank.csv", "name": "case_history_status_rank", "alias": "case_history_status_rank", "checksum": {"name": "sha256", "checksum": "3733b6094a8c078d6dffc6d496643ec997da5359cfa41b5c835548de066bc386"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of case statues to calculate case handling time", "columns": {"rank": {"name": "rank", "description": "rank of the status", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "name of the case status", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.329724, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.case_history_status_rank"}, "seed.merchant_experience_unified_touchpoints.department_mapping": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "department_mapping"], "unique_id": "seed.merchant_experience_unified_touchpoints.department_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "department_mapping.csv", "original_file_path": "seeds/department_mapping.csv", "name": "department_mapping", "alias": "department_mapping", "checksum": {"name": "sha256", "checksum": "00c86de3a4220f04384c3a7860dae761a4a6719e10cbc2672975581b05244c77"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of department values from salesforce", "columns": {"old_department": {"name": "old_department", "description": "source value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_department": {"name": "new_department", "description": "group of the mapped value", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.322195, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.department_mapping"}, "seed.merchant_experience_unified_touchpoints.language_mapping": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "language_mapping"], "unique_id": "seed.merchant_experience_unified_touchpoints.language_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "language_mapping.csv", "original_file_path": "seeds/language_mapping.csv", "name": "language_mapping", "alias": "language_mapping", "checksum": {"name": "sha256", "checksum": "e2fc1a1ab81d67e2af417c5d4779f7d287abaf43b8faff075dfc73c55ab7916f"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of languages with their codes", "columns": {"language_code": {"name": "language_code", "description": "code value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "languagen_name": {"name": "languagen_name", "description": "english name", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3226504, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.language_mapping"}, "seed.merchant_experience_unified_touchpoints.qa_agent_email_mapping": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "qa_agent_email_mapping"], "unique_id": "seed.merchant_experience_unified_touchpoints.qa_agent_email_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "qa_agent_email_mapping.csv", "original_file_path": "seeds/qa_agent_email_mapping.csv", "name": "qa_agent_email_mapping", "alias": "qa_agent_email_mapping", "checksum": {"name": "sha256", "checksum": "062fdc5ff788ca289ef05645b3a987f4aabe79ef74a27a617fb4083e79c06664"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of email address of evaluated agents", "columns": {"old_agent_email": {"name": "old_agent_email", "description": "source value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "mapped value", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3232048, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.qa_agent_email_mapping"}, "seed.merchant_experience_unified_touchpoints.qa_monitor_email_mapping": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "qa_monitor_email_mapping"], "unique_id": "seed.merchant_experience_unified_touchpoints.qa_monitor_email_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "qa_monitor_email_mapping.csv", "original_file_path": "seeds/qa_monitor_email_mapping.csv", "name": "qa_monitor_email_mapping", "alias": "qa_monitor_email_mapping", "checksum": {"name": "sha256", "checksum": "994c7484a6a8a1004d84ec298c8c15fb61413b9bb6c42d7c8faa2d5fa20ba676"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of email address of QA agents", "columns": {"old_monitor_email": {"name": "old_monitor_email", "description": "source value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monitor_email": {"name": "monitor_email", "description": "mapped value", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3242526, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.qa_monitor_email_mapping"}, "seed.merchant_experience_unified_touchpoints.qa_question_name_mapping": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "qa_question_name_mapping"], "unique_id": "seed.merchant_experience_unified_touchpoints.qa_question_name_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "qa_question_name_mapping.csv", "original_file_path": "seeds/qa_question_name_mapping.csv", "name": "qa_question_name_mapping", "alias": "qa_question_name_mapping", "checksum": {"name": "sha256", "checksum": "f09b4f5e7f4ead1929632a8df676da1b39dda4043007110881a25efcd3714049"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of QA questions", "columns": {"old_question_name": {"name": "old_question_name", "description": "source value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "question_name": {"name": "question_name", "description": "mapped value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "QA source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3248973, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.qa_question_name_mapping"}, "seed.merchant_experience_unified_touchpoints.region_mapping": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "region_mapping"], "unique_id": "seed.merchant_experience_unified_touchpoints.region_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "region_mapping.csv", "original_file_path": "seeds/region_mapping.csv", "name": "region_mapping", "alias": "region_mapping", "checksum": {"name": "sha256", "checksum": "03262a9db20ee4bbf458bd9cb289f78a296a8583934a81b872886230ddf688bd"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of countries with global region", "columns": {"country_code": {"name": "country_code", "description": "code value for country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_name": {"name": "country_name", "description": "english name of the country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "code value of the region", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.325517, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.region_mapping"}, "seed.merchant_experience_unified_touchpoints.time_zones": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "time_zones"], "unique_id": "seed.merchant_experience_unified_touchpoints.time_zones", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "time_zones.csv", "original_file_path": "seeds/time_zones.csv", "name": "time_zones", "alias": "time_zones", "checksum": {"name": "sha256", "checksum": "ddb06cc4c7ad48c1bbf79a4f4d66c032d94655a3ac9cd0b38cf06e1c83218607"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of time zones with countries", "columns": {"country_name": {"name": "country_name", "description": "english name of the country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_iso": {"name": "country_iso", "description": "country code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "name of the timezone", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3261425, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.time_zones"}, "seed.merchant_experience_unified_touchpoints.tp_reasons_call": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "tp_reasons_call"], "unique_id": "seed.merchant_experience_unified_touchpoints.tp_reasons_call", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "tp_reasons_call.csv", "original_file_path": "seeds/tp_reasons_call.csv", "name": "tp_reasons_call", "alias": "tp_reasons_call", "checksum": {"name": "sha256", "checksum": "121aaf7591dc576f57f0348157414118df221ef2f051ece4bccb7aac2adef70f"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of contact reason for call channel", "columns": {"old_reason": {"name": "old_reason", "description": "source value for first level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "old_detailed_reason": {"name": "old_detailed_reason", "description": "source value for second level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "mapped value for first level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "detailed_reason": {"name": "detailed_reason", "description": "mapped value for second level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "language of the contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_group": {"name": "reason_group", "description": "group for mapped values", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3272161, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_reasons_call"}, "seed.merchant_experience_unified_touchpoints.tp_reasons_chat": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "tp_reasons_chat"], "unique_id": "seed.merchant_experience_unified_touchpoints.tp_reasons_chat", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "tp_reasons_chat.csv", "original_file_path": "seeds/tp_reasons_chat.csv", "name": "tp_reasons_chat", "alias": "tp_reasons_chat", "checksum": {"name": "sha256", "checksum": "7f85c0555810b8b4fc26ee76a5ba02869d2b4532669cea86fe9ebaf0b9dfb0ab"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of contact reason for chat channel", "columns": {"old_reason": {"name": "old_reason", "description": "source value for first level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "old_detailed_reason": {"name": "old_detailed_reason", "description": "source value for second level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "mapped value for first level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "detailed_reason": {"name": "detailed_reason", "description": "mapped value for second level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "language of the contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_group": {"name": "reason_group", "description": "group for mapped values", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3281574, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_reasons_chat"}, "seed.merchant_experience_unified_touchpoints.tp_reasons_email": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "tp_reasons_email"], "unique_id": "seed.merchant_experience_unified_touchpoints.tp_reasons_email", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "tp_reasons_email.csv", "original_file_path": "seeds/tp_reasons_email.csv", "name": "tp_reasons_email", "alias": "tp_reasons_email", "checksum": {"name": "sha256", "checksum": "99e0bfc43b1e0e8805c2c4f30d75e36e1c0c779b73c7161d98523a73bd2aecd3"}, "tags": [], "refs": [], "sources": [], "description": "A mapping of contact reason for email channel", "columns": {"old_reason": {"name": "old_reason", "description": "source value for first level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "old_detailed_reason": {"name": "old_detailed_reason", "description": "source value for second level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "mapped value for first level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "detailed_reason": {"name": "detailed_reason", "description": "mapped value for second level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "language of the contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_group": {"name": "reason_group", "description": "group for mapped values", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://seeds/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.329261, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_reasons_email"}, "test.merchant_experience_unified_touchpoints.not_null_agent_tp_unified_tp_id.e39a10f080": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tp_id", "model": "{{ get_where_subquery(ref('agent_tp_unified')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_agent_tp_unified_tp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_agent_tp_unified_tp_id.e39a10f080", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_agent_tp_unified_tp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_agent_tp_unified_tp_id", "alias": "not_null_agent_tp_unified_tp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["agent_tp_unified"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.2753499, "column_name": "tp_id", "file_key_name": "models.agent_tp_unified"}, "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_chat_tp_id.3806982917": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tp_id", "model": "{{ get_where_subquery(ref('v_agent_tp_chat')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_agent_tp_chat_tp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_chat_tp_id.3806982917", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_agent_tp_chat_tp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_agent_tp_chat_tp_id", "alias": "not_null_v_agent_tp_chat_tp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_agent_tp_chat"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.2790792, "column_name": "tp_id", "file_key_name": "models.v_agent_tp_chat"}, "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_whatsapp_tp_id.78fce4d9b9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tp_id", "model": "{{ get_where_subquery(ref('v_agent_tp_whatsapp')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_agent_tp_whatsapp_tp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_whatsapp_tp_id.78fce4d9b9", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_agent_tp_whatsapp_tp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_agent_tp_whatsapp_tp_id", "alias": "not_null_v_agent_tp_whatsapp_tp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_agent_tp_whatsapp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.2828856, "column_name": "tp_id", "file_key_name": "models.v_agent_tp_whatsapp"}, "test.merchant_experience_unified_touchpoints.unique_v_agent_tp_facebook_tp_id.1516020ed4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tp_id", "model": "{{ get_where_subquery(ref('v_agent_tp_facebook')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "unique_v_agent_tp_facebook_tp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_v_agent_tp_facebook_tp_id.1516020ed4", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_v_agent_tp_facebook_tp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "unique_v_agent_tp_facebook_tp_id", "alias": "unique_v_agent_tp_facebook_tp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_agent_tp_facebook"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.2860286, "column_name": "tp_id", "file_key_name": "models.v_agent_tp_facebook"}, "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_facebook_tp_id.45461b8558": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tp_id", "model": "{{ get_where_subquery(ref('v_agent_tp_facebook')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_agent_tp_facebook_tp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_facebook_tp_id.45461b8558", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_agent_tp_facebook_tp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_agent_tp_facebook_tp_id", "alias": "not_null_v_agent_tp_facebook_tp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_agent_tp_facebook"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.2891784, "column_name": "tp_id", "file_key_name": "models.v_agent_tp_facebook"}, "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_call_tp_id.5d7d80c2df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tp_id", "model": "{{ get_where_subquery(ref('v_agent_tp_call')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_agent_tp_call_tp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_call_tp_id.5d7d80c2df", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_agent_tp_call_tp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_agent_tp_call_tp_id", "alias": "not_null_v_agent_tp_call_tp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_agent_tp_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.2933137, "column_name": "tp_id", "file_key_name": "models.v_agent_tp_call"}, "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_email_tp_id.c60578d323": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tp_id", "model": "{{ get_where_subquery(ref('v_agent_tp_email')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_agent_tp_email_tp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_email_tp_id.c60578d323", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_agent_tp_email_tp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_agent_tp_email_tp_id", "alias": "not_null_v_agent_tp_email_tp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_agent_tp_email"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.2969236, "column_name": "tp_id", "file_key_name": "models.v_agent_tp_email"}, "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_aggregation_agent_email.c365f5ea07": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "agent_email", "model": "{{ get_where_subquery(ref('v_agent_tp_aggregation')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_agent_tp_aggregation_agent_email"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_aggregation_agent_email.c365f5ea07", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_agent_tp_aggregation_agent_email.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_agent_tp_aggregation_agent_email", "alias": "not_null_v_agent_tp_aggregation_agent_email", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_agent_tp_aggregation"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3004832, "column_name": "agent_email", "file_key_name": "models.v_agent_tp_aggregation"}, "test.merchant_experience_unified_touchpoints.not_null_v_tp_unified_merchant_dim_id.4847b1dc29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v_tp_unified_merchant_dim')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_tp_unified_merchant_dim_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_tp_unified_merchant_dim_id.4847b1dc29", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_tp_unified_merchant_dim_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_tp_unified_merchant_dim_id", "alias": "not_null_v_tp_unified_merchant_dim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_tp_unified_merchant_dim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3038945, "column_name": "id", "file_key_name": "models.v_tp_unified_merchant_dim"}, "test.merchant_experience_unified_touchpoints.unique_v_user_manager_user_id.5f6766a1fd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('v_user_manager')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_user_manager"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "user", "unique_v_user_manager_user_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_v_user_manager_user_id.5f6766a1fd", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_v_user_manager_user_id.sql", "original_file_path": "models/user/schema.yml", "name": "unique_v_user_manager_user_id", "alias": "unique_v_user_manager_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_user_manager"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/user/schema.yml/unique_v_user_manager_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3113272, "compiled_sql": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user_manager\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.v_user_manager"}, "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_user_id.50fe6cd559": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('v_user_manager')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_user_manager"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "user", "not_null_v_user_manager_user_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_user_id.50fe6cd559", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_user_manager_user_id.sql", "original_file_path": "models/user/schema.yml", "name": "not_null_v_user_manager_user_id", "alias": "not_null_v_user_manager_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_user_manager"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/user/schema.yml/not_null_v_user_manager_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3150902, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user_manager\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.v_user_manager"}, "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_manager_email.2006af530e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manager_email", "model": "{{ get_where_subquery(ref('v_user_manager')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_user_manager"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "user", "not_null_v_user_manager_manager_email"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_manager_email.2006af530e", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_user_manager_manager_email.sql", "original_file_path": "models/user/schema.yml", "name": "not_null_v_user_manager_manager_email", "alias": "not_null_v_user_manager_manager_email", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_user_manager"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/user/schema.yml/not_null_v_user_manager_manager_email.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676045139.3186438, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user_manager\nwhere manager_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "manager_email", "file_key_name": "models.v_user_manager"}, "test.merchant_experience_unified_touchpoints.relationships_department_mapping_old_department__agent_current_department__ref_stg_users_.bb7b23aabb": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_department_mappi_6966f6b48d6bf6686bde1c9f55fc437a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_users')", "field": "agent_current_department", "column_name": "old_department", "model": "{{ get_where_subquery(ref('department_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.stg_users", "seed.merchant_experience_unified_touchpoints.department_mapping"]}, "config": {"enabled": true, "alias": "relationships_department_mappi_6966f6b48d6bf6686bde1c9f55fc437a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "relationships_department_mapping_old_department__agent_current_department__ref_stg_users_"], "unique_id": "test.merchant_experience_unified_touchpoints.relationships_department_mapping_old_department__agent_current_department__ref_stg_users_.bb7b23aabb", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "relationships_department_mappi_6966f6b48d6bf6686bde1c9f55fc437a.sql", "original_file_path": "seeds/schema.yml", "name": "relationships_department_mapping_old_department__agent_current_department__ref_stg_users_", "alias": "relationships_department_mappi_6966f6b48d6bf6686bde1c9f55fc437a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_users"], ["department_mapping"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/seeds/schema.yml/relationships_department_mappi_6966f6b48d6bf6686bde1c9f55fc437a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_department_mappi_6966f6b48d6bf6686bde1c9f55fc437a"}, "created_at": 1676045139.3301861, "compiled_sql": "\n    \n    \n\nwith child as (\n    select old_department as from_field\n    from SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.department_mapping\n    where old_department is not null\n),\n\nparent as (\n    select agent_current_department as to_field\n    from SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_users\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "old_department", "file_key_name": "seeds.department_mapping"}, "model.merchant_experience_unified_touchpoints.stg_bot_sessions": {"raw_sql": "/*\n* Staging table for bot session data from salesforce to integrate live chat and messaging data\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    SOURCE_ID::TEXT AS chat_id,\n    BOT_NAME::TEXT AS bot_name,\n    SESSION_DURATION::INT AS bot_handling_time,\n    LAST_DIALOG_NAME::TEXT AS last_dialog_name,\n    SESSION_END_TYPE::TEXT AS session_end_type,\n    ABANDONED_DIALOG_COUNT::INT AS count_abandoned_dialog,\n    FROM_BOT_MESSAGE_COUNT::INT AS count_bot_messages\nFROM {{ source('salesforce', 'analytics_bot_session') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_bot_sessions"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_bot_sessions", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_bot_sessions.sql", "original_file_path": "models/staging/salesforce/stg_bot_sessions.sql", "name": "stg_bot_sessions", "alias": "stg_bot_sessions", "checksum": {"name": "sha256", "checksum": "d435808e4dcce0475cf649ce20c4f05d39ca86b58241db1ca948a66dacc225c5"}, "tags": [], "refs": [], "sources": [["salesforce", "analytics_bot_session"]], "description": "Staging table for bot session data from salesforce to integrate live chat and messaging data", "columns": {"chat_id": {"name": "chat_id", "description": "unique identifier for chat session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bot_name": {"name": "bot_name", "description": "represents the name of the bot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bot_handling_time": {"name": "bot_handling_time", "description": "represents the duration of the session, in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_dialog_name": {"name": "last_dialog_name", "description": "contains the text of the last dialog", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_end_type": {"name": "session_end_type", "description": "represents how the session ended", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_abandoned_dialog": {"name": "count_abandoned_dialog", "description": "number of abandoned dialog", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_bot_messages": {"name": "count_bot_messages", "description": "number of messages from bot", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_bot_sessions.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_bot_sessions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.7833724, "compiled_sql": "/*\n* Staging table for bot session data from salesforce to integrate live chat and messaging data\n*/\n\n\n\nSELECT DISTINCT\n    SOURCE_ID::TEXT AS chat_id,\n    BOT_NAME::TEXT AS bot_name,\n    SESSION_DURATION::INT AS bot_handling_time,\n    LAST_DIALOG_NAME::TEXT AS last_dialog_name,\n    SESSION_END_TYPE::TEXT AS session_end_type,\n    ABANDONED_DIALOG_COUNT::INT AS count_abandoned_dialog,\n    FROM_BOT_MESSAGE_COUNT::INT AS count_bot_messages\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.analytics_bot_session", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_bot_sessions"}, "model.merchant_experience_unified_touchpoints.stg_case_history": {"raw_sql": "/*\n* Staging table for salesforce case history\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS change_id,\n    CASE_ID::TEXT AS case_id,\n    CREATED_BY_ID::TEXT AS created_by_id,\n    FIELD::TEXT AS field,\n    OLD_VALUE::TEXT AS old_value,\n    NEW_VALUE::TEXT AS new_value,\n    DATA_TYPE::TEXT AS data_type,\n    CREATED_DATE::TIMESTAMP AS created_at\nFROM {{ source('salesforce', 'case_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.case_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_case_history"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_case_history", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_case_history.sql", "original_file_path": "models/staging/salesforce/stg_case_history.sql", "name": "stg_case_history", "alias": "stg_case_history", "checksum": {"name": "sha256", "checksum": "b4e22df96bef53c779a2ce4a0bcb3e096fd57c1dc5cc3a12af87d9115abc6d5c"}, "tags": [], "refs": [], "sources": [["salesforce", "case_history"]], "description": "Staging table for salesforce case history", "columns": {"change_id": {"name": "change_id", "description": "unique identifier for the change recorded in the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_id": {"name": "case_id", "description": "identifies the case id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "identifies the user id that performed the change", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field": {"name": "field", "description": "represents the field where the change was done", "meta": {}, "data_type": null, "quote": null, "tags": []}, "old_value": {"name": "old_value", "description": "represents the value before the change", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "represents the value set after the change", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_type": {"name": "data_type", "description": "represents the data type of the field that was changed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of the change", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_case_history.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_case_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.8387322, "compiled_sql": "/*\n* Staging table for salesforce case history\n*/\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS change_id,\n    CASE_ID::TEXT AS case_id,\n    CREATED_BY_ID::TEXT AS created_by_id,\n    FIELD::TEXT AS field,\n    OLD_VALUE::TEXT AS old_value,\n    NEW_VALUE::TEXT AS new_value,\n    DATA_TYPE::TEXT AS data_type,\n    CREATED_DATE::TIMESTAMP AS created_at\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.case_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_case_history"}, "model.merchant_experience_unified_touchpoints.stg_chat_button": {"raw_sql": "/*\n* Staging table for chat button data coming from salesforce to integrate live chat data\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS button_id,\n    DEVELOPER_NAME::TEXT AS developer_name,\n    CREATED_DATE::TIMESTAMP AS created_at\nFROM {{ source('salesforce', 'live_chat_button') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.live_chat_button"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_chat_button"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_chat_button", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_chat_button.sql", "original_file_path": "models/staging/salesforce/stg_chat_button.sql", "name": "stg_chat_button", "alias": "stg_chat_button", "checksum": {"name": "sha256", "checksum": "484bf54f32228ac45de1227093733da3b61edb0b1bb40f57f9656db6c66cff73"}, "tags": [], "refs": [], "sources": [["salesforce", "live_chat_button"]], "description": "Staging table for chat button data coming from salesforce to integrate live chat data", "columns": {"button_id": {"name": "button_id", "description": "unique identifier for chat button", "meta": {}, "data_type": null, "quote": null, "tags": []}, "developer_name": {"name": "developer_name", "description": "represents the name of the chat button", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp indicating the creation the button", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_chat_button.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_chat_button.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.8393683, "compiled_sql": "/*\n* Staging table for chat button data coming from salesforce to integrate live chat data\n*/\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS button_id,\n    DEVELOPER_NAME::TEXT AS developer_name,\n    CREATED_DATE::TIMESTAMP AS created_at\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.live_chat_button", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_chat_button"}, "model.merchant_experience_unified_touchpoints.stg_contacts": {"raw_sql": "/*\n * Salesforce contacts data\n */\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS contact_id,\n    ACCOUNT_ID::TEXT AS account_id,\n    MERCHANT_CODE_C::TEXT AS merchant_code,\n    REGULATORY_ENVIRONMENT_C::TEXT AS regulatory_enviroment\nFROM {{ source('salesforce', 'contact') }}\nWHERE MERCHANT_CODE_C::TEXT IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.contact"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_contacts"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_contacts", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_contacts.sql", "original_file_path": "models/staging/salesforce/stg_contacts.sql", "name": "stg_contacts", "alias": "stg_contacts", "checksum": {"name": "sha256", "checksum": "c3acd3c86d529c372b72fdb66596cf5ef36aff1a890dabc78de2143e0ad4fd79"}, "tags": [], "refs": [], "sources": [["salesforce", "contact"]], "description": "Salesforce contacts data", "columns": {"contact_id": {"name": "contact_id", "description": "unique identifier for contact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "unique identifier for account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_code": {"name": "merchant_code", "description": "unique identifier for merchant_code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "regulatory_enviroment": {"name": "regulatory_enviroment", "description": "represents the regulatory_enviroment of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_contacts.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_contacts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.8402271, "compiled_sql": "/*\n * Salesforce contacts data\n */\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS contact_id,\n    ACCOUNT_ID::TEXT AS account_id,\n    MERCHANT_CODE_C::TEXT AS merchant_code,\n    REGULATORY_ENVIRONMENT_C::TEXT AS regulatory_enviroment\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.contact\nWHERE MERCHANT_CODE_C::TEXT IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_contacts"}, "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact": {"raw_sql": "/*\n* Merchant OLAP data joined with SF Contacts.\n*/\n\n{{ config(materialized='view') }}\n\n SELECT\n    cms.id,\n    ams.id AS sf_account_id,\n    mdim.merchant_id,\n    mdim.merchant_code,\n    mpv.email,\n    mpv.home_phone,\n    mpv.mobile_phone,\n    mpv.address_line_1,\n    mpv.address_line_2,\n    COALESCE(mpv.city, '-'::character varying) AS city,\n    mpv.country,\n    mpv.first_name,\n    mpv.last_name,\n    mpv.merchant_phone,\n    COALESCE(mpv.region_name, '-'::character varying) AS region_name,\n    mpv.website,\n    COALESCE(mpv.post_code, '-'::character varying) AS post_code,\n    CASE\n        WHEN mpv.business_address_line_2::text <> '-'::text AND length(mpv.business_address_line_2::text) > 0 THEN ((mpv.business_address_line_1::text || ', '::text) || mpv.business_address_line_2::text)::character varying\n        ELSE mpv.business_address_line_1\n    END AS business_address,\n    mpv.business_region,\n    mpv.business_post_code,\n    mpv.business_city,\n    mpv.business_country,\n    mpv.tax_id,\n    mpv.vat_id,\n    mpv.national_id,\n    mpv.swift,\n    mpv.five9phone,\n    mpv.gdpr_agreement_accepted,\n    mpv.gdpr_consent_given,\n    mpv.created_at,\n    mpv.updated_at,\n    true AS is_present_in_mirror_table__c,\n    cms.regulatory_environment_c\n   FROM {{ source('merchants_olap', 'v_m_dim_merchant') }} mdim\n     LEFT JOIN {{ source('salesforce', 'contact') }} cms\n        ON cms.merchant_code_c = mdim.merchant_code\n     LEFT JOIN {{ source('merchants_olap', 'm_dim_private') }} mpv\n        ON mdim.dim_merchant_id = mpv.dim_merchant_id\n     LEFT JOIN {{ source('salesforce', 'account') }} ams\n        ON ams.merchant_code_c = mdim.merchant_code\n  WHERE 1=1\n  AND ams.id IS NOT NULL\n  AND cms.is_deleted = FALSE -- we have some contacts that are duplicated but deleted (seems to be tests contact)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.account", "source.merchant_experience_unified_touchpoints.merchants_olap.m_dim_private", "source.merchant_experience_unified_touchpoints.salesforce.contact", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "merchants", "v_merchant_sf_contact"], "unique_id": "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "merchants/v_merchant_sf_contact.sql", "original_file_path": "models/merchants/v_merchant_sf_contact.sql", "name": "v_merchant_sf_contact", "alias": "v_merchant_sf_contact", "checksum": {"name": "sha256", "checksum": "6062fb19d8ebd201111320eb8683ff10333a49d967b6dc38d67c6c218928cd29"}, "tags": [], "refs": [], "sources": [["salesforce", "account"], ["merchants_olap", "m_dim_private"], ["salesforce", "contact"], ["merchants_olap", "v_m_dim_merchant"]], "description": "Merchant data joined with SF contact", "columns": {"sf_id": {"name": "sf_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sf_account_id": {"name": "sf_account_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "merchant_id": {"name": "merchant_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/merchants/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/merchants/v_merchant_sf_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676303616.8408492, "compiled_sql": "/*\n* Merchant OLAP data joined with SF Contacts.\n*/\n\n\n\n SELECT\n    cms.id,\n    ams.id AS sf_account_id,\n    mdim.merchant_id,\n    mdim.merchant_code,\n    mpv.email,\n    mpv.home_phone,\n    mpv.mobile_phone,\n    mpv.address_line_1,\n    mpv.address_line_2,\n    COALESCE(mpv.city, '-'::character varying) AS city,\n    mpv.country,\n    mpv.first_name,\n    mpv.last_name,\n    mpv.merchant_phone,\n    COALESCE(mpv.region_name, '-'::character varying) AS region_name,\n    mpv.website,\n    COALESCE(mpv.post_code, '-'::character varying) AS post_code,\n    CASE\n        WHEN mpv.business_address_line_2::text <> '-'::text AND length(mpv.business_address_line_2::text) > 0 THEN ((mpv.business_address_line_1::text || ', '::text) || mpv.business_address_line_2::text)::character varying\n        ELSE mpv.business_address_line_1\n    END AS business_address,\n    mpv.business_region,\n    mpv.business_post_code,\n    mpv.business_city,\n    mpv.business_country,\n    mpv.tax_id,\n    mpv.vat_id,\n    mpv.national_id,\n    mpv.swift,\n    mpv.five9phone,\n    mpv.gdpr_agreement_accepted,\n    mpv.gdpr_consent_given,\n    mpv.created_at,\n    mpv.updated_at,\n    true AS is_present_in_mirror_table__c,\n    cms.regulatory_environment_c\n   FROM SUMUP_DWH_PROD.OLAP.v_m_dim_merchant mdim\n     LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.contact cms\n        ON cms.merchant_code_c = mdim.merchant_code\n     LEFT JOIN SUMUP_DWH_PROD.OLAP.m_dim_private mpv\n        ON mdim.dim_merchant_id = mpv.dim_merchant_id\n     LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.account ams\n        ON ams.merchant_code_c = mdim.merchant_code\n  WHERE 1=1\n  AND ams.id IS NOT NULL\n  AND cms.is_deleted = FALSE -- we have some contacts that are duplicated but deleted (seems to be tests contact)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact"}, "model.merchant_experience_unified_touchpoints.stg_email_messages": {"raw_sql": "/*\n* Staging EMAIL_MESSAGE table\n* This is a staging table to optimize our new tp_email table once the new case centralisation goes live\n* This table doesn't have all of the fields nor filters we utilise in the current tp_email, as we need to\n* understand whether all of these fields are still relevant, as we stop considering the case as a single touchpoint\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n       ID::TEXT AS email_id,\n       CREATED_BY_ID::TEXT AS created_by_id,\n       REPLY_TO_EMAIL_MESSAGE_ID::TEXT AS reply_to_message_id,\n       UNBABELSC_UNBABEL_TRANSLATED_MESSAGE_ID_C::TEXT AS translated_message_id,\n       PARENT_ID::TEXT AS parent_id,\n       TO_ADDRESS::TEXT AS to_address,\n       FROM_ADDRESS::TEXT AS from_address,\n       SUBJECT::TEXT AS subject,\n       COALESCE(IS_PRIVATE_DRAFT, FALSE) AS is_private_draft,\n       COALESCE(IS_DELETED,FALSE) AS is_deleted,\n       COALESCE(INCOMING, FALSE) AS is_incoming,\n       CREATED_DATE::TIMESTAMP AS created_at\nFROM {{ source('salesforce', 'email_message') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.email_message"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_email_messages"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_email_messages", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_email_messages.sql", "original_file_path": "models/staging/salesforce/stg_email_messages.sql", "name": "stg_email_messages", "alias": "stg_email_messages", "checksum": {"name": "sha256", "checksum": "c0f16473cec2fe2241e37655f3246c9e5475dd20aeb11ffa1cf0456d2de8cb4b"}, "tags": [], "refs": [], "sources": [["salesforce", "email_message"]], "description": "Staging EMAIL_MESSAGE table", "columns": {"email_id": {"name": "email_id", "description": "unique identifier for the email message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "identifier for the user who created the email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to_message_id": {"name": "reply_to_message_id", "description": "identifier for id that the message replies to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "translated_message_id": {"name": "translated_message_id", "description": "identifier for translated message with the Unbabel tool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "identifier for the parent object related to the email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_address": {"name": "to_address", "description": "represents the email where the email is sent to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_address": {"name": "from_address", "description": "represents the email where the email is sent from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "represents the subject in the email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_private_draft": {"name": "is_private_draft", "description": "boolean to identify private drafts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "boolean to identify deleted message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_incoming": {"name": "is_incoming", "description": "boolean to identify incoming messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "timestamp of the email record creation", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_email_messages.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_email_messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.85314, "compiled_sql": "/*\n* Staging EMAIL_MESSAGE table\n* This is a staging table to optimize our new tp_email table once the new case centralisation goes live\n* This table doesn't have all of the fields nor filters we utilise in the current tp_email, as we need to\n* understand whether all of these fields are still relevant, as we stop considering the case as a single touchpoint\n*/\n\n\n\nSELECT DISTINCT\n       ID::TEXT AS email_id,\n       CREATED_BY_ID::TEXT AS created_by_id,\n       REPLY_TO_EMAIL_MESSAGE_ID::TEXT AS reply_to_message_id,\n       UNBABELSC_UNBABEL_TRANSLATED_MESSAGE_ID_C::TEXT AS translated_message_id,\n       PARENT_ID::TEXT AS parent_id,\n       TO_ADDRESS::TEXT AS to_address,\n       FROM_ADDRESS::TEXT AS from_address,\n       SUBJECT::TEXT AS subject,\n       COALESCE(IS_PRIVATE_DRAFT, FALSE) AS is_private_draft,\n       COALESCE(IS_DELETED,FALSE) AS is_deleted,\n       COALESCE(INCOMING, FALSE) AS is_incoming,\n       CREATED_DATE::TIMESTAMP AS created_at\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.email_message", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_email_messages"}, "model.merchant_experience_unified_touchpoints.v_email_first_response": {"raw_sql": "/*\n* Email first response time view\n*/\n\n{{ config(materialized='view') }}\n\nWITH message_row_rank AS (\n\tSELECT\n\t\tcases.id AS case_id,\n\t\temr.id AS message_id,\n\t\tROW_NUMBER() OVER (PARTITION BY cases.id ORDER BY emr.message_date ASC) AS row_rank\n\tFROM\n\t\tsrc_salesforce.case cases\n\tLEFT JOIN src_salesforce.email_message emr ON\n\t\tcases.id = emr.parent_id\n\tWHERE 1=1\n\t\tAND cases.created_date > ('2021-01-01 00:00:12')\n\t\tAND emr.is_private_draft = 'False'\n\t\tAND emr.incoming = 'False'\n\t\tAND emr.created_by_id NOT IN ('00557000008WTxiAAG', '0052p00000AACZ4AAP')\n)\nSELECT \n    mrr.case_id,\n\tmrr.message_id,\n    su.department AS first_response_team,\n    emr.message_date AS first_response_timestamp,\n    TIMESTAMPDIFF(minute, cases.created_date, emr.message_date) AS first_response_time\nFROM\n    message_row_rank mrr\nLEFT JOIN {{ source('salesforce', 'case') }} cases\n    ON mrr.case_id=cases.id\nLEFT JOIN {{ source('salesforce', 'email_message') }} emr\n    ON emr.id=mrr.message_id\nLEFT JOIN {{ source('salesforce', 'user') }} su\n    ON emr.created_by_id = su.id\nWHERE row_rank = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.salesforce.email_message", "source.merchant_experience_unified_touchpoints.salesforce.user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "v_email_first_response"], "unique_id": "model.merchant_experience_unified_touchpoints.v_email_first_response", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/v_email_first_response.sql", "original_file_path": "models/unified_touchpoints/v_email_first_response.sql", "name": "v_email_first_response", "alias": "v_email_first_response", "checksum": {"name": "sha256", "checksum": "20350e34e27a0e3422ccd1baea18882d26cb9b5f3b2493f347d9a054ab2014f0"}, "tags": [], "refs": [], "sources": [["salesforce", "case"], ["salesforce", "email_message"], ["salesforce", "user"]], "description": "Email first response data", "columns": {"case_id": {"name": "case_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/v_email_first_response.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676303616.7881587, "compiled_sql": "/*\n* Email first response time view\n*/\n\n\n\nWITH message_row_rank AS (\n\tSELECT\n\t\tcases.id AS case_id,\n\t\temr.id AS message_id,\n\t\tROW_NUMBER() OVER (PARTITION BY cases.id ORDER BY emr.message_date ASC) AS row_rank\n\tFROM\n\t\tsrc_salesforce.case cases\n\tLEFT JOIN src_salesforce.email_message emr ON\n\t\tcases.id = emr.parent_id\n\tWHERE 1=1\n\t\tAND cases.created_date > ('2021-01-01 00:00:12')\n\t\tAND emr.is_private_draft = 'False'\n\t\tAND emr.incoming = 'False'\n\t\tAND emr.created_by_id NOT IN ('00557000008WTxiAAG', '0052p00000AACZ4AAP')\n)\nSELECT \n    mrr.case_id,\n\tmrr.message_id,\n    su.department AS first_response_team,\n    emr.message_date AS first_response_timestamp,\n    TIMESTAMPDIFF(minute, cases.created_date, emr.message_date) AS first_response_time\nFROM\n    message_row_rank mrr\nLEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.case cases\n    ON mrr.case_id=cases.id\nLEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.email_message emr\n    ON emr.id=mrr.message_id\nLEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user su\n    ON emr.created_by_id = su.id\nWHERE row_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_email_first_response"}, "model.merchant_experience_unified_touchpoints.stg_live_chat": {"raw_sql": "/*\n* Staging table for live chat data coming from salesforce\n*/\n\n{{ config(materialized='table') }}\n\n\nSELECT DISTINCT\n      ID::TEXT AS chat_id,\n      CASE_ID::TEXT AS case_id,\n      OWNER_ID::TEXT AS agent_id,\n      CONTACT_ID::TEXT AS contact_id,\n      ACCOUNT_ID::TEXT AS account_id,\n      LIVE_CHAT_BUTTON_ID::TEXT AS chat_button_id,\n      CALLBACK_REQUEST_C::TEXT AS callback_request_id,\n      ORIGIN_C::TEXT AS origin,\n      PLATFORM::TEXT AS platform,\n      CHAT_REASON_C::TEXT AS reason,\n      BOTS_COMPLETED_SOLUTION_C::TEXT AS bot_solution,\n      CASE\n        WHEN DID_BOTSOLVE_C = 'Yes' THEN 'Solved'\n        WHEN DID_BOTSOLVE_C = 'No' THEN 'Not Solved'\n            ELSE 'Unknown'\n                END AS solved_by_bot,\n      COALESCE(IS_CHATBOT_SESSION, FALSE) AS is_chatbot_session,\n      COALESCE(SOLUTION_PRESENTED_C, FALSE) AS is_solution_presented,\n      OPERATOR_MESSAGE_COUNT::INT AS count_agent_message,\n      VISITOR_MESSAGE_COUNT::INT AS count_visitor_message,\n      AVERAGE_RESPONSE_TIME_VISITOR::INT AS avg_response_time_visitor,\n      AVERAGE_RESPONSE_TIME_OPERATOR::INT AS avg_response_time_agent,\n      CREATED_DATE::TIMESTAMP AS created_at,\n      REQUEST_TIME::TIMESTAMP AS requested_at,\n      END_TIME::TIMESTAMP AS ended_at,\n      START_TIME::TIMESTAMP AS started_at,\n      TRANSFERRED_TOQUEUE_C::TIMESTAMP AS transferred_to_queue_at,\n      ACCEPTED_BY_CHATBOT_C::TIMESTAMP AS accepted_by_bot_at,\n      ACCEPTED_BY_AGENT_C::TIMESTAMP AS accepted_by_agent_at\nFROM {{ source('salesforce', 'live_chat_transcript') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_live_chat"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_live_chat", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_live_chat.sql", "original_file_path": "models/staging/salesforce/stg_live_chat.sql", "name": "stg_live_chat", "alias": "stg_live_chat", "checksum": {"name": "sha256", "checksum": "214019e9bf693394e0c5ad194116d894d1de73c9d89d2d6d92ebd0e589f56167"}, "tags": [], "refs": [], "sources": [["salesforce", "live_chat_transcript"]], "description": "Staging table for live chat data coming from salesforce", "columns": {"chat_id": {"name": "chat_id", "description": "unique identifier for chat session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_id": {"name": "case_id", "description": "identifier for case associated to the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_id": {"name": "agent_id", "description": "identifier for agent who owned the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "identifier for the contact that requested the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "identifier for the account that requested the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chat_button_id": {"name": "chat_button_id", "description": "identifier for the chat button", "meta": {}, "data_type": null, "quote": null, "tags": []}, "callback_request_id": {"name": "callback_request_id", "description": "identifier for the callback request", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "represents the chat origin", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "represents the platform where the chat has been requested", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "represents the contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bot_solution": {"name": "bot_solution", "description": "categorize the solution presented by the bot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "solved_by_bot": {"name": "solved_by_bot", "description": "identifies if the chat was solved by the bot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_chatbot_solution": {"name": "is_chatbot_solution", "description": "boolean to identify bot session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_solution_presented": {"name": "is_solution_presented", "description": "boolean to identify if the solution was presented", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_agent_message": {"name": "count_agent_message", "description": "number of messages sent by the agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_visitor_message": {"name": "count_visitor_message", "description": "number of messages sent by the merchant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_response_time_visitor": {"name": "avg_response_time_visitor", "description": "average response time of the merchant in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_response_time_agent": {"name": "avg_response_time_agent", "description": "average response time of the agent in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of chat creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requested_at": {"name": "requested_at", "description": "timestamp indicating when the merchant requested the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "timestamp indicating the end of the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "started_at": {"name": "started_at", "description": "timestamp indicating the start of the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_queue_at": {"name": "transferred_to_queue_at", "description": "timestamp indicating the transfer of the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accepted_by_bot_at": {"name": "accepted_by_bot_at", "description": "timestamp indicating when the bot accepted the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accepted_by_agent_at": {"name": "accepted_by_agent_at", "description": "timestamp indicating when the agent accepted the chat", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_live_chat.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_live_chat.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.8564305, "compiled_sql": "/*\n* Staging table for live chat data coming from salesforce\n*/\n\n\n\n\nSELECT DISTINCT\n      ID::TEXT AS chat_id,\n      CASE_ID::TEXT AS case_id,\n      OWNER_ID::TEXT AS agent_id,\n      CONTACT_ID::TEXT AS contact_id,\n      ACCOUNT_ID::TEXT AS account_id,\n      LIVE_CHAT_BUTTON_ID::TEXT AS chat_button_id,\n      CALLBACK_REQUEST_C::TEXT AS callback_request_id,\n      ORIGIN_C::TEXT AS origin,\n      PLATFORM::TEXT AS platform,\n      CHAT_REASON_C::TEXT AS reason,\n      BOTS_COMPLETED_SOLUTION_C::TEXT AS bot_solution,\n      CASE\n        WHEN DID_BOTSOLVE_C = 'Yes' THEN 'Solved'\n        WHEN DID_BOTSOLVE_C = 'No' THEN 'Not Solved'\n            ELSE 'Unknown'\n                END AS solved_by_bot,\n      COALESCE(IS_CHATBOT_SESSION, FALSE) AS is_chatbot_session,\n      COALESCE(SOLUTION_PRESENTED_C, FALSE) AS is_solution_presented,\n      OPERATOR_MESSAGE_COUNT::INT AS count_agent_message,\n      VISITOR_MESSAGE_COUNT::INT AS count_visitor_message,\n      AVERAGE_RESPONSE_TIME_VISITOR::INT AS avg_response_time_visitor,\n      AVERAGE_RESPONSE_TIME_OPERATOR::INT AS avg_response_time_agent,\n      CREATED_DATE::TIMESTAMP AS created_at,\n      REQUEST_TIME::TIMESTAMP AS requested_at,\n      END_TIME::TIMESTAMP AS ended_at,\n      START_TIME::TIMESTAMP AS started_at,\n      TRANSFERRED_TOQUEUE_C::TIMESTAMP AS transferred_to_queue_at,\n      ACCEPTED_BY_CHATBOT_C::TIMESTAMP AS accepted_by_bot_at,\n      ACCEPTED_BY_AGENT_C::TIMESTAMP AS accepted_by_agent_at\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.live_chat_transcript", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_live_chat"}, "model.merchant_experience_unified_touchpoints.stg_messaging_sessions": {"raw_sql": "/*\n* Staging table for salesforce messaging sessions\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS session_id,\n    CASE_ID::TEXT AS case_id,\n    OWNER_ID::TEXT AS agent_id,\n    END_USER_CONTACT_ID::TEXT AS contact_id,\n    END_USER_ACCOUNT_ID::TEXT AS account_id,\n    SESSION_KEY::TEXT AS session_key_id,\n    CHANNEL_NAME::TEXT AS channel_name,\n    CHANNEL_TYPE::TEXT AS channel_type,\n    AGENT_TYPE::TEXT AS agent_type,\n    STATUS::TEXT AS status,\n    ORIGIN::TEXT AS origin,\n    ACTING_BOT_C::TEXT AS bot_name,\n    BOT_SOLUTION_C::TEXT AS bot_solution,\n    MESSAGING_SESSION_REASON_C::TEXT AS reason,\n    SOLUTION_TRACKING_HISTORY_C::TEXT AS solution_tracking_history,\n    CASE\n        WHEN DID_BOTSOLVE_C = 'Yes' THEN 'Solved'\n        WHEN DID_BOTSOLVE_C = 'No' THEN 'Not Solved'\n            ELSE 'Unknown'\n                END AS solved_by_bot,\n    CASE\n        WHEN DID_AGENTSOLVE_C = 'Yes' THEN 'Solved'\n        WHEN DID_AGENTSOLVE_C = 'No' THEN 'Not Solved'\n            ELSE 'Unknown'\n                END AS solved_by_agent,\n    COALESCE(IS_SURVEY_SESSION_C, FALSE) AS is_survey_session,\n    COALESCE(BOT_CLOSED_TRANSFER_C, FALSE) AS has_bot_closed_transfer,\n    COALESCE(IS_DROP_CONVERSATION_C, FALSE) AS is_drop_conversation,\n    COALESCE(SOLUTION_PRESENTED_C, FALSE) AS is_solution_presented,\n    CSAT_C::INT AS csat_score,\n    AGENT_MESSAGE_COUNT::INT AS count_agent_message,\n    END_USER_MESSAGE_COUNT::INT AS count_visitor_message,\n    CREATED_DATE::TIMESTAMP AS created_at,\n    START_TIME::TIMESTAMP AS started_at,\n    END_TIME::TIMESTAMP AS ended_at,\n    ACCEPT_TIME::TIMESTAMP AS accepted_at,\n    AGENT_S_FIRST_MESSAGE_C::TIMESTAMP AS agent_first_message_at,\n    AGENTS_LAST_MESSAGE_C::TIMESTAMP AS agent_last_message_at\nFROM {{ source('salesforce', 'messaging_session') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.messaging_session"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_messaging_sessions"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_messaging_sessions", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_messaging_sessions.sql", "original_file_path": "models/staging/salesforce/stg_messaging_sessions.sql", "name": "stg_messaging_sessions", "alias": "stg_messaging_sessions", "checksum": {"name": "sha256", "checksum": "388fca3a755af8d2f06f9f73279924caa89d66a17aceb48a885f959472a04e14"}, "tags": [], "refs": [], "sources": [["salesforce", "messaging_session"]], "description": "Staging table for salesforce messaging sessions", "columns": {"session_id": {"name": "session_id", "description": "unique identifier of the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_id": {"name": "case_id", "description": "identifier for the case related to the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "identifier for the agent who handled the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "identifier for the contact that requested the chat session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "identifier for the account that requested the chat session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_key_id": {"name": "session_key_id", "description": "identifier for the key id of the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_name": {"name": "channel_name", "description": "represents the name of the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_type": {"name": "channel_type", "description": "represents the type of channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_type": {"name": "agent_type", "description": "represents the type of agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "represents the status of the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "represents the origin of the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bot_name": {"name": "bot_name", "description": "represents the name of bot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bot_solution": {"name": "bot_solution", "description": "represents the solution provided by the bot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "represents the contact reason of the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "solution_tracking_history": {"name": "solution_tracking_history", "description": "represents the history of the solution proposed by the bot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "solved_by_bot": {"name": "solved_by_bot", "description": "indicates if the bot solved the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "solved_by_agent": {"name": "solved_by_agent", "description": "indicates if the agent solved the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_survey_session": {"name": "is_survey_session", "description": "boolean to indicate if the session contains a survey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_bot_closed_transfer": {"name": "has_bot_closed_transfer", "description": "boolean to indicate if the bot transferred the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_drop_conversation": {"name": "is_drop_conversation", "description": "boolean to indicate if the session was dropped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_solution_presented": {"name": "is_solution_presented", "description": "boolean to indicate if a solution was presented", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csat_score": {"name": "csat_score", "description": "represents the score given by the merchant on the survey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_agent_message": {"name": "count_agent_message", "description": "number of messages sent from agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_visitor_message": {"name": "count_visitor_message", "description": "nubmer of messages sent from visitor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp indicating the creation the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "started_at": {"name": "started_at", "description": "timestamp indicating the start of the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "timestamp indicating the end of the session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accepted_at": {"name": "accepted_at", "description": "timestamp indicating when the session was accepted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_first_message_at": {"name": "agent_first_message_at", "description": "timestamp indicating when the agent sent the first message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_last_message_at": {"name": "agent_last_message_at", "description": "timestamp indicating when the agent sent the last message", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_messaging_sessions.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_messaging_sessions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.860477, "compiled_sql": "/*\n* Staging table for salesforce messaging sessions\n*/\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS session_id,\n    CASE_ID::TEXT AS case_id,\n    OWNER_ID::TEXT AS agent_id,\n    END_USER_CONTACT_ID::TEXT AS contact_id,\n    END_USER_ACCOUNT_ID::TEXT AS account_id,\n    SESSION_KEY::TEXT AS session_key_id,\n    CHANNEL_NAME::TEXT AS channel_name,\n    CHANNEL_TYPE::TEXT AS channel_type,\n    AGENT_TYPE::TEXT AS agent_type,\n    STATUS::TEXT AS status,\n    ORIGIN::TEXT AS origin,\n    ACTING_BOT_C::TEXT AS bot_name,\n    BOT_SOLUTION_C::TEXT AS bot_solution,\n    MESSAGING_SESSION_REASON_C::TEXT AS reason,\n    SOLUTION_TRACKING_HISTORY_C::TEXT AS solution_tracking_history,\n    CASE\n        WHEN DID_BOTSOLVE_C = 'Yes' THEN 'Solved'\n        WHEN DID_BOTSOLVE_C = 'No' THEN 'Not Solved'\n            ELSE 'Unknown'\n                END AS solved_by_bot,\n    CASE\n        WHEN DID_AGENTSOLVE_C = 'Yes' THEN 'Solved'\n        WHEN DID_AGENTSOLVE_C = 'No' THEN 'Not Solved'\n            ELSE 'Unknown'\n                END AS solved_by_agent,\n    COALESCE(IS_SURVEY_SESSION_C, FALSE) AS is_survey_session,\n    COALESCE(BOT_CLOSED_TRANSFER_C, FALSE) AS has_bot_closed_transfer,\n    COALESCE(IS_DROP_CONVERSATION_C, FALSE) AS is_drop_conversation,\n    COALESCE(SOLUTION_PRESENTED_C, FALSE) AS is_solution_presented,\n    CSAT_C::INT AS csat_score,\n    AGENT_MESSAGE_COUNT::INT AS count_agent_message,\n    END_USER_MESSAGE_COUNT::INT AS count_visitor_message,\n    CREATED_DATE::TIMESTAMP AS created_at,\n    START_TIME::TIMESTAMP AS started_at,\n    END_TIME::TIMESTAMP AS ended_at,\n    ACCEPT_TIME::TIMESTAMP AS accepted_at,\n    AGENT_S_FIRST_MESSAGE_C::TIMESTAMP AS agent_first_message_at,\n    AGENTS_LAST_MESSAGE_C::TIMESTAMP AS agent_last_message_at\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.messaging_session", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_messaging_sessions"}, "model.merchant_experience_unified_touchpoints.stg_record_type": {"raw_sql": "/*\n * Salesforce case record type\n */\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS record_type_id,\n    NAME::TEXT AS name\nFROM {{ source('salesforce', 'record_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.record_type"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_record_type"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_record_type", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_record_type.sql", "original_file_path": "models/staging/salesforce/stg_record_type.sql", "name": "stg_record_type", "alias": "stg_record_type", "checksum": {"name": "sha256", "checksum": "1952bb420d4a9635007269f87f48315a1da19f5c9b864a6470a335b4a25fad48"}, "tags": [], "refs": [], "sources": [["salesforce", "record_type"]], "description": "Salesforce case record type", "columns": {"record_type_id": {"name": "record_type_id", "description": "unique identifier for case record type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the record type", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_record_type.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_record_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.8609612, "compiled_sql": "/*\n * Salesforce case record type\n */\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS record_type_id,\n    NAME::TEXT AS name\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.record_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_record_type"}, "model.merchant_experience_unified_touchpoints.stg_sf_case": {"raw_sql": "/*\n * Salesforce Case staging table.\n */\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS case_id,\n    RECORD_TYPE_ID::TEXT AS record_type_id,\n    CONTACT_ID::TEXT AS contact_id,\n    CREATED_BY_ID::TEXT AS created_by_id,\n    CLOSED_BY_C::TEXT AS closed_by_id,\n    OWNER_ID::TEXT AS owner_id,\n    CASE_NUMBER::TEXT AS case_number,\n    REASON::TEXT AS reason,\n    DETAILED_CASE_REASON_C::TEXT AS detailed_reason,\n    ORIGIN::TEXT AS origin,\n    LANGUAGE_C::TEXT AS language,\n    CASE_ORIGIN_COUNTRY_C::TEXT AS country,\n    STATUS::TEXT AS status,\n    SUBJECT::TEXT AS subject,\n    REASON_COMMENT_C::TEXT AS comment,\n    COALESCE(IS_DELETED, FALSE) AS is_deleted,\n    COALESCE(IS_CLOSED, FALSE) AS is_closed,\n    CREATED_DATE::TIMESTAMP AS created_at,\n    CLOSED_DATE::TIMESTAMP AS closed_at\nFROM {{ source('salesforce', 'case') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.case"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_sf_case"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_sf_case", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_sf_case.sql", "original_file_path": "models/staging/salesforce/stg_sf_case.sql", "name": "stg_sf_case", "alias": "stg_sf_case", "checksum": {"name": "sha256", "checksum": "67777351bab6af60055e62d0ab61f4bd4102c68921b7b080ab0df8aa8e0df4e4"}, "tags": [], "refs": [], "sources": [["salesforce", "case"]], "description": "Salesforce Case staging table", "columns": {"case_id": {"name": "case_id", "description": "unique identifier for case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "record_type_id": {"name": "record_type_id", "description": "identifies the record type. Join SRC_SALESFORCE.RECORD_TYPE to obtain record type name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "identifies the contact id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "identifies the user that created the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_by_id": {"name": "closed_by_id", "description": "identifies the user that closed the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "identifies the user that currently owns the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_number": {"name": "case_number", "description": "identifies the salesforce case number. Used in some models where we provide stakeholders with raw data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "first level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "detailed_reason": {"name": "detailed_reason", "description": "second level contact reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "origin": {"name": "origin", "description": "represents the origin of the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "represents the language of the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "represents the country where the cases was originated (not an ISO country code)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "represents the current status of the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "represents the subject of the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "represents the comment left by the user on the case reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "boolean that indicates if the case has been deleted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "boolean that indicates if the case has been closed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "date of case creation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_sf_case.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_sf_case.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.8634658, "compiled_sql": "/*\n * Salesforce Case staging table.\n */\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS case_id,\n    RECORD_TYPE_ID::TEXT AS record_type_id,\n    CONTACT_ID::TEXT AS contact_id,\n    CREATED_BY_ID::TEXT AS created_by_id,\n    CLOSED_BY_C::TEXT AS closed_by_id,\n    OWNER_ID::TEXT AS owner_id,\n    CASE_NUMBER::TEXT AS case_number,\n    REASON::TEXT AS reason,\n    DETAILED_CASE_REASON_C::TEXT AS detailed_reason,\n    ORIGIN::TEXT AS origin,\n    LANGUAGE_C::TEXT AS language,\n    CASE_ORIGIN_COUNTRY_C::TEXT AS country,\n    STATUS::TEXT AS status,\n    SUBJECT::TEXT AS subject,\n    REASON_COMMENT_C::TEXT AS comment,\n    COALESCE(IS_DELETED, FALSE) AS is_deleted,\n    COALESCE(IS_CLOSED, FALSE) AS is_closed,\n    CREATED_DATE::TIMESTAMP AS created_at,\n    CLOSED_DATE::TIMESTAMP AS closed_at\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.case", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_sf_case"}, "model.merchant_experience_unified_touchpoints.stg_users": {"raw_sql": "/*\n* Staging table for salesforce user data\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS agent_id,\n    USER_ROLE_ID::TEXT AS role_id,\n    CREATED_BY_ID::TEXT AS created_by_id,\n    MANAGER_ID::TEXT AS manager_id,\n    EMAIL::TEXT AS agent_email, --to be confirmed if we use email or username\n    DEPARTMENT::TEXT AS agent_current_department,\n    DIVISION::TEXT AS agent_current_division,\n    COUNTRY_C::TEXT AS agent_country,\n    COALESCE(IS_ACTIVE, FALSE) AS is_active,\n    CREATED_DATE::DATE AS created_date\nFROM {{ source('salesforce', 'user') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_users"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_users", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_users.sql", "original_file_path": "models/staging/salesforce/stg_users.sql", "name": "stg_users", "alias": "stg_users", "checksum": {"name": "sha256", "checksum": "1981d16c01d159ee882c2f66f02e811f72b3a2a6f0f2e345e2cde5d942da2150"}, "tags": [], "refs": [], "sources": [["salesforce", "user"]], "description": "Staging table for salesforce user data", "columns": {"agent_id": {"name": "agent_id", "description": "unique identifier for agent/user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role_id": {"name": "role_id", "description": "identifier for user role", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "identifier for user creator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "manager": {"name": "manager", "description": "identifier for user manager", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_email": {"name": "agent_email", "description": "represents user email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_current_department": {"name": "agent_current_department", "description": "represents user current salesforce department", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_current_division": {"name": "agent_current_division", "description": "represents user current salesforce division", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_country": {"name": "agent_country", "description": "represents user location (not a ISO code format)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "boolean to identify active users", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "date of user creation", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_users.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.864972, "compiled_sql": "/*\n* Staging table for salesforce user data\n*/\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS agent_id,\n    USER_ROLE_ID::TEXT AS role_id,\n    CREATED_BY_ID::TEXT AS created_by_id,\n    MANAGER_ID::TEXT AS manager_id,\n    EMAIL::TEXT AS agent_email, --to be confirmed if we use email or username\n    DEPARTMENT::TEXT AS agent_current_department,\n    DIVISION::TEXT AS agent_current_division,\n    COUNTRY_C::TEXT AS agent_country,\n    COALESCE(IS_ACTIVE, FALSE) AS is_active,\n    CREATED_DATE::DATE AS created_date\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.user", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_users"}, "model.merchant_experience_unified_touchpoints.v_user": {"raw_sql": "/*\n* User\n*/\n\n{{ config(materialized='view') }}\n\nSELECT U1.ID                                                                AS AGENT_ID,\n       TRIM(LOWER(U1.EMAIL))                                                AS AGENT_EMAIL,\n       CASE WHEN U1.EMAIL LIKE ('%concentrix%') THEN 'CNX'\n            WHEN U1.EMAIL LIKE ('%teleperformance%') THEN 'TLP'\n            WHEN U1.EMAIL LIKE ('%terceiro%') THEN 'TRC'\n            ELSE 'SUMUP' END                                                AS AGENT_COMPANY,\n       U1.DEPARTMENT                                                        AS AGENT_CURRENT_DEPARTMENT,\n       U1.DIVISION                                                          AS AGENT_CURRENT_DIVISION,\n       CASE WHEN U1.DEPARTMENT LIKE ('Support%') THEN TRUE ELSE FALSE END   AS IS_SUPPORT_CURRENT_DEPARTMENT,\n       U1.COUNTRY_C                                                         AS AGENT_COUNTRY,\n       CASE WHEN U1.COUNTRY_C IN ('United States of America') THEN 'NA'\n            WHEN U1.COUNTRY_C IN ('India')                    THEN 'AS'\n            WHEN U1.COUNTRY_C IN ('Colombia','Chile',\n                                  'Brazil','Peru')            THEN 'SA'\n            WHEN U1.COUNTRY_C IN ('Australia')                THEN 'OC'\n            WHEN U1.COUNTRY_C IN ('Morocco')                  THEN 'AF'\n                                                              ELSE 'EU' END AS AGENT_REGION,\n       TRIM(LOWER(U2.EMAIL))                                                AS MANAGER_EMAIL,\n       TRIM(LOWER(U3.EMAIL))                                                AS TOP_MANAGER_EMAIL,\n       DATEDIFF(MONTH, U1.CREATED_DATE, CURRENT_DATE)                       AS AGENT_TENURE_IN_MONTH,\n       U1.IS_ACTIVE                                                         AS IS_ACTIVE,\n       U1.CREATED_DATE::DATE                                                AS CREATED_DATE\nFROM {{ source('salesforce', 'user') }} U1\n         LEFT JOIN {{ source('salesforce', 'user') }} U2\n                   ON U1.\"MANAGER_ID\" = U2.ID\n         LEFT JOIN {{ source('salesforce', 'user') }} U3\n                   ON U2.\"MANAGER_ID\" = U3.ID\nQUALIFY RANK() OVER (PARTITION BY AGENT_EMAIL ORDER BY U1.IS_ACTIVE DESC) = 1 -- when we have a duplicate user, this would always take the active user", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "user", "v_user"], "unique_id": "model.merchant_experience_unified_touchpoints.v_user", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "user/v_user.sql", "original_file_path": "models/user/v_user.sql", "name": "v_user", "alias": "v_user", "checksum": {"name": "sha256", "checksum": "2cb9880fff1ba08cfdaedf7eee272fb5e5bd050693e0194e466d08609b83688c"}, "tags": [], "refs": [], "sources": [["salesforce", "user"]], "description": "Salesforce Users", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/user/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/user/v_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676303616.8651829, "compiled_sql": "/*\n* User\n*/\n\n\n\nSELECT U1.ID                                                                AS AGENT_ID,\n       TRIM(LOWER(U1.EMAIL))                                                AS AGENT_EMAIL,\n       CASE WHEN U1.EMAIL LIKE ('%concentrix%') THEN 'CNX'\n            WHEN U1.EMAIL LIKE ('%teleperformance%') THEN 'TLP'\n            WHEN U1.EMAIL LIKE ('%terceiro%') THEN 'TRC'\n            ELSE 'SUMUP' END                                                AS AGENT_COMPANY,\n       U1.DEPARTMENT                                                        AS AGENT_CURRENT_DEPARTMENT,\n       U1.DIVISION                                                          AS AGENT_CURRENT_DIVISION,\n       CASE WHEN U1.DEPARTMENT LIKE ('Support%') THEN TRUE ELSE FALSE END   AS IS_SUPPORT_CURRENT_DEPARTMENT,\n       U1.COUNTRY_C                                                         AS AGENT_COUNTRY,\n       CASE WHEN U1.COUNTRY_C IN ('United States of America') THEN 'NA'\n            WHEN U1.COUNTRY_C IN ('India')                    THEN 'AS'\n            WHEN U1.COUNTRY_C IN ('Colombia','Chile',\n                                  'Brazil','Peru')            THEN 'SA'\n            WHEN U1.COUNTRY_C IN ('Australia')                THEN 'OC'\n            WHEN U1.COUNTRY_C IN ('Morocco')                  THEN 'AF'\n                                                              ELSE 'EU' END AS AGENT_REGION,\n       TRIM(LOWER(U2.EMAIL))                                                AS MANAGER_EMAIL,\n       TRIM(LOWER(U3.EMAIL))                                                AS TOP_MANAGER_EMAIL,\n       DATEDIFF(MONTH, U1.CREATED_DATE, CURRENT_DATE)                       AS AGENT_TENURE_IN_MONTH,\n       U1.IS_ACTIVE                                                         AS IS_ACTIVE,\n       U1.CREATED_DATE::DATE                                                AS CREATED_DATE\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.user U1\n         LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user U2\n                   ON U1.\"MANAGER_ID\" = U2.ID\n         LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user U3\n                   ON U2.\"MANAGER_ID\" = U3.ID\nQUALIFY RANK() OVER (PARTITION BY AGENT_EMAIL ORDER BY U1.IS_ACTIVE DESC) = 1 -- when we have a duplicate user, this would always take the active user", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user"}, "model.merchant_experience_unified_touchpoints.stg_task": {"raw_sql": "/*\n * Staging table for salesforce tasks\n */\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    ID::TEXT AS task_id,\n    CASE\n        WHEN WHAT_ID::TEXT LIKE '500%' THEN WHAT_ID::TEXT END AS case_id,\n    CASE\n        WHEN WHAT_ID::TEXT LIKE '001%' THEN WHAT_ID::TEXT END AS account_id,\n    CASE\n        WHEN WHAT_ID::TEXT LIKE 'a2v%' THEN WHAT_ID::TEXT END AS callback_id,\n    FIVE_9_FIVE_9_SESSION_ID_C::TEXT AS five9_session_id,\n    CREATED_DATE::TIMESTAMP AS created_at\nFROM {{ source('salesforce', 'task') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.task"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "staging", "salesforce", "stg_task"], "unique_id": "model.merchant_experience_unified_touchpoints.stg_task", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "staging/salesforce/stg_task.sql", "original_file_path": "models/staging/salesforce/stg_task.sql", "name": "stg_task", "alias": "stg_task", "checksum": {"name": "sha256", "checksum": "ad9158bf3cac1a67c1b128eaa2b6a846e9822eaf87686919be1f89ce60d692d9"}, "tags": [], "refs": [], "sources": [["salesforce", "task"]], "description": "Staging table for salesforce tasks", "columns": {"task_id": {"name": "task_id", "description": "unique identifier for the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "case_id": {"name": "case_id", "description": "identifier for the related case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "identifier for the related account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "callback_id": {"name": "callback_id", "description": "identifier for the related callback", "meta": {}, "data_type": null, "quote": null, "tags": []}, "five9_session_id": {"name": "five9_session_id", "description": "identifier for the five9 session", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "timestamp of the task creation", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/staging/salesforce/stg_task.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/staging/salesforce/stg_task.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676303616.8661113, "compiled_sql": "/*\n * Staging table for salesforce tasks\n */\n\n\n\nSELECT DISTINCT\n    ID::TEXT AS task_id,\n    CASE\n        WHEN WHAT_ID::TEXT LIKE '500%' THEN WHAT_ID::TEXT END AS case_id,\n    CASE\n        WHEN WHAT_ID::TEXT LIKE '001%' THEN WHAT_ID::TEXT END AS account_id,\n    CASE\n        WHEN WHAT_ID::TEXT LIKE 'a2v%' THEN WHAT_ID::TEXT END AS callback_id,\n    FIVE_9_FIVE_9_SESSION_ID_C::TEXT AS five9_session_id,\n    CREATED_DATE::TIMESTAMP AS created_at\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.task", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_task"}, "test.merchant_experience_unified_touchpoints.unique_v_email_first_response_case_id.ffbef61f57": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "case_id", "model": "{{ get_where_subquery(ref('v_email_first_response')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_email_first_response"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "unique_v_email_first_response_case_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_v_email_first_response_case_id.ffbef61f57", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_v_email_first_response_case_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "unique_v_email_first_response_case_id", "alias": "unique_v_email_first_response_case_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_email_first_response"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/unique_v_email_first_response_case_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676303616.820902, "compiled_sql": "\n    \n    \n\nselect\n    case_id as unique_field,\n    count(*) as n_records\n\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_email_first_response\nwhere case_id is not null\ngroup by case_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "case_id", "file_key_name": "models.v_email_first_response"}, "test.merchant_experience_unified_touchpoints.not_null_v_email_first_response_case_id.39a7287f78": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "case_id", "model": "{{ get_where_subquery(ref('v_email_first_response')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_email_first_response"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_v_email_first_response_case_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_email_first_response_case_id.39a7287f78", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_email_first_response_case_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_v_email_first_response_case_id", "alias": "not_null_v_email_first_response_case_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_email_first_response"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_v_email_first_response_case_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676303616.8237622, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_email_first_response\nwhere case_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "case_id", "file_key_name": "models.v_email_first_response"}, "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_sf_account_id.64d6f247d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sf_account_id", "model": "{{ get_where_subquery(ref('v_merchant_sf_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "merchants", "not_null_v_merchant_sf_contact_sf_account_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_sf_account_id.64d6f247d6", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_merchant_sf_contact_sf_account_id.sql", "original_file_path": "models/merchants/schema.yml", "name": "not_null_v_merchant_sf_contact_sf_account_id", "alias": "not_null_v_merchant_sf_contact_sf_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_merchant_sf_contact"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/merchants/schema.yml/not_null_v_merchant_sf_contact_sf_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676303616.8412476, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact\nwhere sf_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sf_account_id", "file_key_name": "models.v_merchant_sf_contact"}, "test.merchant_experience_unified_touchpoints.unique_v_merchant_sf_contact_sf_account_id.99898c24a4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sf_account_id", "model": "{{ get_where_subquery(ref('v_merchant_sf_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "merchants", "unique_v_merchant_sf_contact_sf_account_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_v_merchant_sf_contact_sf_account_id.99898c24a4", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_v_merchant_sf_contact_sf_account_id.sql", "original_file_path": "models/merchants/schema.yml", "name": "unique_v_merchant_sf_contact_sf_account_id", "alias": "unique_v_merchant_sf_contact_sf_account_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_merchant_sf_contact"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/merchants/schema.yml/unique_v_merchant_sf_contact_sf_account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676303616.844771, "compiled_sql": "\n    \n    \n\nselect\n    sf_account_id as unique_field,\n    count(*) as n_records\n\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact\nwhere sf_account_id is not null\ngroup by sf_account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sf_account_id", "file_key_name": "models.v_merchant_sf_contact"}, "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_merchant_id.53d65861aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "merchant_id", "model": "{{ get_where_subquery(ref('v_merchant_sf_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "merchants", "not_null_v_merchant_sf_contact_merchant_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_merchant_id.53d65861aa", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_v_merchant_sf_contact_merchant_id.sql", "original_file_path": "models/merchants/schema.yml", "name": "not_null_v_merchant_sf_contact_merchant_id", "alias": "not_null_v_merchant_sf_contact_merchant_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v_merchant_sf_contact"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/merchants/schema.yml/not_null_v_merchant_sf_contact_merchant_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676303616.84779, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact\nwhere merchant_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "merchant_id", "file_key_name": "models.v_merchant_sf_contact"}, "model.merchant_experience_unified_touchpoints.data_quality_completeness": {"raw_sql": "/*\n* Data Quality Completeness\n*/\n\n{{ config(materialized='table') }}\n\nselect 'tp_unified'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_unified') }}\ngroup by 1\nunion all\nselect 'tp_call_eu'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_call') }}\nwhere region = 'EU'\ngroup by 1\nunion all\nselect 'tp_call_br'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_call') }}\nwhere region = 'BR'\ngroup by 1\nunion all\nselect 'tp_call_us'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_call') }}\nwhere region = 'US/CL/CO'\ngroup by 1\nunion all\nselect 'tp_chat'                                       as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_chat') }}\ngroup by 1\nunion all\nselect 'tp_email'                                      as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_email') }}\ngroup by 1\nunion all\nselect 'tp_facebook'                                   as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_facebook') }}\ngroup by 1\nunion all\nselect 'tp_whatsapp'                                   as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom {{ ref('tp_whatsapp') }}\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.tp_unified", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "data_quality", "data_quality_completeness"], "unique_id": "model.merchant_experience_unified_touchpoints.data_quality_completeness", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "data_quality/data_quality_completeness.sql", "original_file_path": "models/data_quality/data_quality_completeness.sql", "name": "data_quality_completeness", "alias": "data_quality_completeness", "checksum": {"name": "sha256", "checksum": "fa2ad59769561bfdd4e45f54ff720e924b4783f032d9150c7088016fa1bb431e"}, "tags": [], "refs": [["tp_unified"], ["tp_call"], ["tp_call"], ["tp_call"], ["tp_chat"], ["tp_email"], ["tp_facebook"], ["tp_whatsapp"]], "sources": [], "description": "Measures completeness dimension", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/data_quality/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/data_quality/data_quality_completeness.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.8226762, "compiled_sql": "/*\n* Data Quality Completeness\n*/\n\n\n\nselect 'tp_unified'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified\ngroup by 1\nunion all\nselect 'tp_call_eu'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call\nwhere region = 'EU'\ngroup by 1\nunion all\nselect 'tp_call_br'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call\nwhere region = 'BR'\ngroup by 1\nunion all\nselect 'tp_call_us'                                    as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call\nwhere region = 'US/CL/CO'\ngroup by 1\nunion all\nselect 'tp_chat'                                       as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat\ngroup by 1\nunion all\nselect 'tp_email'                                      as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_email\ngroup by 1\nunion all\nselect 'tp_facebook'                                   as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_facebook\ngroup by 1\nunion all\nselect 'tp_whatsapp'                                   as table_name,\n       count(case when id is null then 1 end)          as count_row_null_id,\n       count(case when merchant_id is null then 1 end) as count_row_null_merchant_id,\n       count(case when country is null then 1 end)     as count_row_null_merchant_country,\n       count(distinct id)                              as unique_id,\n       count(case when reason is null then 1 end)      as count_row_null_reason,\n       count(*)                                        as count_total_rows,\n       max(created_date)                               as max_date\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_whatsapp\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.data_quality_completeness"}, "model.merchant_experience_unified_touchpoints.data_quality_timeliness": {"raw_sql": "/*\n* Data Quality Timeliness\n*/\n\n{{ config(materialized='table') }}\n\nselect 'tp_call' as \"table\", created_date::date, count(*) as row_count\nfrom {{ ref('tp_call') }}\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_chat' as \"table\", created_date::date, count(*) as row_count\nfrom {{ ref('tp_chat') }}\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_email' as \"table\", created_date::date, count(*) as row_count\nfrom {{ ref('tp_email') }}\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_whatsapp' as \"table\", created_date::date, count(*) as row_count\nfrom {{ ref('tp_whatsapp') }}\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_facebook' as \"table\", created_date::date, count(*) as row_count\nfrom {{ ref('tp_facebook') }}\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_unified' as \"table\", created_date::date, count(*) as row_count\nfrom {{ ref('tp_unified') }}\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_whatsapp", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_unified"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "data_quality", "data_quality_timeliness"], "unique_id": "model.merchant_experience_unified_touchpoints.data_quality_timeliness", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "data_quality/data_quality_timeliness.sql", "original_file_path": "models/data_quality/data_quality_timeliness.sql", "name": "data_quality_timeliness", "alias": "data_quality_timeliness", "checksum": {"name": "sha256", "checksum": "e8d9f9456259d440b50ff73b69e3ed5f05857c8df145740275907d3f2d8f0551"}, "tags": [], "refs": [["tp_call"], ["tp_chat"], ["tp_email"], ["tp_whatsapp"], ["tp_facebook"], ["tp_unified"]], "sources": [], "description": "Measures timeliness dimension", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/data_quality/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/data_quality/data_quality_timeliness.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.8229022, "compiled_sql": "/*\n* Data Quality Timeliness\n*/\n\n\n\nselect 'tp_call' as \"table\", created_date::date, count(*) as row_count\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_chat' as \"table\", created_date::date, count(*) as row_count\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_email' as \"table\", created_date::date, count(*) as row_count\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_email\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_whatsapp' as \"table\", created_date::date, count(*) as row_count\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_whatsapp\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_facebook' as \"table\", created_date::date, count(*) as row_count\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_facebook\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2\nunion all\nselect 'tp_unified' as \"table\", created_date::date, count(*) as row_count\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified\nwhere created_date > current_date - interval '30 days'\ngroup by 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.data_quality_timeliness"}, "model.merchant_experience_unified_touchpoints.test_tp_unified": {"raw_sql": "/*\n * Unified touchpoints table.\n */\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    id,\n    case_id,\n    channel,\n    created_date,\n    CASE\n    --A boolean field to indicate daily resolution.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(hour, next_created_date, created_date) > 24\n                OR next_created_date IS NULL\n            )\n        ) THEN TRUE ELSE FALSE \n        END AS is_daily_resolution,\n    CASE\n        -- A touchpoint enters 'resolved' state when there is no \n        -- follow up from the merchant in the next 7 days with the same reason.\n        -- NULL reasons are excluded from reason matching logic.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(day, created_date, next_created_date) > 7\n                OR next_created_date IS NULL\n            )\n        )  THEN 'Resolved'\n        ELSE status\n    END AS status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    origin,\n    talk_time,\n    handling_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    tp_direction,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    agent_sla_time,\n    first_response_time,\n    first_response_team,\n    merchant_type,\n    comment\nFROM\n    {{ ref('test_tp_unified_staging_linked') }} tp\nORDER BY\n    created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.test_tp_unified_staging_linked"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "test_tp_unified"], "unique_id": "model.merchant_experience_unified_touchpoints.test_tp_unified", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/test_tp_unified.sql", "original_file_path": "models/unified_touchpoints/test_tp_unified.sql", "name": "test_tp_unified", "alias": "test_tp_unified", "checksum": {"name": "sha256", "checksum": "28649034b435a8f7c0f65e4607e02ad62c6536c7a3eea15af9b35f2c474af729"}, "tags": [], "refs": [["test_tp_unified_staging_linked"]], "sources": [], "description": "Test table of tp_unified", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/test_tp_unified.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.785374, "compiled_sql": "/*\n * Unified touchpoints table.\n */\n\n\n\nSELECT DISTINCT\n    id,\n    case_id,\n    channel,\n    created_date,\n    CASE\n    --A boolean field to indicate daily resolution.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(hour, next_created_date, created_date) > 24\n                OR next_created_date IS NULL\n            )\n        ) THEN TRUE ELSE FALSE \n        END AS is_daily_resolution,\n    CASE\n        -- A touchpoint enters 'resolved' state when there is no \n        -- follow up from the merchant in the next 7 days with the same reason.\n        -- NULL reasons are excluded from reason matching logic.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(day, created_date, next_created_date) > 7\n                OR next_created_date IS NULL\n            )\n        )  THEN 'Resolved'\n        ELSE status\n    END AS status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    origin,\n    talk_time,\n    handling_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    tp_direction,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    agent_sla_time,\n    first_response_time,\n    first_response_team,\n    merchant_type,\n    comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.test_tp_unified_staging_linked tp\nORDER BY\n    created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.test_tp_unified"}, "model.merchant_experience_unified_touchpoints.test_tp_unified_staging_linked": {"raw_sql": "/* TESTING STAGING\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n\t*,\n\tLEAD(id) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_tp_id,\n\tLEAD(created_date) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_created_date,\n\tLEAD(reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_reason,\n\tLEAD(detailed_reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_detailed_reason\nFROM\n\t{{ ref('test_tp_unified_staging') }} tp", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.test_tp_unified_staging"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "test_tp_unified_staging_linked"], "unique_id": "model.merchant_experience_unified_touchpoints.test_tp_unified_staging_linked", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/test_tp_unified_staging_linked.sql", "original_file_path": "models/unified_touchpoints/test_tp_unified_staging_linked.sql", "name": "test_tp_unified_staging_linked", "alias": "test_tp_unified_staging_linked", "checksum": {"name": "sha256", "checksum": "fdf2cd3ee4976244bbb5638c2857f2d6e3d0594809b444f0d3d430a86f0210b0"}, "tags": [], "refs": [["test_tp_unified_staging"]], "sources": [], "description": "Test table of tp_unified_staging_linked", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/test_tp_unified_staging_linked.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7851925, "compiled_sql": "/* TESTING STAGING\n*/\n\n\n\nSELECT DISTINCT\n\t*,\n\tLEAD(id) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_tp_id,\n\tLEAD(created_date) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_created_date,\n\tLEAD(reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_reason,\n\tLEAD(detailed_reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_detailed_reason\nFROM\n\tSUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.test_tp_unified_staging tp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.test_tp_unified_staging_linked"}, "model.merchant_experience_unified_touchpoints.test_tp_unified_staging": {"raw_sql": "/*\n* TESTING Unified touchpoints staging table\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    id,\n    case_id,\n    'email' AS channel,\n    created_at as created_date, --TODO: needs to be updated back once all models follow the same naming convention\n    status, --TODO: Logic needs improvement\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    origin,\n    NULL AS talk_time,\n    NULL AS handling_time, --TODO: Needs modelling\n    NULL AS total_time, --TODO: Needs modelling\n    'Human' AS first_contact_agent_type,\n    'Human' AS agent_type,\n    email_direction as tp_direction,\n    NULL as bot_name,\n    NULL AS escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    NULL AS first_response_time, --TODO: Needs modelling\n    NULL AS first_response_team, --TODO: Needs modelling\n    merchant_type,\n    comment\nFROM\n    {{ ref('new_tp_email') }}\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'call' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    NULL as origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    call_type as tp_direction,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    NULL AS agent_sla_time,\n    waiting_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    comment\nFROM\n    {{ ref('tp_call') }}\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'chat' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    origin,\n    NULL AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    'Inbound' as tp_direction,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    agent_first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    {{ ref('tp_chat') }} \nUNION \nSELECT DISTINCT\n    id,\n    case_id,\n    'whatsapp' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    NULL AS origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    'Inbound' AS tp_direction,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    agent_sla_time AS agent_sla_time,\n    first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    {{ ref('tp_whatsapp') }}\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'facebook' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    NULL AS origin,\n    NULL AS talk_time,\n    NULL AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    'Inbound' AS tp_direction,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    NULL as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    {{ ref('tp_facebook') }}\nORDER BY created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.new_tp_email", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_whatsapp", "model.merchant_experience_unified_touchpoints.tp_facebook"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "test_tp_unified_staging"], "unique_id": "model.merchant_experience_unified_touchpoints.test_tp_unified_staging", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/test_tp_unified_staging.sql", "original_file_path": "models/unified_touchpoints/test_tp_unified_staging.sql", "name": "test_tp_unified_staging", "alias": "test_tp_unified_staging", "checksum": {"name": "sha256", "checksum": "2c50f5baf11bdb23d31c97a9ccd97104b1b496262ca31632eac3345b185d2344"}, "tags": [], "refs": [["new_tp_email"], ["tp_call"], ["tp_chat"], ["tp_whatsapp"], ["tp_facebook"]], "sources": [], "description": "Test table of tp_unified_staging", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/test_tp_unified_staging.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7850015, "compiled_sql": "/*\n* TESTING Unified touchpoints staging table\n*/\n\n\n\nSELECT DISTINCT\n    id,\n    case_id,\n    'email' AS channel,\n    created_at as created_date, --TODO: needs to be updated back once all models follow the same naming convention\n    status, --TODO: Logic needs improvement\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    origin,\n    NULL AS talk_time,\n    NULL AS handling_time, --TODO: Needs modelling\n    NULL AS total_time, --TODO: Needs modelling\n    'Human' AS first_contact_agent_type,\n    'Human' AS agent_type,\n    email_direction as tp_direction,\n    NULL as bot_name,\n    NULL AS escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    NULL AS first_response_time, --TODO: Needs modelling\n    NULL AS first_response_team, --TODO: Needs modelling\n    merchant_type,\n    comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.new_tp_email\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'call' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    NULL as origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    call_type as tp_direction,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    NULL AS agent_sla_time,\n    waiting_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'chat' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    origin,\n    NULL AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    'Inbound' as tp_direction,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    agent_first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat \nUNION \nSELECT DISTINCT\n    id,\n    case_id,\n    'whatsapp' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    NULL AS origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    'Inbound' AS tp_direction,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    agent_sla_time AS agent_sla_time,\n    first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_whatsapp\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'facebook' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    NULL AS origin,\n    NULL AS talk_time,\n    NULL AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    'Inbound' AS tp_direction,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    NULL as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_facebook\nORDER BY created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.test_tp_unified_staging"}, "model.merchant_experience_unified_touchpoints.tp_transfers": {"raw_sql": "/*\n* Transfers/escalation\n*/\n\n\n{{ config(materialized='table') }}\n\n    --the rank is needed as for some call_id the \"On Call\" state has multiple values due to state duration\nwith call_rank AS (SELECT CALL_ID__FIVE9::text                                                                  AS id,\n                          TRIM(LOWER(AGENT_EMAIL))                                                              AS agent_email,\n                          CASE\n                              WHEN TRANSFERRED_TO_AGENT__FIVE9 = '1'\n                                  OR TRANSFERRED_TO_SKILL__FIVE9 = '1'\n                                  THEN 'Transferred'\n                              ELSE 'Serviced' END                                                               AS status,\n                          row_number()\n                                  OVER (PARTITION BY CALL_ID__FIVE9 ORDER BY TIMESTAMP_MILLISECOND__FIVE9 ASC)  AS first_row,\n                          row_number()\n                                  OVER (PARTITION BY CALL_ID__FIVE9 ORDER BY TIMESTAMP_MILLISECOND__FIVE9 DESC) AS last_row,\n                          DATE                                                                                  AS created_date\n                   FROM {{ source('funnel', 'agent_state_five9') }}\n                   WHERE STATE = 'On Call'\n                     AND DATE > '2021-08-01'\n                   QUALIFY 1 IN (first_row, last_row))\n--call\nSELECT DISTINCT\n       fn.id,\n       fn.created_date,\n       'call'                      AS channel,\n       fn.AGENT_EMAIL              AS agent_email,\n       su.AGENT_CURRENT_DEPARTMENT,\n       su.AGENT_COUNTRY,\n       su.AGENT_TENURE_IN_MONTH    AS agent_tenure,\n       su.MANAGER_EMAIL            AS agent_manager,\n       su.AGENT_COMPANY,\n       tp.REASON,\n       tp.DETAILED_REASON,\n       --tp.reason_group,\n       fn.status,\n       tp.LANGUAGE,\n       NULL                        AS transfer_type,\n       NULL                        AS case_type,\n       NULL                        AS case_origin\nFROM call_rank fn\n         LEFT JOIN {{ ref ('tp_call') }} tp\n                   ON tp.ID = fn.id\n         LEFT JOIN {{ ref('v_user') }} su\n                   ON su.AGENT_EMAIL = TRIM(LOWER(fn.AGENT_EMAIL)) --join on email as no agent_id available in the table from funnel.io\n         LEFT JOIN {{ ref('STG_FIVE9_EU') }} fns\n                   ON fns.CALL_ID = fn.id\nWHERE 1 = 1\n  AND su.AGENT_CURRENT_DEPARTMENT LIKE 'Support%'\n  AND su.AGENT_COUNTRY NOT IN ('Brazil', 'Chile', 'Colombia', 'Peru', 'United States of America')\n\nUNION\n\n--email\nSELECT DISTINCT\n       hh.CASE_ID                  AS id,\n       hh.CREATED_DATE,\n       'email'                     AS channel,\n       su.AGENT_EMAIL              AS agent_email,\n       su.AGENT_CURRENT_DEPARTMENT,\n       su.AGENT_COUNTRY,\n       su.AGENT_TENURE_IN_MONTH    AS agent_tenure,\n       su.MANAGER_EMAIL            AS agent_manager,\n       su.AGENT_COMPANY,\n       tp.REASON,\n       tp.DETAILED_REASON,\n       --tp.reason_group,\n       CASE\n           WHEN hh.NEW_VALUE = 'Transferred'\n               THEN 'Transferred'\n           WHEN hh.NEW_VALUE IN\n                ('Resolved',\n                 'Closed - Resolved',\n                 'Pending Reply',\n                 'Awaiting Reply',\n                 'Closed - Not Resolved')\n               THEN 'Serviced'\n           END                     as status,\n       tp.language,\n       CASE\n           WHEN (su.AGENT_EMAIL LIKE '%concentrix%' OR su.AGENT_EMAIL LIKE '%teleperformance%')\n               AND hh.NEW_VALUE = 'Transferred'\n               THEN 'BPO_Escalation'\n           WHEN (su.AGENT_EMAIL NOT LIKE '%concentrix%' OR su.AGENT_EMAIL NOT LIKE '%teleperformance%')\n               AND hh.NEW_VALUE = 'Transferred' THEN 'Transfer'\n           END                     AS transfer_type, -- BPO agents are not transferring cases to other BPO agents so we can use agent_email to segment the transfer_type\n       CASE\n           WHEN tp.IS_INTERNAL_CASE = true then 'Internal'\n           WHEN tp.IS_INTERNAL_CASE = false then 'Non-Internal'\n           ELSE 'Unknown' END      AS case_type,\n       tp.ORIGIN                   AS case_origin\nFROM {{ source('salesforce', 'case_history') }} hh\n         LEFT JOIN {{ ref('tp_email') }} tp\n                   ON tp.id = hh.case_id\n         LEFT JOIN {{ ref('v_user') }} su\n                   ON hh.created_by_id = su.AGENT_ID\n         JOIN {{ source('salesforce', 'case') }} cs\n              ON cs.ID = hh.CASE_ID\nWHERE 1 = 1\n  AND su.AGENT_CURRENT_DEPARTMENT LIKE 'Support%'\n  AND su.AGENT_COUNTRY NOT IN ('Brazil', 'Chile', 'Colombia', 'Peru', 'United States of America')\n  AND hh.NEW_VALUE IN\n      ('Transferred', 'Resolved', 'Closed - Resolved', 'Pending Reply', 'Awaiting Reply', 'Closed - Not Resolved')\n  AND hh.FIELD = 'Status'\n\nUNION\n\n--chat\nSELECT DISTINCT\n       tc.id,\n       tc.CREATED_DATE,\n       'chat'                      AS channel,\n       su.AGENT_EMAIL              AS agent_email,\n       su.AGENT_CURRENT_DEPARTMENT,\n       su.AGENT_COUNTRY,\n       su.AGENT_TENURE_IN_MONTH    AS agent_tenure,\n       su.MANAGER_EMAIL            AS agent_manager,\n       su.AGENT_COMPANY,\n       tc.reason,\n       tc.detailed_reason,\n       --tc.reason_group,\n       tc.status,\n       tc.language                 AS language,\n       NULL                        AS transfer_type,\n       NULL                        AS case_type,\n       NULL                        AS case_origin\nFROM {{ ref('tp_chat') }} tc\n         LEFT JOIN {{ source('salesforce', 'live_chat_transcript') }} lc\n                   ON lc.id = tc.id\n         LEFT JOIN {{ ref('v_user') }} su\n                   ON lc.owner_id = su.AGENT_ID\nWHERE 1 = 1\n  and tc.status = 'Serviced'\n  AND su.AGENT_CURRENT_DEPARTMENT LIKE 'Support%'\n  AND tc.agent_type = 'Human'\n  AND su.AGENT_COUNTRY NOT IN ('Brazil', 'Chile', 'Colombia', 'Peru', 'United States of America')", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.case_history", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript", "source.merchant_experience_unified_touchpoints.funnel.agent_state_five9", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.v_user", "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.v_user", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.v_user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_transfers"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_transfers", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_transfers.sql", "original_file_path": "models/unified_touchpoints/tp_transfers.sql", "name": "tp_transfers", "alias": "tp_transfers", "checksum": {"name": "sha256", "checksum": "084e707af284a718997eec45a428383777501d4f8319e11641c54530517cd012"}, "tags": [], "refs": [["tp_call"], ["v_user"], ["STG_FIVE9_EU"], ["tp_email"], ["v_user"], ["tp_chat"], ["v_user"]], "sources": [["salesforce", "case_history"], ["salesforce", "case"], ["salesforce", "live_chat_transcript"], ["funnel", "agent_state_five9"]], "description": "Transfer and escalation for call,chat,email channels", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7855613, "compiled_sql": "/*\n* Transfers/escalation\n*/\n\n\n\n\n    --the rank is needed as for some call_id the \"On Call\" state has multiple values due to state duration\nwith call_rank AS (SELECT CALL_ID__FIVE9::text                                                                  AS id,\n                          TRIM(LOWER(AGENT_EMAIL))                                                              AS agent_email,\n                          CASE\n                              WHEN TRANSFERRED_TO_AGENT__FIVE9 = '1'\n                                  OR TRANSFERRED_TO_SKILL__FIVE9 = '1'\n                                  THEN 'Transferred'\n                              ELSE 'Serviced' END                                                               AS status,\n                          row_number()\n                                  OVER (PARTITION BY CALL_ID__FIVE9 ORDER BY TIMESTAMP_MILLISECOND__FIVE9 ASC)  AS first_row,\n                          row_number()\n                                  OVER (PARTITION BY CALL_ID__FIVE9 ORDER BY TIMESTAMP_MILLISECOND__FIVE9 DESC) AS last_row,\n                          DATE                                                                                  AS created_date\n                   FROM SHARED_FUNNEL_EU_OPERATIONS__MGBXANDJKGW6VCVANQV.FUNNEL__MGBXANDJKGW6VCVANQV.agent_state_five9\n                   WHERE STATE = 'On Call'\n                     AND DATE > '2021-08-01'\n                   QUALIFY 1 IN (first_row, last_row))\n--call\nSELECT DISTINCT\n       fn.id,\n       fn.created_date,\n       'call'                      AS channel,\n       fn.AGENT_EMAIL              AS agent_email,\n       su.AGENT_CURRENT_DEPARTMENT,\n       su.AGENT_COUNTRY,\n       su.AGENT_TENURE_IN_MONTH    AS agent_tenure,\n       su.MANAGER_EMAIL            AS agent_manager,\n       su.AGENT_COMPANY,\n       tp.REASON,\n       tp.DETAILED_REASON,\n       --tp.reason_group,\n       fn.status,\n       tp.LANGUAGE,\n       NULL                        AS transfer_type,\n       NULL                        AS case_type,\n       NULL                        AS case_origin\nFROM call_rank fn\n         LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call tp\n                   ON tp.ID = fn.id\n         LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user su\n                   ON su.AGENT_EMAIL = TRIM(LOWER(fn.AGENT_EMAIL)) --join on email as no agent_id available in the table from funnel.io\n         LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_EU fns\n                   ON fns.CALL_ID = fn.id\nWHERE 1 = 1\n  AND su.AGENT_CURRENT_DEPARTMENT LIKE 'Support%'\n  AND su.AGENT_COUNTRY NOT IN ('Brazil', 'Chile', 'Colombia', 'Peru', 'United States of America')\n\nUNION\n\n--email\nSELECT DISTINCT\n       hh.CASE_ID                  AS id,\n       hh.CREATED_DATE,\n       'email'                     AS channel,\n       su.AGENT_EMAIL              AS agent_email,\n       su.AGENT_CURRENT_DEPARTMENT,\n       su.AGENT_COUNTRY,\n       su.AGENT_TENURE_IN_MONTH    AS agent_tenure,\n       su.MANAGER_EMAIL            AS agent_manager,\n       su.AGENT_COMPANY,\n       tp.REASON,\n       tp.DETAILED_REASON,\n       --tp.reason_group,\n       CASE\n           WHEN hh.NEW_VALUE = 'Transferred'\n               THEN 'Transferred'\n           WHEN hh.NEW_VALUE IN\n                ('Resolved',\n                 'Closed - Resolved',\n                 'Pending Reply',\n                 'Awaiting Reply',\n                 'Closed - Not Resolved')\n               THEN 'Serviced'\n           END                     as status,\n       tp.language,\n       CASE\n           WHEN (su.AGENT_EMAIL LIKE '%concentrix%' OR su.AGENT_EMAIL LIKE '%teleperformance%')\n               AND hh.NEW_VALUE = 'Transferred'\n               THEN 'BPO_Escalation'\n           WHEN (su.AGENT_EMAIL NOT LIKE '%concentrix%' OR su.AGENT_EMAIL NOT LIKE '%teleperformance%')\n               AND hh.NEW_VALUE = 'Transferred' THEN 'Transfer'\n           END                     AS transfer_type, -- BPO agents are not transferring cases to other BPO agents so we can use agent_email to segment the transfer_type\n       CASE\n           WHEN tp.IS_INTERNAL_CASE = true then 'Internal'\n           WHEN tp.IS_INTERNAL_CASE = false then 'Non-Internal'\n           ELSE 'Unknown' END      AS case_type,\n       tp.ORIGIN                   AS case_origin\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.case_history hh\n         LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_email tp\n                   ON tp.id = hh.case_id\n         LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user su\n                   ON hh.created_by_id = su.AGENT_ID\n         JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.case cs\n              ON cs.ID = hh.CASE_ID\nWHERE 1 = 1\n  AND su.AGENT_CURRENT_DEPARTMENT LIKE 'Support%'\n  AND su.AGENT_COUNTRY NOT IN ('Brazil', 'Chile', 'Colombia', 'Peru', 'United States of America')\n  AND hh.NEW_VALUE IN\n      ('Transferred', 'Resolved', 'Closed - Resolved', 'Pending Reply', 'Awaiting Reply', 'Closed - Not Resolved')\n  AND hh.FIELD = 'Status'\n\nUNION\n\n--chat\nSELECT DISTINCT\n       tc.id,\n       tc.CREATED_DATE,\n       'chat'                      AS channel,\n       su.AGENT_EMAIL              AS agent_email,\n       su.AGENT_CURRENT_DEPARTMENT,\n       su.AGENT_COUNTRY,\n       su.AGENT_TENURE_IN_MONTH    AS agent_tenure,\n       su.MANAGER_EMAIL            AS agent_manager,\n       su.AGENT_COMPANY,\n       tc.reason,\n       tc.detailed_reason,\n       --tc.reason_group,\n       tc.status,\n       tc.language                 AS language,\n       NULL                        AS transfer_type,\n       NULL                        AS case_type,\n       NULL                        AS case_origin\nFROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat tc\n         LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.live_chat_transcript lc\n                   ON lc.id = tc.id\n         LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user su\n                   ON lc.owner_id = su.AGENT_ID\nWHERE 1 = 1\n  and tc.status = 'Serviced'\n  AND su.AGENT_CURRENT_DEPARTMENT LIKE 'Support%'\n  AND tc.agent_type = 'Human'\n  AND su.AGENT_COUNTRY NOT IN ('Brazil', 'Chile', 'Colombia', 'Peru', 'United States of America')", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_transfers"}, "model.merchant_experience_unified_touchpoints.tp_attribution": {"raw_sql": "/*\n* Touchpoint attribution model\n*/\n\n\n{{ config(materialized='table') }}\n\n--in the context of the touchpoint attribution (monthly percentage of contacting merchants after signup/first_tx) we assign the status of small merchants to any merchant with at least 1 true value during the lifecycle\nwith merchant_segmentation\n         as (select BOOLOR_AGG(SMALL_MERCHANT_IN_MONTH_T_F) over (partition by MERCHANT_ID) as is_small_merchant,\n                    MERCHANT_ID,\n                    DIM_MERCHANT_ID\n             from {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }})\n\n--some parts are commented out as the table containing bank product data has not been fully migrated to snowflake yet\nselect date_trunc('month', m.signup_date)::date                                           as signup_month,\n       --date_trunc('month', cf.CARD_ORDERED_AT)::date                                    as bank_month,\n       date_trunc('month', t.date_1st_success_tx)::date                                   as first_tx_month,\n       m.merchant_id,\n       m.MERCHANT_COUNTRY                                                                 as country,\n       case\n           when ((lt.signup_screen) = '2') then 'Sole Trader'\n           when ((lt.signup_screen) = '1') then 'Company'\n           else 'Unknown' end                                                             as legal_type,\n       ac.card_reader_owner_date                                                          as card_reader_owner_date,\n       case\n           when ac.card_reader_owner_date is not null\n               then true\n           else false\n           end                                                                            as is_card_reader_owner,\n       m.mcc_level                                                                        as mcc_level,\n       tp.reason                                                                          as reason,\n       tp.detailed_reason                                                                 as detailed_reason,\n       (date_part('year', current_date::date) - date_part('year', m.DATE_OF_BIRTH::date)) as merchant_age,\n\n       (width_bucket(case\n                         when datediff('day', m.SIGNUP_DATE::date, tp.CREATED_DATE::date) >= 0\n                             then datediff('day', m.SIGNUP_DATE::date, tp.CREATED_DATE::date)\n                         else null end,\n                     0,\n                     900,\n                     30))                                                                 as tp_nb_month_after_sign_up,\n       (width_bucket(case\n                         when datediff('day', t.date_1st_success_tx::date, tp.CREATED_DATE::date) >= 0\n                             then datediff('day', t.date_1st_success_tx::date, tp.CREATED_DATE::date)\n                         else null end,\n                     0,\n                     900,\n                     30))                                                                 as tp_nb_month_after_first_tx,\n-- (width_bucket(case\n--                              when datediff('day', cf.CARD_ORDERED_AT::date, tp.CREATED_DATE::date) >= 0\n--                                  then datediff('day', cf.CARD_ORDERED_AT::date, tp.CREATED_DATE::date)\n--                              else null end,\n--                          0,\n--                          900,\n--                          30))                                                                 as tp_nb_month_after_bank_enabled,\n--                case\n--                    when t.date_1st_success_tx::date is not null and\n--                         t.date_5th_success_tx::date < cf.CARD_ORDERED_AT::date and cf.CARD_ORDERED_AT is not null\n--                        then 'converted_merchant'::text\n--                    when t.date_5th_success_tx::date is not null and cf.CARD_ORDERED_AT is null\n--                        then 'card_reader'::text\n--                    when t.date_1st_success_tx::date is null and cf.CARD_ORDERED_AT is not null\n--                        then 'bank_only'::text\n--                    when t.date_1st_success_tx::date is not null and cf.CARD_ORDERED_AT::date is null\n--                        then 'card_reader_not_active'::text\n--                    when t.date_1st_success_tx::date is not null AND\n--                         (t.date_1st_success_tx::date >= cf.CARD_ORDERED_AT::date or\n--                          cf.CARD_ORDERED_AT::date <= t.date_5th_success_tx::date or\n--                          t.date_5th_success_tx::date is null) and cf.CARD_ORDERED_AT is not null\n--                        then 'bank_and_card_reader'::text\n--                    when t.date_1st_success_tx::date is null and cf.CARD_ORDERED_AT::date is null\n--                        then 'not_active'::text\n--                    else 'other'::text\n--                    end                                                                                                                                 as bank_merchant_type,\n       case\n           when sm.is_small_merchant = true\n               then 'Small Merchant'\n           when sm.is_small_merchant = false\n               then 'Micro/Nano Merchant'\n           else 'Unknown'\n           end                                                                            as merchant_type,\n       count(distinct tp.id)                                                              as count_tp\nfrom {{ ref ('tp_unified') }} tp\n         right join {{ source('merchants_olap', 'v_m_dim_merchant') }} m\n                    on tp.merchant_id = m.merchant_id\n         left join {{ source('merchants', 'merchants') }} pm on m.merchant_id = pm.id\n         left join {{ source('merchants', 'legal_types') }} lt on pm.legal_type_id = lt.id\n         join {{ source('merchants_olap', 'v_m_dim_acquisition_cohort') }} ac on ac.dim_merchant_id = m.DIM_MERCHANT_ID\n         left join {{ source('merchants_olap', 'v_m_dim_cooperation') }} mo on mo.dim_merchant_id = m.DIM_MERCHANT_ID\n         left join {{ source('merchants_olap', 'v_m_facts_transaction') }} t on t.dim_merchant_id = m.DIM_MERCHANT_ID\n         left join merchant_segmentation sm on m.DIM_MERCHANT_ID = sm.DIM_MERCHANT_ID\n     --left join ANALYST_BANK_EU.PRODUCT_ENABLEMENT cf on cf.MERCHANT_CODE = m.MERCHANT_CODE\nwhere 1 = 1\n  and m.signup_date\n    > '2021-01-01'\n  and (mo.cooperation_type <> 'Internal'\n    or mo.cooperation_type is null)\n  and m.is_test = false\n  and m.MERCHANT_COUNTRY not in ('BR', 'CL', 'CO', 'US', 'PE')\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14--, 15 , 16, 17)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort", "source.merchant_experience_unified_touchpoints.merchants.legal_types", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.merchants.merchants", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "model.merchant_experience_unified_touchpoints.tp_unified"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_attribution"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_attribution", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_attribution.sql", "original_file_path": "models/unified_touchpoints/tp_attribution.sql", "name": "tp_attribution", "alias": "tp_attribution", "checksum": {"name": "sha256", "checksum": "53ee975f47850737d1b3f1dd008f82f0f702242447ec7cea04b7a8ba5d57ed1f"}, "tags": [], "refs": [["tp_unified"]], "sources": [["merchants_olap", "v_m_dim_acquisition_cohort"], ["merchants", "legal_types"], ["merchant_segmentation", "ae_t_small_merchant_segmentation"], ["merchants", "merchants"], ["merchants_olap", "v_m_dim_cooperation"], ["merchants_olap", "v_m_facts_transaction"], ["merchants_olap", "v_m_dim_merchant"]], "description": "Touchpoint attribution table", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_attribution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7867193, "compiled_sql": "/*\n* Touchpoint attribution model\n*/\n\n\n\n\n--in the context of the touchpoint attribution (monthly percentage of contacting merchants after signup/first_tx) we assign the status of small merchants to any merchant with at least 1 true value during the lifecycle\nwith merchant_segmentation\n         as (select BOOLOR_AGG(SMALL_MERCHANT_IN_MONTH_T_F) over (partition by MERCHANT_ID) as is_small_merchant,\n                    MERCHANT_ID,\n                    DIM_MERCHANT_ID\n             from SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation)\n\n--some parts are commented out as the table containing bank product data has not been fully migrated to snowflake yet\nselect date_trunc('month', m.signup_date)::date                                           as signup_month,\n       --date_trunc('month', cf.CARD_ORDERED_AT)::date                                    as bank_month,\n       date_trunc('month', t.date_1st_success_tx)::date                                   as first_tx_month,\n       m.merchant_id,\n       m.MERCHANT_COUNTRY                                                                 as country,\n       case\n           when ((lt.signup_screen) = '2') then 'Sole Trader'\n           when ((lt.signup_screen) = '1') then 'Company'\n           else 'Unknown' end                                                             as legal_type,\n       ac.card_reader_owner_date                                                          as card_reader_owner_date,\n       case\n           when ac.card_reader_owner_date is not null\n               then true\n           else false\n           end                                                                            as is_card_reader_owner,\n       m.mcc_level                                                                        as mcc_level,\n       tp.reason                                                                          as reason,\n       tp.detailed_reason                                                                 as detailed_reason,\n       (date_part('year', current_date::date) - date_part('year', m.DATE_OF_BIRTH::date)) as merchant_age,\n\n       (width_bucket(case\n                         when datediff('day', m.SIGNUP_DATE::date, tp.CREATED_DATE::date) >= 0\n                             then datediff('day', m.SIGNUP_DATE::date, tp.CREATED_DATE::date)\n                         else null end,\n                     0,\n                     900,\n                     30))                                                                 as tp_nb_month_after_sign_up,\n       (width_bucket(case\n                         when datediff('day', t.date_1st_success_tx::date, tp.CREATED_DATE::date) >= 0\n                             then datediff('day', t.date_1st_success_tx::date, tp.CREATED_DATE::date)\n                         else null end,\n                     0,\n                     900,\n                     30))                                                                 as tp_nb_month_after_first_tx,\n-- (width_bucket(case\n--                              when datediff('day', cf.CARD_ORDERED_AT::date, tp.CREATED_DATE::date) >= 0\n--                                  then datediff('day', cf.CARD_ORDERED_AT::date, tp.CREATED_DATE::date)\n--                              else null end,\n--                          0,\n--                          900,\n--                          30))                                                                 as tp_nb_month_after_bank_enabled,\n--                case\n--                    when t.date_1st_success_tx::date is not null and\n--                         t.date_5th_success_tx::date < cf.CARD_ORDERED_AT::date and cf.CARD_ORDERED_AT is not null\n--                        then 'converted_merchant'::text\n--                    when t.date_5th_success_tx::date is not null and cf.CARD_ORDERED_AT is null\n--                        then 'card_reader'::text\n--                    when t.date_1st_success_tx::date is null and cf.CARD_ORDERED_AT is not null\n--                        then 'bank_only'::text\n--                    when t.date_1st_success_tx::date is not null and cf.CARD_ORDERED_AT::date is null\n--                        then 'card_reader_not_active'::text\n--                    when t.date_1st_success_tx::date is not null AND\n--                         (t.date_1st_success_tx::date >= cf.CARD_ORDERED_AT::date or\n--                          cf.CARD_ORDERED_AT::date <= t.date_5th_success_tx::date or\n--                          t.date_5th_success_tx::date is null) and cf.CARD_ORDERED_AT is not null\n--                        then 'bank_and_card_reader'::text\n--                    when t.date_1st_success_tx::date is null and cf.CARD_ORDERED_AT::date is null\n--                        then 'not_active'::text\n--                    else 'other'::text\n--                    end                                                                                                                                 as bank_merchant_type,\n       case\n           when sm.is_small_merchant = true\n               then 'Small Merchant'\n           when sm.is_small_merchant = false\n               then 'Micro/Nano Merchant'\n           else 'Unknown'\n           end                                                                            as merchant_type,\n       count(distinct tp.id)                                                              as count_tp\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified tp\n         right join SUMUP_DWH_PROD.OLAP.v_m_dim_merchant m\n                    on tp.merchant_id = m.merchant_id\n         left join SUMUP_DWH_PROD.SRC_PAYMENT.merchants pm on m.merchant_id = pm.id\n         left join SUMUP_DWH_PROD.SRC_PAYMENT.legal_types lt on pm.legal_type_id = lt.id\n         join SUMUP_DWH_PROD.OLAP.v_m_dim_acquisition_cohort ac on ac.dim_merchant_id = m.DIM_MERCHANT_ID\n         left join SUMUP_DWH_PROD.OLAP.v_m_dim_cooperation mo on mo.dim_merchant_id = m.DIM_MERCHANT_ID\n         left join SUMUP_DWH_PROD.OLAP.v_m_facts_transaction t on t.dim_merchant_id = m.DIM_MERCHANT_ID\n         left join merchant_segmentation sm on m.DIM_MERCHANT_ID = sm.DIM_MERCHANT_ID\n     --left join ANALYST_BANK_EU.PRODUCT_ENABLEMENT cf on cf.MERCHANT_CODE = m.MERCHANT_CODE\nwhere 1 = 1\n  and m.signup_date\n    > '2021-01-01'\n  and (mo.cooperation_type <> 'Internal'\n    or mo.cooperation_type is null)\n  and m.is_test = false\n  and m.MERCHANT_COUNTRY not in ('BR', 'CL', 'CO', 'US', 'PE')\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14--, 15 , 16, 17)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_attribution"}, "model.merchant_experience_unified_touchpoints.v_tp_forecast_with_actuals": {"raw_sql": "/*\n* v_tp_forecast_with_actual\n*/\n\n{{ config(materialized='view') }}\n\nwith actuals as (\n    select 'daily'                                     as type,\n           date_trunc('day', tpd.CREATED_DATE)::date as date_actual,\n           tpd.channel                                 as channel,\n           CASE -- Include CL/CO and PE as distinct languages for our dashboard\n                WHEN tpd.country = 'CL' THEN 'ES-CL'\n                WHEN tpd.country = 'CO' THEN 'ES-CO'\n                WHEN tpd.country = 'PE' THEN 'ES-PE'\n                ELSE tpd.language\n           END                                         as language,\n           count(distinct id)                          as volume_actual\n    from {{ ref('tp_unified') }} tpd\n    where tpd.CREATED_DATE >= '2022-05-15'\n      and tpd.AGENT_TYPE = 'Human'\n      and tpd.COUNTRY not in ('BR', 'US') -- Remove from countries 'CL', 'CO', 'PE'\n      and tpd.LANGUAGE in ('IT', 'EN', 'FR', 'DE', 'ES', 'NL', 'PL', 'HU', 'PT')\n      and tpd.CHANNEL in ('email', 'call', 'chat', 'whatsapp')\n    group by 2, 3, 4\n\n    UNION\n\n    select 'monthly'                                     as type,\n           date_trunc('month', tpm.CREATED_DATE)::date as date_actual,\n           tpm.channel                                   as channel,\n           CASE -- Include CL/CO and PE as distinct languages for our dashboard\n                WHEN tpm.country = 'CL' THEN 'ES-CL'\n                WHEN tpm.country = 'CO' THEN 'ES-CO'\n                WHEN tpm.country = 'PE' THEN 'ES-PE'\n                ELSE tpm.language\n           END                                           AS language,\n           count(distinct id)                            as volume_actual\n    from {{ ref('tp_unified') }} tpm\n    where CREATED_DATE >= '2022-05-15'\n      and AGENT_TYPE = 'Human'\n      and COUNTRY not in ('BR', 'US') -- Remove from countries 'CL', 'CO', 'PE'\n      and LANGUAGE in ('IT', 'EN', 'FR', 'DE', 'ES', 'NL', 'PL', 'HU', 'PT')\n      and CHANNEL in ('email', 'call', 'chat', 'whatsapp')\n    group by 2, 3, 4)\n\nselect distinct f.channel,\n                f.language,\n                f.type_of_forecast,\n                f.target_date,\n                round(last_value(forecast)\n                      over (partition by f.channel, f.language, f.type_of_forecast, f.target_date order by forecast_date RANGE BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING)) as forecast,\n                round(last_value(lower_bound)\n                      over (partition by f.channel, f.language, f.type_of_forecast, f.target_date order by forecast_date RANGE BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING)) as lower_bound,\n                round(last_value(upper_bound)\n                      over (partition by f.channel, f.language, f.type_of_forecast, f.target_date order by forecast_date RANGE BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING)) as upper_bound,\n                ac.volume_actual\nfrom {{ source('ds_models', 'tp_volume_forecast') }} f\n         left join actuals ac\n                    on ac.language = f.language and ac.channel = f.channel and f.type_of_forecast = ac.type and\n                       f.target_date::date = ac.date_actual::date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.ds_models.tp_volume_forecast", "model.merchant_experience_unified_touchpoints.tp_unified", "model.merchant_experience_unified_touchpoints.tp_unified"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "v_tp_forecast_with_actuals"], "unique_id": "model.merchant_experience_unified_touchpoints.v_tp_forecast_with_actuals", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/v_tp_forecast_with_actuals.sql", "original_file_path": "models/unified_touchpoints/v_tp_forecast_with_actuals.sql", "name": "v_tp_forecast_with_actuals", "alias": "v_tp_forecast_with_actuals", "checksum": {"name": "sha256", "checksum": "fddf0936cea9d766a6a4dafcb5be6eb7bf5ed9ce97f74a2cad52ebff529c2d07"}, "tags": [], "refs": [["tp_unified"], ["tp_unified"]], "sources": [["ds_models", "tp_volume_forecast"]], "description": "Daily and Monthly forecast with actual volume", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/v_tp_forecast_with_actuals.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1676305531.78688, "compiled_sql": "/*\n* v_tp_forecast_with_actual\n*/\n\n\n\nwith actuals as (\n    select 'daily'                                     as type,\n           date_trunc('day', tpd.CREATED_DATE)::date as date_actual,\n           tpd.channel                                 as channel,\n           CASE -- Include CL/CO and PE as distinct languages for our dashboard\n                WHEN tpd.country = 'CL' THEN 'ES-CL'\n                WHEN tpd.country = 'CO' THEN 'ES-CO'\n                WHEN tpd.country = 'PE' THEN 'ES-PE'\n                ELSE tpd.language\n           END                                         as language,\n           count(distinct id)                          as volume_actual\n    from SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified tpd\n    where tpd.CREATED_DATE >= '2022-05-15'\n      and tpd.AGENT_TYPE = 'Human'\n      and tpd.COUNTRY not in ('BR', 'US') -- Remove from countries 'CL', 'CO', 'PE'\n      and tpd.LANGUAGE in ('IT', 'EN', 'FR', 'DE', 'ES', 'NL', 'PL', 'HU', 'PT')\n      and tpd.CHANNEL in ('email', 'call', 'chat', 'whatsapp')\n    group by 2, 3, 4\n\n    UNION\n\n    select 'monthly'                                     as type,\n           date_trunc('month', tpm.CREATED_DATE)::date as date_actual,\n           tpm.channel                                   as channel,\n           CASE -- Include CL/CO and PE as distinct languages for our dashboard\n                WHEN tpm.country = 'CL' THEN 'ES-CL'\n                WHEN tpm.country = 'CO' THEN 'ES-CO'\n                WHEN tpm.country = 'PE' THEN 'ES-PE'\n                ELSE tpm.language\n           END                                           AS language,\n           count(distinct id)                            as volume_actual\n    from SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified tpm\n    where CREATED_DATE >= '2022-05-15'\n      and AGENT_TYPE = 'Human'\n      and COUNTRY not in ('BR', 'US') -- Remove from countries 'CL', 'CO', 'PE'\n      and LANGUAGE in ('IT', 'EN', 'FR', 'DE', 'ES', 'NL', 'PL', 'HU', 'PT')\n      and CHANNEL in ('email', 'call', 'chat', 'whatsapp')\n    group by 2, 3, 4)\n\nselect distinct f.channel,\n                f.language,\n                f.type_of_forecast,\n                f.target_date,\n                round(last_value(forecast)\n                      over (partition by f.channel, f.language, f.type_of_forecast, f.target_date order by forecast_date RANGE BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING)) as forecast,\n                round(last_value(lower_bound)\n                      over (partition by f.channel, f.language, f.type_of_forecast, f.target_date order by forecast_date RANGE BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING)) as lower_bound,\n                round(last_value(upper_bound)\n                      over (partition by f.channel, f.language, f.type_of_forecast, f.target_date order by forecast_date RANGE BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING)) as upper_bound,\n                ac.volume_actual\nfrom SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_volume_forecast f\n         left join actuals ac\n                    on ac.language = f.language and ac.channel = f.channel and f.type_of_forecast = ac.type and\n                       f.target_date::date = ac.date_actual::date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_tp_forecast_with_actuals"}, "model.merchant_experience_unified_touchpoints.tp_unified": {"raw_sql": "/*\n * Unified touchpoints table.\n */\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    id,\n    case_id,\n    channel,\n    created_date,\n    CASE\n    --A boolean field to indicate daily resolution.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(hour, next_created_date, created_date) > 24\n                OR next_created_date IS NULL\n            )\n        ) THEN TRUE ELSE FALSE \n        END AS is_daily_resolution,\n    CASE\n        -- A touchpoint enters 'resolved' state when there is no \n        -- follow up from the merchant in the next 7 days with the same reason.\n        -- NULL reasons are excluded from reason matching logic.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(day, created_date, next_created_date) > 7\n                OR next_created_date IS NULL\n            )\n        )  THEN 'Resolved'\n        ELSE status\n    END AS status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    region,\n    origin,\n    talk_time,\n    handling_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    agent_sla_time,\n    first_response_time,\n    first_response_team,\n    merchant_type,\n    comment\nFROM\n    {{ ref('tp_unified_staging_linked') }} tp\nORDER BY\n    created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.tp_unified_staging_linked"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_unified"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_unified", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_unified.sql", "original_file_path": "models/unified_touchpoints/tp_unified.sql", "name": "tp_unified", "alias": "tp_unified", "checksum": {"name": "sha256", "checksum": "faff0088eb682497e7e1b858d139dc66e6ac018d22cb1b2220169afcd5a846e2"}, "tags": [], "refs": [["tp_unified_staging_linked"]], "sources": [], "description": "Unified touchpoints final table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_unified.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.786529, "compiled_sql": "/*\n * Unified touchpoints table.\n */\n\n\n\nSELECT DISTINCT\n    id,\n    case_id,\n    channel,\n    created_date,\n    CASE\n    --A boolean field to indicate daily resolution.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(hour, next_created_date, created_date) > 24\n                OR next_created_date IS NULL\n            )\n        ) THEN TRUE ELSE FALSE \n        END AS is_daily_resolution,\n    CASE\n        -- A touchpoint enters 'resolved' state when there is no \n        -- follow up from the merchant in the next 7 days with the same reason.\n        -- NULL reasons are excluded from reason matching logic.\n        WHEN status = 'Serviced'\n        AND(\n            (\n                (\n                    reason != next_reason\n                    OR detailed_reason != next_detailed_reason\n                )\n                AND(reason IS NOT NULL)\n                AND(next_reason IS NOT NULL)\n            )\n            OR(\n                datediff(day, created_date, next_created_date) > 7\n                OR next_created_date IS NULL\n            )\n        )  THEN 'Resolved'\n        ELSE status\n    END AS status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    region,\n    origin,\n    talk_time,\n    handling_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    agent_sla_time,\n    first_response_time,\n    first_response_team,\n    merchant_type,\n    comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified_staging_linked tp\nORDER BY\n    created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified"}, "model.merchant_experience_unified_touchpoints.tp_unified_staging_linked": {"raw_sql": "/*\n* Unified touchpoints linked to next touchpoint.\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n\t*,\n\tLEAD(id) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_tp_id,\n\tLEAD(created_date) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_created_date,\n\tLEAD(reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_reason,\n\tLEAD(detailed_reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_detailed_reason\nFROM\n\t{{ ref('tp_unified_staging') }} tp", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.tp_unified_staging"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_unified_staging_linked"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_unified_staging_linked", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_unified_staging_linked.sql", "original_file_path": "models/unified_touchpoints/tp_unified_staging_linked.sql", "name": "tp_unified_staging_linked", "alias": "tp_unified_staging_linked", "checksum": {"name": "sha256", "checksum": "139b60325eebce4c0db9f94651399dc7b437113b81aff39e4c6a72e49b9b1cd6"}, "tags": [], "refs": [["tp_unified_staging"]], "sources": [], "description": "Unified touchpoints staging table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_unified_staging_linked.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7862003, "compiled_sql": "/*\n* Unified touchpoints linked to next touchpoint.\n*/\n\n\n\nSELECT DISTINCT\n\t*,\n\tLEAD(id) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_tp_id,\n\tLEAD(created_date) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_created_date,\n\tLEAD(reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_reason,\n\tLEAD(detailed_reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) as next_detailed_reason\nFROM\n\tSUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified_staging tp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified_staging_linked"}, "model.merchant_experience_unified_touchpoints.tp_unified_staging": {"raw_sql": "/*\n* Unified touchpoints staging table\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT\n    id,\n    case_id,\n    'email' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    region,\n    origin,\n    NULL AS talk_time,\n    total_time AS handling_time,\n    total_time AS total_time,\n    'Human' AS first_contact_agent_type,\n    'Human' AS agent_type,\n    NULL as bot_name,\n    NULL AS escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    first_response_time,\n    first_response_team,\n    merchant_type,\n    comment\nFROM\n    {{ ref('tp_email') }}\nWHERE is_internal_case = FALSE\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'call' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    region,\n    NULL as origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    NULL AS agent_sla_time,\n    waiting_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    comment\nFROM\n    {{ ref('tp_call') }}\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'chat' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    region,\n    origin,\n    NULL AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    agent_first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    {{ ref('tp_chat') }} \nUNION \nSELECT DISTINCT\n    id,\n    case_id,\n    'whatsapp' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    region,\n    NULL AS origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    agent_sla_time AS agent_sla_time,\n    first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    {{ ref('tp_whatsapp') }}\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'facebook' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    region,\n    NULL AS origin,\n    NULL AS talk_time,\n    NULL AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    NULL as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    {{ ref('tp_facebook') }}\nORDER BY created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_whatsapp", "model.merchant_experience_unified_touchpoints.tp_facebook"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_unified_staging"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_unified_staging", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_unified_staging.sql", "original_file_path": "models/unified_touchpoints/tp_unified_staging.sql", "name": "tp_unified_staging", "alias": "tp_unified_staging", "checksum": {"name": "sha256", "checksum": "1cb56b517cf4ed4656995531a230d26ecfdb3f12358aab88da82283c43becb69"}, "tags": [], "refs": [["tp_email"], ["tp_call"], ["tp_chat"], ["tp_whatsapp"], ["tp_facebook"]], "sources": [], "description": "Unified touchpoints staging table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_unified_staging.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7858922, "compiled_sql": "/*\n* Unified touchpoints staging table\n*/\n\n\n\nSELECT DISTINCT\n    id,\n    case_id,\n    'email' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    region,\n    origin,\n    NULL AS talk_time,\n    total_time AS handling_time,\n    total_time AS total_time,\n    'Human' AS first_contact_agent_type,\n    'Human' AS agent_type,\n    NULL as bot_name,\n    NULL AS escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    first_response_time,\n    first_response_team,\n    merchant_type,\n    comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_email\nWHERE is_internal_case = FALSE\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'call' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    region,\n    NULL as origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    is_afterhours,\n    is_callback,\n    call_type,\n    NULL AS agent_sla_time,\n    waiting_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'chat' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    region,\n    origin,\n    NULL AS talk_time,\n    handling_time AS handling_time,\n    total_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    agent_first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat \nUNION \nSELECT DISTINCT\n    id,\n    case_id,\n    'whatsapp' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    bot_solution,\n    language,\n    country,\n    region,\n    NULL AS origin,\n    talk_time AS talk_time,\n    handling_time AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    agent_sla_time AS agent_sla_time,\n    first_response_time as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_whatsapp\nUNION\nSELECT DISTINCT\n    id,\n    case_id,\n    'facebook' AS channel,\n    created_date,\n    status,\n    merchant_id,\n    merchant_code,\n    reason,\n    detailed_reason,\n    reason_group,\n    NULL as bot_solution,\n    language,\n    country,\n    region,\n    NULL AS origin,\n    NULL AS talk_time,\n    NULL AS handling_time,\n    total_session_time AS total_time,\n    first_contact_agent_type,\n    agent_type,\n    NULL as bot_name,\n    escalated,\n    agent_company,\n    agent_location,\n    agent_department,\n    FALSE as is_afterhours,\n    FALSE as is_callback,\n    NULL as call_type,\n    NULL AS agent_sla_time,\n    NULL as first_response_time,\n    NULL as first_response_team,\n    merchant_type,\n    NULL as comment\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_facebook\nORDER BY created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified_staging"}, "model.merchant_experience_unified_touchpoints.tp_call": {"raw_sql": "/*\n * Call touchpoints table\n */\n\n{{ config(materialized='table') }}\nWITH  task_rank AS (\n        SELECT DISTINCT\n            id,\n            five_9_five_9_session_id_c,\n            rank() over (partition by five_9_five_9_session_id_c order by CREATED_DATE) AS new_rank\n        FROM {{ source('salesforce', 'task') }}\n    ),\ntp_call_eu AS (\n    SELECT DISTINCT\n           fn.call_id                                             AS id,\n           CASE\n               WHEN t2.what_id like ('500%') then t2.what_id\n               ELSE NULL\n               END                                                        AS case_id,\n           convert_timezone('Europe/Berlin', fn.TIMESTAMP) AS created_date,\n           CASE\n               WHEN fn.TALK_TIME > 0 OR fn2.TALK_TIME > 0 THEN 'Serviced'\n               WHEN (fn.DISPOSITION = 'IVR - SERVICED') THEN 'Serviced'\n               WHEN ((fn.TALK_TIME is null or fn.TALK_TIME = 0) and (fn2.TALK_TIME is null or fn2.TALK_TIME = 0)) and\n                    fn.TOTAL_QUEUE_TIME <= 7 then 'Abandoned'\n               WHEN ((fn.TALK_TIME is null or fn.TALK_TIME = 0) and (fn2.TALK_TIME is null or fn2.TALK_TIME = 0)) and\n                    fn.TOTAL_QUEUE_TIME > 7 then 'Missed'\n               ELSE null\n               END                                                  AS status,\n               fn.is_afterhours,\n               fn.is_deflected,\n           CASE\n               WHEN fn2.call_id IS NULL THEN FALSE\n               ELSE TRUE\n               END                                                AS is_callback,\n           fn.campaign                                            AS five9_campaign,\n           fn.salesforce_merchant_id::int                         AS merchant_id,\n           mc.merchant_code::text                                 AS merchant_code,\n           call_reasons.reason                                    AS reason,\n           call_reasons.detailed_reason                           AS detailed_reason,\n           call_reasons.reason_group                              AS reason_group,\n           -- ISO 639-1 Language Codes\n           CASE\n               WHEN fn.skill like ('%FR%')\n                   OR fn.campaign in ('SUP - FR', 'POS - FR')\n                   OR fn.IVR_PATH\n                        like ('%=FR%') THEN\n                   'FR'\n               WHEN fn.skill like ('%UK%')\n                   OR\n                    fn.campaign in ('SUP - UK', 'SUP - IE', 'POS - IE', 'POS - UK - Lite', 'SUP - US transfer to CNX')\n                   THEN\n                   'EN'\n               WHEN fn.skill like ('%DE%')\n                   OR fn.campaign in\n                      ('SUP - DE', 'SUP - AT', 'POS - DE', 'POS - DE - Release', 'POS - AT', 'POS - AT- Release')\n                   OR fn.IVR_PATH\n                        like ('%=DE%') THEN\n                   'DE'\n               WHEN fn.skill like ('%IT%')\n                   OR fn.campaign in ('SUP - IT')\n                   OR fn.IVR_PATH\n                        like ('%=IT%') THEN\n                   'IT'\n               WHEN fn.skill like ('%NL%')\n                   OR fn.campaign in ('SUP - NL', 'POS - NL')\n                   OR fn.IVR_PATH\n                        like ('%lan-nl%')\n                   OR fn.campaign = 'BE-nl-CallbackRequests' THEN\n                   'NL'\n               WHEN fn.skill like ('%PL%')\n                   OR fn.campaign in ('SUP - PL') THEN\n                   'PL'\n               WHEN fn.skill like ('%BG%')\n                   OR fn.campaign in ('SUP - BG') THEN\n                   'BG'\n               WHEN fn.skill like ('%CY%')\n                   OR fn.campaign in ('SUP - CY') THEN\n                   'EL'\n               WHEN fn.skill like ('%CZ%')\n                   OR fn.campaign in ('SUP - CZ') THEN\n                   'CS'\n               WHEN fn.skill like ('%GR%')\n                   OR fn.campaign in ('SUP - GR') THEN\n                   'EL'\n               WHEN fn.skill like ('%HU%')\n                   OR fn.campaign in ('SUP - HU') THEN\n                   'HU'\n               WHEN fn.skill like ('%LT%')\n                   OR fn.campaign in ('SUP - LT') THEN\n                   'LT'\n               WHEN fn.skill like ('%LV%')\n                   OR fn.campaign in ('SUP - LV') THEN\n                   'LV'\n               WHEN fn.skill like ('%MT%')\n                   OR fn.campaign in ('SUP - MT') THEN\n                   'EN'\n               WHEN fn.skill like ('%SI%')\n                   OR fn.campaign in ('SUP - SI') THEN\n                   'SL'\n               WHEN fn.skill like ('%FI%')\n                   OR fn.campaign in ('SUP - FI') THEN\n                   'FI'\n               WHEN fn.skill like ('%DK%')\n                   OR fn.campaign in ('SUP - DK') THEN\n                   'DA'\n               WHEN fn.skill like ('%SE%')\n                   OR fn.campaign in ('SUP - SE') THEN\n                   'SV'\n               WHEN fn.skill like ('%NO%')\n                   OR fn.campaign in ('SUP - NO') THEN\n                   'NO'\n               WHEN fn.skill like ('%PT%')\n                   OR fn.campaign in ('SUP - PT') THEN\n                   'PT'\n               WHEN fn.skill like ('%ES%')\n                   OR fn.campaign in ('SUP - ES', 'POS - ES') THEN\n                   'ES'\n               WHEN fn.skill like ('%SK%')\n                   OR fn.campaign in ('SUP - SK') THEN\n                   'SK'\n               WHEN fn.skill like ('%EE%')\n                   AND fn.campaign like ('SUP - EE') THEN\n                   'ET'\n               WHEN fn.skill like ('%HR%')\n                   AND fn.campaign like ('SUP - HR') THEN\n                   'HR'\n               WHEN fn.skill like ('%RO%')\n                   AND fn.campaign like ('SUP - RO') THEN\n                   'RO'\n               END                                                  AS language,\n           CASE\n               WHEN fn.call_type = 'Manual' THEN 'Outbound'\n               ELSE fn.call_type\n               END                                                  AS call_type,\n           CASE\n               WHEN fn.campaign in ('SUP - NL', 'POS - NL','BE-nl-CallbackRequests') THEN 'NL'\n               WHEN fn.campaign in ('SUP - DE', 'POS - DE', 'POS - DE - Release') THEN 'DE'\n               WHEN fn.campaign in ('SUP - AT','POS - AT', 'POS - AT- Release') THEN 'AT'\n               WHEN fn.campaign in ('SUP - UK', 'POS - UK - Lite') THEN 'GB'\n               WHEN fn.campaign in ('SUP - US transfer to CNX') THEN 'US'\n               WHEN fn.campaign in ('SUP - FR', 'POS - FR') THEN 'FR'\n               WHEN fn.campaign in ('SUP - IE', 'POS - IE') THEN 'IE'\n               WHEN fn.campaign in ('SUP - ES', 'POS - ES') THEN 'ES'\n               WHEN fn.campaign in ('SUP - IT') THEN 'IT'\n               WHEN fn.campaign in ('SUP - CH') THEN 'CH'\n               WHEN fn.campaign in ('SUP - BE') THEN 'BE'\n               WHEN fn.campaign in ('SUP - PL') THEN 'PL'\n               WHEN fn.campaign in ('SUP - BG') THEN 'BG'\n               WHEN fn.campaign in ('SUP - CY') THEN 'CY'\n               WHEN fn.campaign in ('SUP - CZ') THEN 'CZ'\n               WHEN fn.campaign in ('SUP - GR') THEN 'GR'\n               WHEN fn.campaign in ('SUP - HU') THEN 'HU'\n               WHEN fn.campaign in ('SUP - LT') THEN 'LT'\n               WHEN fn.campaign in ('SUP - CH') THEN 'LU'\n               WHEN fn.campaign in ('SUP - LV') THEN 'LV'\n               WHEN fn.campaign in ('SUP - MT') THEN 'MT'\n               WHEN fn.campaign in ('SUP - SI') THEN 'SI'\n               WHEN fn.campaign in ('SUP - FI') THEN 'FI'\n               WHEN fn.campaign in ('SUP - DK') THEN 'DK'\n               WHEN fn.campaign in ('SUP - SE') THEN 'SE'\n               WHEN fn.campaign in ('SUP - NO') THEN 'NO'\n               WHEN fn.campaign in ('SUP - PT') THEN 'PT'\n               WHEN fn.campaign in ('SUP - SK') THEN 'SK'\n               WHEN fn.campaign in ('SUP - EE') THEN 'EE'\n               WHEN fn.campaign in ('SUP - HR') THEN 'HR'\n               WHEN fn.campaign in ('SUP - RO') THEN 'RO'\n               WHEN fn.campaign in ('SUP - LU') THEN 'LU'\n               END                                                AS country,\n           fn.TOTAL_QUEUE_TIME                                    AS waiting_time,\n           fn.IVR_TIME                                            AS ivr_time,\n           coalesce(fn2.talk_time,fn.talk_time,0)                                       AS talk_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS handling_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) + fn.ivr_time + fn.total_queue_time +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS total_time,\n           CASE\n               WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n               WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n               WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n               ELSE 'SUMUP'\n           END                                                      AS agent_company,\n           CASE\n               WHEN (\n                                fn.TOTAL_QUEUE_TIME > 0\n                            or\n                                (fn.TOTAL_QUEUE_TIME = 0 AND fn.TALK_TIME > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.DISPOSITION <>\n                       'IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN 'Human'\n               ELSE 'Bot'\n               END                                                  AS agent_type,\n            CASE\n                WHEN fn.ivr_path IS NOT NULL AND fn.revamp_ivr_call_escalated = 1 THEN TRUE\n                WHEN fn.ivr_path IS NOT NULL AND fn.revamp_ivr_call_escalated = 0 THEN FALSE\n                ELSE  NULL\n                END                                                 AS escalated,\n           CASE\n               WHEN fn.IVR_PATH is not null THEN 'Bot'\n               ELSE 'Human'\n               END                                                  AS first_contact_agent_type,\n           su.country_c                                             AS agent_location,\n           su.department                                            AS agent_department,\n           fn.NOTES AS comment,\n           fn.ANI                                                   AS caller_phone,\n    CASE\n        WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n        WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n        ELSE 'Unknown'\n    END                                                              AS merchant_type\n    FROM {{ ref('STG_FIVE9_EU') }} fn\n    LEFT JOIN {{ source('salesforce', 'user') }} su\n        ON trim(fn.agent_email) = su.username\n    LEFT JOIN task_rank t\n        ON t.five_9_five_9_session_id_c::text = fn.session_id\n            AND t.new_rank = 1\n    LEFT JOIN {{ source('salesforce', 'task') }} t2\n        ON t2.id = t.id\n            AND t2.what_id IS NOT NULL\n    LEFT JOIN {{ source('salesforce', 'case') }} cn\n        ON t2.\"WHAT_ID\" = cn.id\n    LEFT JOIN {{ source('merchants_olap', 'v_m_dim_merchant') }} mc\n        ON fn.salesforce_merchant_id::int = mc.merchant_id::int\n    LEFT JOIN {{ ref('STG_FIVE9_EU') }} fn2\n        ON fn.call_id = fn2.call_id\n            AND (fn2.call_type = 'Queue Callback' AND fn.call_type = 'Inbound')\n    LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_call') }} AS call_reasons\n        ON (fn.disposition_PATH = call_reasons.old_reason\n            AND fn.disposition = call_reasons.old_detailed_reason)\n            OR \n            (fn.disposition_PATH IS NULL\n            AND fn.disposition = call_reasons.old_detailed_reason)\n    LEFT JOIN {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }} sm ON fn.salesforce_merchant_id::int = sm.merchant_id\n                       AND CASE\n                       WHEN date_trunc('month', fn.timestamp)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', fn.timestamp) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', fn.timestamp)::date END\n    WHERE 1 = 1\n      AND fn.TIMESTAMP > '2020-01-01 00:00:00'\n      AND (fn.call_type IN ('Inbound', 'Manual') OR fn2.call_type = 'Queue Callback')\n      AND (fn.campaign LIKE ('%SUP%') OR fn.campaign = 'BE-nl-CallbackRequests')\n      -- users with duplicated accounts - same email addresses\n      AND (su.id NOT IN (\n                         '0052p00000BhSElAAN', -- emilie.jaillot@sumup.com\n                         '0052p000009etoHAAQ', -- stefan.mauer@sumup.com\n                         '0052p00000AAxdXAAT', -- irep.ozugur@sumup.com\n                         '0052p00000AADD9AAP' -- maja.muhic@sumup.com\n        ) OR su.id IS NULL)\n),\n\n-- BR Touchpoints. Source: vinicius.carvalho@sumup.com\ntp_call_br AS (\n    SELECT DISTINCT\n           fn.call_id                                                                         AS id,\n           NULL                                                                               AS case_id,\n           fn.TIMESTAMP                                                                       AS created_date,\n           CASE\n           WHEN fn.TALK_TIME > 0 THEN 'Serviced'\n           WHEN (fn.DISPOSITION = 'Atendida na URA') THEN 'Serviced'\n           WHEN (fn.TALK_TIME is null or fn.TALK_TIME = 0) and\n                fn.TOTAL_QUEUE_TIME <= 7 then 'Abandoned'\n           WHEN (fn.TALK_TIME is null or fn.TALK_TIME = 0) and\n                fn.TOTAL_QUEUE_TIME > 7 then 'Missed'\n           ELSE null\n           END                                                                                AS status,\n           fn.is_afterhours,\n           FALSE                                                                              AS is_deflected,\n           FALSE                                                                              AS is_callback,\n           NULL                                                                               AS five9_campaign,\n           sfc.backend_merchant_id_c::int                                                     AS merchant_id,\n           mc.merchant_code::text                                                             AS merchant_code,\n           coalesce(old_reason,fn.disposition_path)                                           AS reason,\n           CASE\n               WHEN fn.disposition_path IS NULL THEN NULL\n               ELSE coalesce(old_detailed_reason,fn.disposition)\n               END                                                                            AS detailed_reason,\n           call_reasons.reason_group                                                          AS reason_group,\n           'PT'                                                                               AS language,\n           fn.campaign_TYPE                                                                   AS call_type,\n           'BR'                                                                               AS country,\n           fn.TOTAL_QUEUE_TIME\t                                                              AS waiting_time,\n           fn.IVR_TIME                                                                        AS ivr_time,\n           fn.talk_time                                                                       AS talk_time,\n           fn.talk_time + fn.AFTER_CALL_WORK_TIME                                             AS handling_time,\n           fn.talk_time + fn.IVR_TIME +\n           fn.TOTAL_QUEUE_TIME + fn.AFTER_CALL_WORK_TIME                                      AS total_time,\n           CASE\n               WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n               WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n               WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n               ELSE 'SUMUP'\n           END                                                                                AS agent_company,\n           CASE\n              WHEN (\n                                fn.TOTAL_QUEUE_TIME > 0\n                            or\n                                (fn.TOTAL_QUEUE_TIME = 0 AND fn.TALK_TIME > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.DISPOSITION <>\n                       'IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN 'Human'\n               ELSE 'Bot'\n               END                                                                            AS agent_type,\n           CASE\n               WHEN (\n                                fn.TOTAL_QUEUE_TIME > 0\n                            or\n                                (fn.TOTAL_QUEUE_TIME = 0 AND fn.TALK_TIME > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.DISPOSITION <>\n                       'IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN TRUE\n               ELSE FALSE\n               END                                                                           AS escalated,\n            CASE\n               WHEN fn.IVR_PATH is not null THEN 'Bot'\n               ELSE 'Human'\n               END                                                                            AS first_contact_agent_type,\n           su.country_c                                                                       AS agent_location,\n           CASE\n               WHEN fn.IVR_TIME > 0 AND fn.talk_time = 0 and fn.agent_email IS NULL THEN 'Bot'\n               WHEN fn.agent_email IS NOT NULL AND su.department IS NULL THEN 'Support Brazil'\n               ELSE su.department\n               END                                                                            AS agent_department,\n           NULL                                                                               AS comment,\n          fn.ANI                                                                              AS caller_phone,\n          CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\n    FROM {{ ref('STG_FIVE9_BR') }} fn\n        LEFT JOIN {{ source('salesforce', 'contact') }} sfc\n            ON fn.custom_sf_id_encontrado::text = sfc.id\n        LEFT JOIN {{ source('salesforce', 'user') }} su\n            ON trim(fn.agent_email) = su.username\n        LEFT JOIN {{ source('merchants_olap', 'v_m_dim_merchant') }} mc\n            ON sfc.backend_merchant_id_c::int = mc.merchant_id::int\n        LEFT JOIN {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }} sm ON sfc.backend_merchant_id_c::int = sm.merchant_id\n                       AND CASE\n                       WHEN date_trunc('month', fn.TIMESTAMP)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', fn.TIMESTAMP) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', fn.\"TIMESTAMP\")::date END\n        LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_call') }} AS call_reasons\n                       ON fn.disposition_path = call_reasons.old_reason AND\n                          fn.disposition = call_reasons.old_detailed_reason\n    WHERE 1 = 1\n      AND fn.call_type = 'Inbound'\n      AND (su.id NOT IN (\n                         '0052p00000A4TprAAF', -- felipe.brito@sumup.com\n                         '0052p00000AA21lAAD', -- felipe.brito@sumup.com\n                         '00557000007KE6RAAW', -- bruna.santos.terceiro@sumup.com\n                         '005570000085EM8AAM', -- talita.silva@sumup.com\n                         '0055700000719DmAAI', -- vinicius.ribeiro@sumup.com\n                         '0052p00000BhZCrAAN', -- marcus.bruder@sumup.com\n                         '005570000071KUIAA2', -- carolina.silva@sumup.com\n                         '00557000007nBwsAAE', -- vitor.silva@sumup.com\n                         '005570000072XLPAA2', -- ingrid.silva@sumup.com\n                         '0052p00000A4Cy3AAF', -- oliver.ganacin@sumup.com\n                         '00557000006zFZWAA2', -- rodrigo.gomes@sumup.com\n                         '005570000084d56AAA', -- douglas.nascimento@sumup.com\n                         '00557000008WPffAAG', -- naum.santos@sumup.com\n                         '0052p00000AAWzbAAH', -- luiz.pedro.duque@sumup.com\n                         '0052p000009exWHAAY', -- renata.brito@sumup.com\n                         '0052p00000A9oMBAAZ', -- jefferson.lopes@sumup.com\n                         '00557000007nBwZAAU' -- claudia.nascimento@sumup.com\n        ) OR su.id IS NULL)\n      AND fn.TIMESTAMP > '2020-01-01 00:00:00'\n),\n\n-- US+CL+CO Touch-points\n-- Contact: nelson.segovia@sumup.com & karina.gonzalez@sumup.com\ntp_call_us_cl_co_pe AS (\n    SELECT DISTINCT\n           fn.call_id                                                                 AS id,\n           NULL                                                                       AS case_id,\n           CASE\n               WHEN fn.campaign = 'Chile Inbound' THEN convert_timezone('America/Santiago', fn.timestamp)\n               WHEN fn.campaign = 'Colombia Inbound' THEN convert_timezone('America/Bogota', fn.timestamp)\n               WHEN fn.campaign = 'USA Inbound' THEN convert_timezone('MST', fn.timestamp)\n               WHEN fn.campaign = 'Peru - Inbound' THEN convert_timezone('America/Lima', fn.timestamp)\n               END                                                                    AS created_date,\n           CASE\n           WHEN fn.talk_time > 0 OR fn2.talk_time > 0 THEN 'Serviced'\n           WHEN (fn.disposition like '%IVR - SERVICED') THEN 'Serviced'\n           --serviced calls based on ivr reason\n           WHEN fn.campaign in ('Chile Inbound','Colombia Inbound','Peru - Inbound','USA Inbound')\n             AND fn.disposition = 'Answered by IVR' THEN 'Serviced'\n           WHEN ((fn.talk_time is null or fn.talk_time = 0) and (fn2.talk_time is null or fn2.talk_time = 0)) and\n                fn.total_queue_time <= 7 then 'Abandoned'\n           --missed calls based on ivr reason\n           WHEN fn.campaign in ('Chile Inbound','Colombia Inbound','Peru - Inbound','USA Inbound')\n             AND fn.disposition like 'AfterHours%' THEN 'Missed'\n           WHEN ((fn.talk_time is null or fn.talk_time = 0) and (fn2.talk_time is null or fn2.talk_time = 0)) and\n                fn.total_queue_time > 7 then 'Missed'\n           ELSE null\n           END                                                                        AS status,\n           fn.is_afterhours,\n           fn.is_deflected,\n           CASE\n                WHEN fn2.call_id IS NULL THEN FALSE\n                ELSE TRUE\n               END                                                                    AS is_callback,\n           fn.campaign                                                                AS five9_campaign,\n           sfc.backend_merchant_id_c::int                                             AS merchant_id,\n           mc.merchant_code::text                                                     AS merchant_code,\n           call_reasons.reason                                                        AS reason,\n           call_reasons.detailed_reason                                               AS detailed_reason,\n           call_reasons.reason_group                                                  AS reason_group,\n           CASE\n               WHEN fn.campaign IN ('Chile Inbound', 'Colombia Inbound', 'Peru - Inbound') THEN 'ES'\n               WHEN fn.campaign = 'USA Inbound' THEN 'EN'\n               END                                                                    AS language,\n           fn.campaign_type                                                           AS call_type,\n           CASE\n               WHEN fn.campaign = 'Chile Inbound' THEN 'CL'\n               WHEN fn.campaign = 'Colombia Inbound' THEN 'CO'\n               WHEN fn.campaign = 'USA Inbound' THEN 'US'\n               WHEN fn.campaign = 'Peru - Inbound' THEN 'PE'\n               END                                                                    AS country,\n           fn.total_queue_time                                                        AS waiting_time,\n           fn.ivr_time                                                                AS ivr_time,\n           coalesce(fn2.talk_time,fn.talk_time,0)                                       AS talk_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS handling_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) + fn.ivr_time + fn.total_queue_time +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS total_time,\n           CASE\n               WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n               WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n               WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n               ELSE 'SUMUP'\n           END                                                                        AS agent_company,\n           CASE\n               WHEN (\n                                fn.total_queue_time > 0\n                            or\n                                (fn.total_queue_time = 0 AND fn.talk_time > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.disposition not like '%IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN 'Human'\n               ELSE 'Bot'\n               END                                                                    AS agent_type,\n           CASE\n               WHEN (\n                                fn.total_queue_time > 0\n                            or\n                                (fn.total_queue_time = 0 AND fn.talk_time > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.disposition <>\n                       'CL WhatsApp IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN TRUE\n               ELSE FALSE\n               END                                                                    AS escalated,\n           -- When merchant doesn't get past the IVR the first contact agent type should be 'Bot'.\n               CASE\n               WHEN fn.IVR_PATH is not null THEN 'Bot'\n               ELSE 'Human'\n               END                                                                    AS first_contact_agent_type,\n           su.country_c                                                               AS agent_location,\n           CASE\n               WHEN su.department IS NULL THEN 'Bot'\n               WHEN fn.agent_email IS NOT NULL AND su.department IS NULL THEN 'Support'\n               ELSE su.department\n               END                                                                    AS agent_department,\n           NULL                                                                       AS comment,\n         fn.ani                                                                       AS caller_phone,\n          CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\n    FROM {{ ref('STG_FIVE9_ESLATAM_US') }} fn\n    LEFT JOIN {{ source('salesforce', 'contact') }} sfc\n        ON fn.salesforce_fields_id::text = sfc.id\n    LEFT JOIN {{ source('salesforce', 'user') }} su\n        ON trim(fn.agent_email) = su.username\n    LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_call') }} AS call_reasons\n        ON fn.disposition_path = call_reasons.old_reason\n            AND fn.disposition = call_reasons.old_detailed_reason\n    LEFT JOIN {{ ref('STG_FIVE9_ESLATAM_US') }} fn2\n        ON (fn.call_id = fn2.call_id)\n            AND (fn.call_type = 'Inbound' AND fn2.call_type = 'Queue Callback')\n            AND (fn.campaign = fn2.campaign)\n    LEFT JOIN {{ source('merchants_olap', 'v_m_dim_merchant') }} mc\n        ON sfc.backend_merchant_id_c::int = mc.merchant_id::int\n    LEFT JOIN {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }} sm ON sfc.backend_merchant_id_c::int = sm.merchant_id\n                       AND CASE\n                       WHEN date_trunc('month', fn.timestamp)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', fn.timestamp) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', fn.timestamp)::date END\n    WHERE\n        (fn.call_type IN ('Inbound') OR fn2.call_type = 'Queue Callback')\n        AND FN.DISPOSITION NOT IN (\n                                 'CO-Llamada de prueba',\n                                 'PE-Llamada de prueba',\n                                 'MISC Llamada de prueba - Llamada de control de calidad_QA',\n                                 'MISC Sin respuesta',\n                                 'Agent Error',\n                                 'MISC Spam',\n                                 'Test call or QA call'\n                                   )\n        AND fn.timestamp > '2020-01-01 00:00:00'\n        AND fn.campaign IN ('Chile Inbound', 'Colombia Inbound', 'USA Inbound','Peru - Inbound')\n)\n\n\n\nSELECT tpe.*,\n       rm.region      AS region\n  FROM tp_call_eu tpe\n  LEFT JOIN {{ source('touchpoint_sources_internal','region_mapping') }} rm\n      ON tpe.country = rm.country_code\n\nUNION ALL\n\n-- BR Touchpoints. Source: vinicius.carvalho@sumup.com\nSELECT tpb.*,\n       rm.region      AS region\n  FROM tp_call_br tpb\n  LEFT JOIN {{ source('touchpoint_sources_internal','region_mapping') }} rm\n      ON tpb.country = rm.country_code\n\nUNION ALL\n\n-- US+CL+CO Touch-points\n-- Contact: nelson.segovia@sumup.com & karina.gonzalez@sumup.com\nSELECT tpuccp.*,\n       rm.region      AS region\n  FROM tp_call_us_cl_co_pe tpuccp\n  LEFT JOIN {{ source('touchpoint_sources_internal','region_mapping') }} rm\n      ON tpuccp.country = rm.country_code", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_call", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.salesforce.task", "source.merchant_experience_unified_touchpoints.salesforce.contact", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.STG_FIVE9_BR", "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US", "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_call"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_call", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_call.sql", "original_file_path": "models/unified_touchpoints/tp_call.sql", "name": "tp_call", "alias": "tp_call", "checksum": {"name": "sha256", "checksum": "42353bbf0f1a87203a7617166feea0b50527242f40216026493aaa0a9ae019b9"}, "tags": [], "refs": [["STG_FIVE9_EU"], ["STG_FIVE9_EU"], ["STG_FIVE9_BR"], ["STG_FIVE9_ESLATAM_US"], ["STG_FIVE9_ESLATAM_US"]], "sources": [["salesforce", "user"], ["touchpoint_sources_internal", "tp_reasons_call"], ["salesforce", "case"], ["merchant_segmentation", "ae_t_small_merchant_segmentation"], ["salesforce", "task"], ["salesforce", "contact"], ["touchpoint_sources_internal", "region_mapping"], ["merchants_olap", "v_m_dim_merchant"]], "description": "Call touchpoints table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_call.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7847722, "compiled_sql": "/*\n * Call touchpoints table\n */\n\n\nWITH  task_rank AS (\n        SELECT DISTINCT\n            id,\n            five_9_five_9_session_id_c,\n            rank() over (partition by five_9_five_9_session_id_c order by CREATED_DATE) AS new_rank\n        FROM SUMUP_DWH_PROD.SRC_SALESFORCE.task\n    ),\ntp_call_eu AS (\n    SELECT DISTINCT\n           fn.call_id                                             AS id,\n           CASE\n               WHEN t2.what_id like ('500%') then t2.what_id\n               ELSE NULL\n               END                                                        AS case_id,\n           convert_timezone('Europe/Berlin', fn.TIMESTAMP) AS created_date,\n           CASE\n               WHEN fn.TALK_TIME > 0 OR fn2.TALK_TIME > 0 THEN 'Serviced'\n               WHEN (fn.DISPOSITION = 'IVR - SERVICED') THEN 'Serviced'\n               WHEN ((fn.TALK_TIME is null or fn.TALK_TIME = 0) and (fn2.TALK_TIME is null or fn2.TALK_TIME = 0)) and\n                    fn.TOTAL_QUEUE_TIME <= 7 then 'Abandoned'\n               WHEN ((fn.TALK_TIME is null or fn.TALK_TIME = 0) and (fn2.TALK_TIME is null or fn2.TALK_TIME = 0)) and\n                    fn.TOTAL_QUEUE_TIME > 7 then 'Missed'\n               ELSE null\n               END                                                  AS status,\n               fn.is_afterhours,\n               fn.is_deflected,\n           CASE\n               WHEN fn2.call_id IS NULL THEN FALSE\n               ELSE TRUE\n               END                                                AS is_callback,\n           fn.campaign                                            AS five9_campaign,\n           fn.salesforce_merchant_id::int                         AS merchant_id,\n           mc.merchant_code::text                                 AS merchant_code,\n           call_reasons.reason                                    AS reason,\n           call_reasons.detailed_reason                           AS detailed_reason,\n           call_reasons.reason_group                              AS reason_group,\n           -- ISO 639-1 Language Codes\n           CASE\n               WHEN fn.skill like ('%FR%')\n                   OR fn.campaign in ('SUP - FR', 'POS - FR')\n                   OR fn.IVR_PATH\n                        like ('%=FR%') THEN\n                   'FR'\n               WHEN fn.skill like ('%UK%')\n                   OR\n                    fn.campaign in ('SUP - UK', 'SUP - IE', 'POS - IE', 'POS - UK - Lite', 'SUP - US transfer to CNX')\n                   THEN\n                   'EN'\n               WHEN fn.skill like ('%DE%')\n                   OR fn.campaign in\n                      ('SUP - DE', 'SUP - AT', 'POS - DE', 'POS - DE - Release', 'POS - AT', 'POS - AT- Release')\n                   OR fn.IVR_PATH\n                        like ('%=DE%') THEN\n                   'DE'\n               WHEN fn.skill like ('%IT%')\n                   OR fn.campaign in ('SUP - IT')\n                   OR fn.IVR_PATH\n                        like ('%=IT%') THEN\n                   'IT'\n               WHEN fn.skill like ('%NL%')\n                   OR fn.campaign in ('SUP - NL', 'POS - NL')\n                   OR fn.IVR_PATH\n                        like ('%lan-nl%')\n                   OR fn.campaign = 'BE-nl-CallbackRequests' THEN\n                   'NL'\n               WHEN fn.skill like ('%PL%')\n                   OR fn.campaign in ('SUP - PL') THEN\n                   'PL'\n               WHEN fn.skill like ('%BG%')\n                   OR fn.campaign in ('SUP - BG') THEN\n                   'BG'\n               WHEN fn.skill like ('%CY%')\n                   OR fn.campaign in ('SUP - CY') THEN\n                   'EL'\n               WHEN fn.skill like ('%CZ%')\n                   OR fn.campaign in ('SUP - CZ') THEN\n                   'CS'\n               WHEN fn.skill like ('%GR%')\n                   OR fn.campaign in ('SUP - GR') THEN\n                   'EL'\n               WHEN fn.skill like ('%HU%')\n                   OR fn.campaign in ('SUP - HU') THEN\n                   'HU'\n               WHEN fn.skill like ('%LT%')\n                   OR fn.campaign in ('SUP - LT') THEN\n                   'LT'\n               WHEN fn.skill like ('%LV%')\n                   OR fn.campaign in ('SUP - LV') THEN\n                   'LV'\n               WHEN fn.skill like ('%MT%')\n                   OR fn.campaign in ('SUP - MT') THEN\n                   'EN'\n               WHEN fn.skill like ('%SI%')\n                   OR fn.campaign in ('SUP - SI') THEN\n                   'SL'\n               WHEN fn.skill like ('%FI%')\n                   OR fn.campaign in ('SUP - FI') THEN\n                   'FI'\n               WHEN fn.skill like ('%DK%')\n                   OR fn.campaign in ('SUP - DK') THEN\n                   'DA'\n               WHEN fn.skill like ('%SE%')\n                   OR fn.campaign in ('SUP - SE') THEN\n                   'SV'\n               WHEN fn.skill like ('%NO%')\n                   OR fn.campaign in ('SUP - NO') THEN\n                   'NO'\n               WHEN fn.skill like ('%PT%')\n                   OR fn.campaign in ('SUP - PT') THEN\n                   'PT'\n               WHEN fn.skill like ('%ES%')\n                   OR fn.campaign in ('SUP - ES', 'POS - ES') THEN\n                   'ES'\n               WHEN fn.skill like ('%SK%')\n                   OR fn.campaign in ('SUP - SK') THEN\n                   'SK'\n               WHEN fn.skill like ('%EE%')\n                   AND fn.campaign like ('SUP - EE') THEN\n                   'ET'\n               WHEN fn.skill like ('%HR%')\n                   AND fn.campaign like ('SUP - HR') THEN\n                   'HR'\n               WHEN fn.skill like ('%RO%')\n                   AND fn.campaign like ('SUP - RO') THEN\n                   'RO'\n               END                                                  AS language,\n           CASE\n               WHEN fn.call_type = 'Manual' THEN 'Outbound'\n               ELSE fn.call_type\n               END                                                  AS call_type,\n           CASE\n               WHEN fn.campaign in ('SUP - NL', 'POS - NL','BE-nl-CallbackRequests') THEN 'NL'\n               WHEN fn.campaign in ('SUP - DE', 'POS - DE', 'POS - DE - Release') THEN 'DE'\n               WHEN fn.campaign in ('SUP - AT','POS - AT', 'POS - AT- Release') THEN 'AT'\n               WHEN fn.campaign in ('SUP - UK', 'POS - UK - Lite') THEN 'GB'\n               WHEN fn.campaign in ('SUP - US transfer to CNX') THEN 'US'\n               WHEN fn.campaign in ('SUP - FR', 'POS - FR') THEN 'FR'\n               WHEN fn.campaign in ('SUP - IE', 'POS - IE') THEN 'IE'\n               WHEN fn.campaign in ('SUP - ES', 'POS - ES') THEN 'ES'\n               WHEN fn.campaign in ('SUP - IT') THEN 'IT'\n               WHEN fn.campaign in ('SUP - CH') THEN 'CH'\n               WHEN fn.campaign in ('SUP - BE') THEN 'BE'\n               WHEN fn.campaign in ('SUP - PL') THEN 'PL'\n               WHEN fn.campaign in ('SUP - BG') THEN 'BG'\n               WHEN fn.campaign in ('SUP - CY') THEN 'CY'\n               WHEN fn.campaign in ('SUP - CZ') THEN 'CZ'\n               WHEN fn.campaign in ('SUP - GR') THEN 'GR'\n               WHEN fn.campaign in ('SUP - HU') THEN 'HU'\n               WHEN fn.campaign in ('SUP - LT') THEN 'LT'\n               WHEN fn.campaign in ('SUP - CH') THEN 'LU'\n               WHEN fn.campaign in ('SUP - LV') THEN 'LV'\n               WHEN fn.campaign in ('SUP - MT') THEN 'MT'\n               WHEN fn.campaign in ('SUP - SI') THEN 'SI'\n               WHEN fn.campaign in ('SUP - FI') THEN 'FI'\n               WHEN fn.campaign in ('SUP - DK') THEN 'DK'\n               WHEN fn.campaign in ('SUP - SE') THEN 'SE'\n               WHEN fn.campaign in ('SUP - NO') THEN 'NO'\n               WHEN fn.campaign in ('SUP - PT') THEN 'PT'\n               WHEN fn.campaign in ('SUP - SK') THEN 'SK'\n               WHEN fn.campaign in ('SUP - EE') THEN 'EE'\n               WHEN fn.campaign in ('SUP - HR') THEN 'HR'\n               WHEN fn.campaign in ('SUP - RO') THEN 'RO'\n               WHEN fn.campaign in ('SUP - LU') THEN 'LU'\n               END                                                AS country,\n           fn.TOTAL_QUEUE_TIME                                    AS waiting_time,\n           fn.IVR_TIME                                            AS ivr_time,\n           coalesce(fn2.talk_time,fn.talk_time,0)                                       AS talk_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS handling_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) + fn.ivr_time + fn.total_queue_time +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS total_time,\n           CASE\n               WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n               WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n               WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n               ELSE 'SUMUP'\n           END                                                      AS agent_company,\n           CASE\n               WHEN (\n                                fn.TOTAL_QUEUE_TIME > 0\n                            or\n                                (fn.TOTAL_QUEUE_TIME = 0 AND fn.TALK_TIME > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.DISPOSITION <>\n                       'IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN 'Human'\n               ELSE 'Bot'\n               END                                                  AS agent_type,\n            CASE\n                WHEN fn.ivr_path IS NOT NULL AND fn.revamp_ivr_call_escalated = 1 THEN TRUE\n                WHEN fn.ivr_path IS NOT NULL AND fn.revamp_ivr_call_escalated = 0 THEN FALSE\n                ELSE  NULL\n                END                                                 AS escalated,\n           CASE\n               WHEN fn.IVR_PATH is not null THEN 'Bot'\n               ELSE 'Human'\n               END                                                  AS first_contact_agent_type,\n           su.country_c                                             AS agent_location,\n           su.department                                            AS agent_department,\n           fn.NOTES AS comment,\n           fn.ANI                                                   AS caller_phone,\n    CASE\n        WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n        WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n        ELSE 'Unknown'\n    END                                                              AS merchant_type\n    FROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_EU fn\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user su\n        ON trim(fn.agent_email) = su.username\n    LEFT JOIN task_rank t\n        ON t.five_9_five_9_session_id_c::text = fn.session_id\n            AND t.new_rank = 1\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.task t2\n        ON t2.id = t.id\n            AND t2.what_id IS NOT NULL\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.case cn\n        ON t2.\"WHAT_ID\" = cn.id\n    LEFT JOIN SUMUP_DWH_PROD.OLAP.v_m_dim_merchant mc\n        ON fn.salesforce_merchant_id::int = mc.merchant_id::int\n    LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_EU fn2\n        ON fn.call_id = fn2.call_id\n            AND (fn2.call_type = 'Queue Callback' AND fn.call_type = 'Inbound')\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_call AS call_reasons\n        ON (fn.disposition_PATH = call_reasons.old_reason\n            AND fn.disposition = call_reasons.old_detailed_reason)\n            OR \n            (fn.disposition_PATH IS NULL\n            AND fn.disposition = call_reasons.old_detailed_reason)\n    LEFT JOIN SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation sm ON fn.salesforce_merchant_id::int = sm.merchant_id\n                       AND CASE\n                       WHEN date_trunc('month', fn.timestamp)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', fn.timestamp) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', fn.timestamp)::date END\n    WHERE 1 = 1\n      AND fn.TIMESTAMP > '2020-01-01 00:00:00'\n      AND (fn.call_type IN ('Inbound', 'Manual') OR fn2.call_type = 'Queue Callback')\n      AND (fn.campaign LIKE ('%SUP%') OR fn.campaign = 'BE-nl-CallbackRequests')\n      -- users with duplicated accounts - same email addresses\n      AND (su.id NOT IN (\n                         '0052p00000BhSElAAN', -- emilie.jaillot@sumup.com\n                         '0052p000009etoHAAQ', -- stefan.mauer@sumup.com\n                         '0052p00000AAxdXAAT', -- irep.ozugur@sumup.com\n                         '0052p00000AADD9AAP' -- maja.muhic@sumup.com\n        ) OR su.id IS NULL)\n),\n\n-- BR Touchpoints. Source: vinicius.carvalho@sumup.com\ntp_call_br AS (\n    SELECT DISTINCT\n           fn.call_id                                                                         AS id,\n           NULL                                                                               AS case_id,\n           fn.TIMESTAMP                                                                       AS created_date,\n           CASE\n           WHEN fn.TALK_TIME > 0 THEN 'Serviced'\n           WHEN (fn.DISPOSITION = 'Atendida na URA') THEN 'Serviced'\n           WHEN (fn.TALK_TIME is null or fn.TALK_TIME = 0) and\n                fn.TOTAL_QUEUE_TIME <= 7 then 'Abandoned'\n           WHEN (fn.TALK_TIME is null or fn.TALK_TIME = 0) and\n                fn.TOTAL_QUEUE_TIME > 7 then 'Missed'\n           ELSE null\n           END                                                                                AS status,\n           fn.is_afterhours,\n           FALSE                                                                              AS is_deflected,\n           FALSE                                                                              AS is_callback,\n           NULL                                                                               AS five9_campaign,\n           sfc.backend_merchant_id_c::int                                                     AS merchant_id,\n           mc.merchant_code::text                                                             AS merchant_code,\n           coalesce(old_reason,fn.disposition_path)                                           AS reason,\n           CASE\n               WHEN fn.disposition_path IS NULL THEN NULL\n               ELSE coalesce(old_detailed_reason,fn.disposition)\n               END                                                                            AS detailed_reason,\n           call_reasons.reason_group                                                          AS reason_group,\n           'PT'                                                                               AS language,\n           fn.campaign_TYPE                                                                   AS call_type,\n           'BR'                                                                               AS country,\n           fn.TOTAL_QUEUE_TIME\t                                                              AS waiting_time,\n           fn.IVR_TIME                                                                        AS ivr_time,\n           fn.talk_time                                                                       AS talk_time,\n           fn.talk_time + fn.AFTER_CALL_WORK_TIME                                             AS handling_time,\n           fn.talk_time + fn.IVR_TIME +\n           fn.TOTAL_QUEUE_TIME + fn.AFTER_CALL_WORK_TIME                                      AS total_time,\n           CASE\n               WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n               WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n               WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n               ELSE 'SUMUP'\n           END                                                                                AS agent_company,\n           CASE\n              WHEN (\n                                fn.TOTAL_QUEUE_TIME > 0\n                            or\n                                (fn.TOTAL_QUEUE_TIME = 0 AND fn.TALK_TIME > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.DISPOSITION <>\n                       'IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN 'Human'\n               ELSE 'Bot'\n               END                                                                            AS agent_type,\n           CASE\n               WHEN (\n                                fn.TOTAL_QUEUE_TIME > 0\n                            or\n                                (fn.TOTAL_QUEUE_TIME = 0 AND fn.TALK_TIME > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.DISPOSITION <>\n                       'IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN TRUE\n               ELSE FALSE\n               END                                                                           AS escalated,\n            CASE\n               WHEN fn.IVR_PATH is not null THEN 'Bot'\n               ELSE 'Human'\n               END                                                                            AS first_contact_agent_type,\n           su.country_c                                                                       AS agent_location,\n           CASE\n               WHEN fn.IVR_TIME > 0 AND fn.talk_time = 0 and fn.agent_email IS NULL THEN 'Bot'\n               WHEN fn.agent_email IS NOT NULL AND su.department IS NULL THEN 'Support Brazil'\n               ELSE su.department\n               END                                                                            AS agent_department,\n           NULL                                                                               AS comment,\n          fn.ANI                                                                              AS caller_phone,\n          CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\n    FROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_BR fn\n        LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.contact sfc\n            ON fn.custom_sf_id_encontrado::text = sfc.id\n        LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user su\n            ON trim(fn.agent_email) = su.username\n        LEFT JOIN SUMUP_DWH_PROD.OLAP.v_m_dim_merchant mc\n            ON sfc.backend_merchant_id_c::int = mc.merchant_id::int\n        LEFT JOIN SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation sm ON sfc.backend_merchant_id_c::int = sm.merchant_id\n                       AND CASE\n                       WHEN date_trunc('month', fn.TIMESTAMP)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', fn.TIMESTAMP) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', fn.\"TIMESTAMP\")::date END\n        LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_call AS call_reasons\n                       ON fn.disposition_path = call_reasons.old_reason AND\n                          fn.disposition = call_reasons.old_detailed_reason\n    WHERE 1 = 1\n      AND fn.call_type = 'Inbound'\n      AND (su.id NOT IN (\n                         '0052p00000A4TprAAF', -- felipe.brito@sumup.com\n                         '0052p00000AA21lAAD', -- felipe.brito@sumup.com\n                         '00557000007KE6RAAW', -- bruna.santos.terceiro@sumup.com\n                         '005570000085EM8AAM', -- talita.silva@sumup.com\n                         '0055700000719DmAAI', -- vinicius.ribeiro@sumup.com\n                         '0052p00000BhZCrAAN', -- marcus.bruder@sumup.com\n                         '005570000071KUIAA2', -- carolina.silva@sumup.com\n                         '00557000007nBwsAAE', -- vitor.silva@sumup.com\n                         '005570000072XLPAA2', -- ingrid.silva@sumup.com\n                         '0052p00000A4Cy3AAF', -- oliver.ganacin@sumup.com\n                         '00557000006zFZWAA2', -- rodrigo.gomes@sumup.com\n                         '005570000084d56AAA', -- douglas.nascimento@sumup.com\n                         '00557000008WPffAAG', -- naum.santos@sumup.com\n                         '0052p00000AAWzbAAH', -- luiz.pedro.duque@sumup.com\n                         '0052p000009exWHAAY', -- renata.brito@sumup.com\n                         '0052p00000A9oMBAAZ', -- jefferson.lopes@sumup.com\n                         '00557000007nBwZAAU' -- claudia.nascimento@sumup.com\n        ) OR su.id IS NULL)\n      AND fn.TIMESTAMP > '2020-01-01 00:00:00'\n),\n\n-- US+CL+CO Touch-points\n-- Contact: nelson.segovia@sumup.com & karina.gonzalez@sumup.com\ntp_call_us_cl_co_pe AS (\n    SELECT DISTINCT\n           fn.call_id                                                                 AS id,\n           NULL                                                                       AS case_id,\n           CASE\n               WHEN fn.campaign = 'Chile Inbound' THEN convert_timezone('America/Santiago', fn.timestamp)\n               WHEN fn.campaign = 'Colombia Inbound' THEN convert_timezone('America/Bogota', fn.timestamp)\n               WHEN fn.campaign = 'USA Inbound' THEN convert_timezone('MST', fn.timestamp)\n               WHEN fn.campaign = 'Peru - Inbound' THEN convert_timezone('America/Lima', fn.timestamp)\n               END                                                                    AS created_date,\n           CASE\n           WHEN fn.talk_time > 0 OR fn2.talk_time > 0 THEN 'Serviced'\n           WHEN (fn.disposition like '%IVR - SERVICED') THEN 'Serviced'\n           --serviced calls based on ivr reason\n           WHEN fn.campaign in ('Chile Inbound','Colombia Inbound','Peru - Inbound','USA Inbound')\n             AND fn.disposition = 'Answered by IVR' THEN 'Serviced'\n           WHEN ((fn.talk_time is null or fn.talk_time = 0) and (fn2.talk_time is null or fn2.talk_time = 0)) and\n                fn.total_queue_time <= 7 then 'Abandoned'\n           --missed calls based on ivr reason\n           WHEN fn.campaign in ('Chile Inbound','Colombia Inbound','Peru - Inbound','USA Inbound')\n             AND fn.disposition like 'AfterHours%' THEN 'Missed'\n           WHEN ((fn.talk_time is null or fn.talk_time = 0) and (fn2.talk_time is null or fn2.talk_time = 0)) and\n                fn.total_queue_time > 7 then 'Missed'\n           ELSE null\n           END                                                                        AS status,\n           fn.is_afterhours,\n           fn.is_deflected,\n           CASE\n                WHEN fn2.call_id IS NULL THEN FALSE\n                ELSE TRUE\n               END                                                                    AS is_callback,\n           fn.campaign                                                                AS five9_campaign,\n           sfc.backend_merchant_id_c::int                                             AS merchant_id,\n           mc.merchant_code::text                                                     AS merchant_code,\n           call_reasons.reason                                                        AS reason,\n           call_reasons.detailed_reason                                               AS detailed_reason,\n           call_reasons.reason_group                                                  AS reason_group,\n           CASE\n               WHEN fn.campaign IN ('Chile Inbound', 'Colombia Inbound', 'Peru - Inbound') THEN 'ES'\n               WHEN fn.campaign = 'USA Inbound' THEN 'EN'\n               END                                                                    AS language,\n           fn.campaign_type                                                           AS call_type,\n           CASE\n               WHEN fn.campaign = 'Chile Inbound' THEN 'CL'\n               WHEN fn.campaign = 'Colombia Inbound' THEN 'CO'\n               WHEN fn.campaign = 'USA Inbound' THEN 'US'\n               WHEN fn.campaign = 'Peru - Inbound' THEN 'PE'\n               END                                                                    AS country,\n           fn.total_queue_time                                                        AS waiting_time,\n           fn.ivr_time                                                                AS ivr_time,\n           coalesce(fn2.talk_time,fn.talk_time,0)                                       AS talk_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS handling_time,\n           coalesce(fn2.talk_time,fn.talk_time,0) + fn.ivr_time + fn.total_queue_time +\n                coalesce(fn2.after_call_work_time,fn.after_call_work_time,0)            AS total_time,\n           CASE\n               WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n               WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n               WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n               ELSE 'SUMUP'\n           END                                                                        AS agent_company,\n           CASE\n               WHEN (\n                                fn.total_queue_time > 0\n                            or\n                                (fn.total_queue_time = 0 AND fn.talk_time > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.disposition not like '%IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN 'Human'\n               ELSE 'Bot'\n               END                                                                    AS agent_type,\n           CASE\n               WHEN (\n                                fn.total_queue_time > 0\n                            or\n                                (fn.total_queue_time = 0 AND fn.talk_time > 0) -- In some cases, the agent answers between 0 and 1 second.\n                        )\n                   and fn.disposition <>\n                       'CL WhatsApp IVR - SERVICED' -- some calls have a talk time > 0 but the disposition is IVR - SERVICED\n                   THEN TRUE\n               ELSE FALSE\n               END                                                                    AS escalated,\n           -- When merchant doesn't get past the IVR the first contact agent type should be 'Bot'.\n               CASE\n               WHEN fn.IVR_PATH is not null THEN 'Bot'\n               ELSE 'Human'\n               END                                                                    AS first_contact_agent_type,\n           su.country_c                                                               AS agent_location,\n           CASE\n               WHEN su.department IS NULL THEN 'Bot'\n               WHEN fn.agent_email IS NOT NULL AND su.department IS NULL THEN 'Support'\n               ELSE su.department\n               END                                                                    AS agent_department,\n           NULL                                                                       AS comment,\n         fn.ani                                                                       AS caller_phone,\n          CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\n    FROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_ESLATAM_US fn\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.contact sfc\n        ON fn.salesforce_fields_id::text = sfc.id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user su\n        ON trim(fn.agent_email) = su.username\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_call AS call_reasons\n        ON fn.disposition_path = call_reasons.old_reason\n            AND fn.disposition = call_reasons.old_detailed_reason\n    LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_ESLATAM_US fn2\n        ON (fn.call_id = fn2.call_id)\n            AND (fn.call_type = 'Inbound' AND fn2.call_type = 'Queue Callback')\n            AND (fn.campaign = fn2.campaign)\n    LEFT JOIN SUMUP_DWH_PROD.OLAP.v_m_dim_merchant mc\n        ON sfc.backend_merchant_id_c::int = mc.merchant_id::int\n    LEFT JOIN SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation sm ON sfc.backend_merchant_id_c::int = sm.merchant_id\n                       AND CASE\n                       WHEN date_trunc('month', fn.timestamp)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', fn.timestamp) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', fn.timestamp)::date END\n    WHERE\n        (fn.call_type IN ('Inbound') OR fn2.call_type = 'Queue Callback')\n        AND FN.DISPOSITION NOT IN (\n                                 'CO-Llamada de prueba',\n                                 'PE-Llamada de prueba',\n                                 'MISC Llamada de prueba - Llamada de control de calidad_QA',\n                                 'MISC Sin respuesta',\n                                 'Agent Error',\n                                 'MISC Spam',\n                                 'Test call or QA call'\n                                   )\n        AND fn.timestamp > '2020-01-01 00:00:00'\n        AND fn.campaign IN ('Chile Inbound', 'Colombia Inbound', 'USA Inbound','Peru - Inbound')\n)\n\n\n\nSELECT tpe.*,\n       rm.region      AS region\n  FROM tp_call_eu tpe\n  LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping rm\n      ON tpe.country = rm.country_code\n\nUNION ALL\n\n-- BR Touchpoints. Source: vinicius.carvalho@sumup.com\nSELECT tpb.*,\n       rm.region      AS region\n  FROM tp_call_br tpb\n  LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping rm\n      ON tpb.country = rm.country_code\n\nUNION ALL\n\n-- US+CL+CO Touch-points\n-- Contact: nelson.segovia@sumup.com & karina.gonzalez@sumup.com\nSELECT tpuccp.*,\n       rm.region      AS region\n  FROM tp_call_us_cl_co_pe tpuccp\n  LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping rm\n      ON tpuccp.country = rm.country_code", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call"}, "model.merchant_experience_unified_touchpoints.tp_chat": {"raw_sql": "/*\n* Chat touchpoints table\n*/\n\n{{ config(materialized='table') }}\nWITH reasons_schema AS (\n\tSELECT\n\t    reason,\n\t    detailed_reason,\n\t    reason_group\n    FROM {{ source('touchpoint_sources_internal','tp_reasons_chat') }}\n    WHERE NOT ((reason = 'SUP - Onboarding') and (detailed_reason = 'SUP: Profile closure'))\n    AND NOT ((detailed_reason = 'Help to register') and (reason_group = 'Pre-Signup'))\n    GROUP BY reason, detailed_reason, reason_group\n),\nbot_reasons AS (\n    SELECT\n        id,\n        reasons_schema.reason AS reason,\n        reasons_schema.detailed_reason AS detailed_reason,\n        reasons_schema.reason_group AS reason_group\n    FROM\n        {{ source('ds_models', 'tp_chat_reason_labels') }} labels\n    LEFT JOIN reasons_schema\n        ON labels.detailed_reason = reasons_schema.detailed_reason\n    WHERE\n        labels.detailed_reason NOT IN ('BELOW_THRESHOLD', 'Other')\n),\nchats_customized_vars AS (\n    SELECT DISTINCT\n        id::text AS id,\n\tcase_id::text AS case_id,\n        CASE WHEN is_chatbot_session THEN timestampdiff(second, Transferred_Toqueue_c, Accepted_By_Agent_c)\n            ELSE timestampdiff(second, Request_Time , Accepted_By_Agent_c)\n        END AS waiting_time_c\n    FROM src_salesforce.live_chat_transcript\n),\n\nno_region_tp_chat AS (\nSELECT DISTINCT\n    chats.id::text AS id,\n    chats.case_id::text AS case_id,\n    CASE\n        WHEN lcb.developer_name LIKE '%US%' THEN convert_timezone('MST', chats.request_time)\n        ELSE convert_timezone('Europe/Berlin', chats.request_time)\n    END AS created_date,\n    CASE\n        --Abandonment from Support Centre\n        WHEN ((chats.CREATED_DATE > '2022-01-01' --we have more accurate tracking after this point\n            AND timestampdiff(second, REQUEST_TIME, END_TIME)  <= '7') -- the whole duration of chat is less than 7 seconds\n            OR\n              (chats.CREATED_DATE > '2022-01-01' AND  TRANSFERRED_TOQUEUE_C is not null --bot transfers to an agent\n                  AND timestampdiff(second, TRANSFERRED_TOQUEUE_C, END_TIME) <= '7' --the time spent in the queue less than 7 seconds\n                  AND ACCEPTED_BY_AGENT_C IS NULL) --agent didn't accept\n            ) THEN 'Abandoned'\n        --Bot abandonment\n        WHEN (chats.CREATED_DATE > '2022-01-01' AND\n              (ACCEPTED_BY_CHATBOT_C IS NOT NULL --The bot has accepted the chat\n                  AND ((SOLUTION_PRESENTED_C = false AND DID_BOTSOLVE_C is null) --the bot has not presented a solution\n                      OR (SOLUTION_PRESENTED_C = true AND DID_BOTSOLVE_C = 'No') --the bot has presented a solution but it wasn't satisfactory\n                      OR (SOLUTION_PRESENTED_C = false AND DID_BOTSOLVE_C = 'No')) --for some reason the bot has not presented a solution but somehow the merchant replied negatively to the questionnaire\n                  AND TRANSFERRED_TOQUEUE_C IS NULL)) --no transfer to an agent has happened\n            THEN 'Abandoned'\n        WHEN\n            ((chats.CREATED_DATE > '2022-01-01' and\n              TRANSFERRED_TOQUEUE_C IS NOT NULL --transfer to an agent from a bot has happened\n                AND ACCEPTED_BY_AGENT_C IS NULL) --agent has not accepted the chat\n                OR (chats.CREATED_DATE > '2022-01-01' AND ACCEPTED_BY_CHATBOT_C IS NULL ----the chat is coming from support centre\n                    AND ACCEPTED_BY_AGENT_C IS NULL --agent hasn't accepted the chat\n                    AND timestampdiff(second, REQUEST_TIME, END_TIME) > '7')) --the chat lasted more than 7 seconds (not sure if this is needed as abandonment has been specified above\n            THEN 'Missed'\n        --Bot Serviced\n        WHEN\n            (chats.CREATED_DATE > '2022-01-01' and ACCEPTED_BY_CHATBOT_C IS NOT NULL --chatbot has accepted the chat\n                AND TRANSFERRED_TOQUEUE_C IS NULL --Transfer request has not happened\n                AND (DID_BOTSOLVE_C = 'Yes' --Merchant replied 'Yes' to did bot solve questionnaire\n                    OR (DID_BOTSOLVE_C IS NULL --Or the questionnaire is left blank\n                        AND SOLUTION_PRESENTED_C = TRUE))) --and the bot has presented a solution to the merchant\n            THEN 'Serviced'\n        --Agent Serviced\n        WHEN\n            chats.CREATED_DATE > '2022-01-01' and ACCEPTED_BY_AGENT_C is not null  -- Agent has accepted the chat\n            THEN 'Serviced'\n        ELSE NULL\n    END AS status,\n    merchants.merchant_id::int AS merchant_id,\n    merchants.merchant_code::text    AS merchant_code,\n    CASE\n        WHEN bot_reasons.reason IS NOT NULL THEN bot_reasons.reason\n        ELSE chat_reasons.reason\n    END AS reason,\n    COALESCE(bot_reasons.detailed_reason, chat_reasons.detailed_reason) as detailed_reason,\n    COALESCE(bot_reasons.reason_group, chat_reasons.reason_group) AS reason_group,\n    chats.bots_completed_solution_c as bot_solution,\n    CASE\n        WHEN lcb.developer_name LIKE 'SumUp_Live_Chat' THEN 'EN'\n        WHEN lcb.developer_name LIKE '%UK%' THEN 'EN'\n        WHEN lcb.developer_name LIKE '%PL%' THEN 'PL'\n        WHEN lcb.developer_name LIKE '%DE%' THEN 'DE'\n        WHEN lcb.developer_name LIKE '%EN%' THEN 'EN'\n        WHEN lcb.developer_name LIKE '%FR%' THEN 'FR'\n        WHEN lcb.developer_name LIKE '%IT%' THEN 'IT'\n        WHEN lcb.developer_name LIKE '%NL%' THEN 'NL'\n        WHEN lcb.developer_name LIKE '%FI%' THEN 'FI'\n        WHEN lcb.developer_name LIKE '%HU%' THEN 'HU'\n        WHEN lcb.developer_name LIKE '%ES%' THEN 'ES'\n        ELSE NULL\n    END AS language,\n     CASE\n        WHEN lcb.developer_name LIKE ('Chat_Button_CL%')                                      THEN 'CL'\n        WHEN lcb.developer_name LIKE ('Chat_Button_COL%')                                     THEN 'COL'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_DE%') AND sfc.country IN ('Austria'))\n             OR lcb.developer_name IN ('Support_Centre_DE_AT')                                THEN 'AT'\n        WHEN lcb.developer_name LIKE ('Chat_Button_DE%') OR\n             lcb.developer_name IN ('Support_Centre_DE_DE')                                   THEN 'DE'\n        WHEN lcb.developer_name LIKE ('Chat_Button_FI%')                                      THEN 'FI'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_FR%') AND sfc.country IN ('Luxembourg'))\n             OR lcb.developer_name IN ('Support_Centre_DE_LU', 'Support_Centre_FR_LU')        THEN 'LU'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_FR%') AND sfc.country IN ('Belgium'))     THEN 'BE'\n        WHEN ((lcb.developer_name LIKE ('Chat_Button_FR%')\n            OR lcb.developer_name LIKE  ('Chat_Button_IT%')\n            OR lcb.developer_name LIKE ('Chat_Button_DE%')) AND sfc.country IN ('Switzerland'))\n            OR lcb.developer_name IN ('Support_Centre_DE_CH', 'Support_Centre_FR_CH',\n            'Support_Centre_IT_CH')                                                           THEN 'CH'\n        WHEN lcb.developer_name LIKE ('Chat_Button_FR%') OR\n             lcb.developer_name IN ('Support_Centre_FR_FR')                                   THEN 'FR'\n        WHEN lcb.developer_name LIKE ('Chat_Button_HU%') OR\n             lcb.developer_name IN ('Support_Centre_HU_HU')                                   THEN 'HU'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_IT%') AND sfc.country IN ('Switzerland')) THEN 'CH'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_IT%') OR\n             lcb.developer_name IN ('Support_Centre_IT_IT'))                                  THEN 'IT'\n        WHEN ((lcb.developer_name LIKE ('Chat_Button_NL_BE%')) OR\n            (lcb.developer_name IN ('Support_Centre_FR_BE', 'Support_Centre_NL_BE')) OR\n            (lcb.developer_name LIKE ('Chat_Button_NL%') AND sfc.country IN ('Belgium')))     THEN 'BE'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_NL%') AND sfc.country IN ('Luxembourg'))  THEN 'LU'\n        WHEN lcb.developer_name LIKE ('Chat_Button_NL%') OR\n             lcb.developer_name IN ('Support_Centre_NL_NL')                                   THEN 'NL'\n        WHEN lcb.developer_name LIKE ('Chat_Button_PL%') OR\n             lcb.developer_name IN ('Support_Centre_PL_PL')                                   THEN 'PL'\n        WHEN (lcb.developer_name IN  ('Chat_Button_UK%') AND sfc.country IN ('Ireland'))\n             OR lcb.developer_name IN ('Support_Centre_EN_IE')                                THEN 'IE'\n        WHEN lcb.developer_name LIKE ('Chat_Button_UK%')                                      THEN 'GB'\n        WHEN lcb.developer_name LIKE ('Chat_Button_US%') OR\n             lcb.developer_name IN ('Support_Centre_EN_US')                                   THEN 'US'\n        WHEN (lcb.developer_name IN ('SumUp_Live_Chat') AND sfc.country IN ('Ireland'))       THEN 'IE'\n        WHEN lcb.developer_name LIKE ('Chat_Button_ES%')  OR\n             lcb.developer_name IN ('Support_Centre_ES_ES')                                   THEN 'ES'\n        WHEN lcb.developer_name IN ('SumUp_Live_Chat', 'Support_Centre_EN_UK')                THEN 'GB'\n        ELSE NULL\n        END AS country,\n    CASE chats.origin_c\n    \tWHEN 'app_Android' THEN 'App (Android)'\n    \tWHEN 'app_iOS' THEN 'App (iOS)'\n    \tWHEN 'Marketing_Website' THEN 'Web'\n    \tELSE chats.origin_c\n    END AS origin,\n    timestampdiff(second, chats.request_time,  chats.start_time) AS waiting_time,\n    CASE\n     -- Only human chats where there is an agent available.\n     WHEN (chats.ACCEPTED_BY_CHATBOT_C IS NULL AND ACCEPTED_BY_AGENT_C IS NOT NULL)\n        THEN timestampdiff(second, chats.request_time,  chats.ACCEPTED_BY_AGENT_C)\n\n     -- Only human chats with no agents available.\n     WHEN (chats.ACCEPTED_BY_CHATBOT_C IS NULL AND chats.ACCEPTED_BY_AGENT_C IS NULL)\n        THEN timestampdiff(second, chats.request_time,  chats.end_time)\n\n     -- Failed transfer from Bot with new method.\n     WHEN (chats.owner_id IN ('005D0000002BnYSIA0', '00557000008WTxiAAG')  AND chats.ACCEPTED_BY_CHATBOT_C IS NOT NULL\n     AND chats.transferred_toqueue_c IS NOT NULL AND chats.created_date > '2021-09-03')\n        THEN timestampdiff(second, chats.transferred_toqueue_c, chats.end_time)\n\n     -- Transfer time from Bot to an available agent with new method.\n     WHEN (chats.owner_id NOT IN ('005D0000002BnYSIA0', '00557000008WTxiAAG')  AND chats.ACCEPTED_BY_CHATBOT_C IS NOT NULL\n     AND chats.transferred_toqueue_c IS NOT NULL AND chats.created_date::DATE > '2021-09-03')\n        THEN timestampdiff(second, chats.transferred_toqueue_c, chats.ACCEPTED_BY_AGENT_C)\n    END AS transfer_time,\n    CASE\n           --Fallback to old method for measuring handling time\n           WHEN chats.created_date::DATE < '2021-09-03'\n           THEN timestampdiff(second, chats.start_time, chats.end_time)\n           --Handling time for human and bot, which can be dissected by agent_type field.\n           --When agent_type is 'Bot', the handling_time might include transfer times.\n           WHEN chats.owner_id NOT IN ('005D0000002BnYSIA0', '00557000008WTxiAAG')\n           THEN timestampdiff(second, chats.accepted_by_agent_c, chats.end_time)\n           ELSE ba.session_duration\n    END AS handling_time,\n    --Bot session duration isolated from handling_time field which is dictated by agent type.\n    ba.session_duration AS bot_handling_time,\n    timestampdiff(second, chats.request_time,  chats.end_time) AS total_time,\n    CASE\n        WHEN ACCEPTED_BY_CHATBOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END AS first_contact_agent_type,\n    CASE\n        WHEN TRANSFERRED_TOQUEUE_C IS NULL AND ACCEPTED_BY_CHATBOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END AS agent_type,\n    ba.bot_name as bot_name,\n    chats.operator_message_count as agent_message_count,\n    chats.visitor_message_count as visitor_message_count,\n    chats.average_response_time_visitor as avg_response_time_visitor,\n    chats.average_response_time_operator as avg_response_time_operator,\n    chats.platform as platform,\n    CASE\n        WHEN TRANSFERRED_TOQUEUE_C IS NOT NULL AND ACCEPTED_BY_CHATBOT_C IS NOT NULL\n        THEN TRUE\n        WHEN TRANSFERRED_TOQUEUE_C IS NULL AND ACCEPTED_BY_CHATBOT_C IS NOT NULL\n        THEN FALSE\n        ELSE NULL\n    END AS escalated,\n    CASE\n        WHEN (\n            ba.last_dialog_name NOT IN ('Welcome')\n            OR chats.visitor_message_count > 0\n        ) THEN TRUE\n        ELSE FALSE\n    END AS is_conversation,\n    CASE\n        WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n        WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n        WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n        ELSE 'SUMUP'\n    END AS agent_company,\n    su.country_c AS agent_location,\n    CASE\n        WHEN chats.owner_id in ('005D0000002BnYSIA0', '00557000008WTxiAAG') THEN NULL\n        ELSE su.department END AS agent_department,\n    chats.callback_request_c as callback_request_id,\n    CASE\n        -- Agent is the same as chatbot session false\n        WHEN NOT is_chatbot_session THEN timestampdiff(second, chats.request_time, chats.accepted_by_agent_c)\n        -- IF( OwnerId = LEFT($CustomMetadata.User__mdt.SystemUser.UserId__c,15) , \"Bot\",\"BotToAgent\")) for bot\n        WHEN is_chatbot_session THEN timestampdiff(second, chats.transferred_toqueue_c, chats.accepted_by_agent_c)\n        END AS agent_first_response_time,\n    CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM\n    {{ source('salesforce', 'live_chat_transcript') }} chats\n    LEFT JOIN chats_customized_vars ccv\n        ON ccv.id = chats.id\n            AND ccv.case_id = chats.case_id\n    LEFT JOIN {{ source('salesforce', 'live_chat_button') }} lcb\n        ON lcb.id = chats.live_chat_button_id\n    LEFT JOIN {{ source('salesforce', 'user') }} su\n        ON chats.owner_id = su.id\n    LEFT JOIN {{ ref('v_merchant_sf_contact') }} sfc\n        ON sfc.id::text = chats.contact_id::text\n    LEFT JOIN {{ source('merchants_olap', 'v_m_dim_merchant') }} merchants\n        ON sfc.merchant_code = merchants.merchant_code\n    LEFT JOIN {{ source('salesforce', 'analytics_bot_session') }} AS ba\n        ON chats.id = ba.source_id\n    LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_chat') }} AS chat_reasons\n        ON chats.chat_reason_c = chat_reasons.old_reason\n    LEFT JOIN bot_reasons\n        ON chats.id = bot_reasons.id\n    LEFT JOIN {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }} sm ON merchants.merchant_id::int = sm.merchant_id\n                   AND CASE\n                       WHEN date_trunc('month', chats.request_time)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', chats.request_time) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', chats.request_time)::date END\nWHERE\n    1=1\n    AND lcb.developer_name NOT IN ('SumUp_Support_Chat_Brazil')\n    AND (\n        ba.bot_name LIKE '%UK%'\n        OR ba.bot_name LIKE '%DE%'\n        OR ba.bot_name LIKE '%FR%'\n        OR ba.bot_name LIKE '%IT%'\n        OR ba.bot_name LIKE '%Sam_the_SumUp_Bot%'\n        OR ba.bot_name = 'SumUp_Chatbot'\n        OR ba.bot_name IS NULL\n    )\n)\n\nSELECT tpc.*,\n       rm.region                AS region\n  FROM no_region_tp_chat tpc\n  LEFT JOIN {{ source('touchpoint_sources_internal','region_mapping') }} rm\n      ON tpc.country = rm.country_code\nORDER BY tpc.created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.salesforce.live_chat_button", "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript", "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat", "source.merchant_experience_unified_touchpoints.ds_models.tp_chat_reason_labels", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_chat"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_chat", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_chat.sql", "original_file_path": "models/unified_touchpoints/tp_chat.sql", "name": "tp_chat", "alias": "tp_chat", "checksum": {"name": "sha256", "checksum": "4ce7683ae2c8e8af34c3e1432de671ca6035c2f82c47b56e4d66d76b3e1641da"}, "tags": [], "refs": [["v_merchant_sf_contact"]], "sources": [["salesforce", "user"], ["touchpoint_sources_internal", "region_mapping"], ["merchant_segmentation", "ae_t_small_merchant_segmentation"], ["salesforce", "live_chat_button"], ["salesforce", "live_chat_transcript"], ["salesforce", "analytics_bot_session"], ["merchants_olap", "v_m_dim_merchant"], ["touchpoint_sources_internal", "tp_reasons_chat"], ["ds_models", "tp_chat_reason_labels"]], "description": "Chat touchpoints table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_chat.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7872748, "compiled_sql": "/*\n* Chat touchpoints table\n*/\n\n\nWITH reasons_schema AS (\n\tSELECT\n\t    reason,\n\t    detailed_reason,\n\t    reason_group\n    FROM SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_chat\n    WHERE NOT ((reason = 'SUP - Onboarding') and (detailed_reason = 'SUP: Profile closure'))\n    AND NOT ((detailed_reason = 'Help to register') and (reason_group = 'Pre-Signup'))\n    GROUP BY reason, detailed_reason, reason_group\n),\nbot_reasons AS (\n    SELECT\n        id,\n        reasons_schema.reason AS reason,\n        reasons_schema.detailed_reason AS detailed_reason,\n        reasons_schema.reason_group AS reason_group\n    FROM\n        SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_chat_reason_labels labels\n    LEFT JOIN reasons_schema\n        ON labels.detailed_reason = reasons_schema.detailed_reason\n    WHERE\n        labels.detailed_reason NOT IN ('BELOW_THRESHOLD', 'Other')\n),\nchats_customized_vars AS (\n    SELECT DISTINCT\n        id::text AS id,\n\tcase_id::text AS case_id,\n        CASE WHEN is_chatbot_session THEN timestampdiff(second, Transferred_Toqueue_c, Accepted_By_Agent_c)\n            ELSE timestampdiff(second, Request_Time , Accepted_By_Agent_c)\n        END AS waiting_time_c\n    FROM src_salesforce.live_chat_transcript\n),\n\nno_region_tp_chat AS (\nSELECT DISTINCT\n    chats.id::text AS id,\n    chats.case_id::text AS case_id,\n    CASE\n        WHEN lcb.developer_name LIKE '%US%' THEN convert_timezone('MST', chats.request_time)\n        ELSE convert_timezone('Europe/Berlin', chats.request_time)\n    END AS created_date,\n    CASE\n        --Abandonment from Support Centre\n        WHEN ((chats.CREATED_DATE > '2022-01-01' --we have more accurate tracking after this point\n            AND timestampdiff(second, REQUEST_TIME, END_TIME)  <= '7') -- the whole duration of chat is less than 7 seconds\n            OR\n              (chats.CREATED_DATE > '2022-01-01' AND  TRANSFERRED_TOQUEUE_C is not null --bot transfers to an agent\n                  AND timestampdiff(second, TRANSFERRED_TOQUEUE_C, END_TIME) <= '7' --the time spent in the queue less than 7 seconds\n                  AND ACCEPTED_BY_AGENT_C IS NULL) --agent didn't accept\n            ) THEN 'Abandoned'\n        --Bot abandonment\n        WHEN (chats.CREATED_DATE > '2022-01-01' AND\n              (ACCEPTED_BY_CHATBOT_C IS NOT NULL --The bot has accepted the chat\n                  AND ((SOLUTION_PRESENTED_C = false AND DID_BOTSOLVE_C is null) --the bot has not presented a solution\n                      OR (SOLUTION_PRESENTED_C = true AND DID_BOTSOLVE_C = 'No') --the bot has presented a solution but it wasn't satisfactory\n                      OR (SOLUTION_PRESENTED_C = false AND DID_BOTSOLVE_C = 'No')) --for some reason the bot has not presented a solution but somehow the merchant replied negatively to the questionnaire\n                  AND TRANSFERRED_TOQUEUE_C IS NULL)) --no transfer to an agent has happened\n            THEN 'Abandoned'\n        WHEN\n            ((chats.CREATED_DATE > '2022-01-01' and\n              TRANSFERRED_TOQUEUE_C IS NOT NULL --transfer to an agent from a bot has happened\n                AND ACCEPTED_BY_AGENT_C IS NULL) --agent has not accepted the chat\n                OR (chats.CREATED_DATE > '2022-01-01' AND ACCEPTED_BY_CHATBOT_C IS NULL ----the chat is coming from support centre\n                    AND ACCEPTED_BY_AGENT_C IS NULL --agent hasn't accepted the chat\n                    AND timestampdiff(second, REQUEST_TIME, END_TIME) > '7')) --the chat lasted more than 7 seconds (not sure if this is needed as abandonment has been specified above\n            THEN 'Missed'\n        --Bot Serviced\n        WHEN\n            (chats.CREATED_DATE > '2022-01-01' and ACCEPTED_BY_CHATBOT_C IS NOT NULL --chatbot has accepted the chat\n                AND TRANSFERRED_TOQUEUE_C IS NULL --Transfer request has not happened\n                AND (DID_BOTSOLVE_C = 'Yes' --Merchant replied 'Yes' to did bot solve questionnaire\n                    OR (DID_BOTSOLVE_C IS NULL --Or the questionnaire is left blank\n                        AND SOLUTION_PRESENTED_C = TRUE))) --and the bot has presented a solution to the merchant\n            THEN 'Serviced'\n        --Agent Serviced\n        WHEN\n            chats.CREATED_DATE > '2022-01-01' and ACCEPTED_BY_AGENT_C is not null  -- Agent has accepted the chat\n            THEN 'Serviced'\n        ELSE NULL\n    END AS status,\n    merchants.merchant_id::int AS merchant_id,\n    merchants.merchant_code::text    AS merchant_code,\n    CASE\n        WHEN bot_reasons.reason IS NOT NULL THEN bot_reasons.reason\n        ELSE chat_reasons.reason\n    END AS reason,\n    COALESCE(bot_reasons.detailed_reason, chat_reasons.detailed_reason) as detailed_reason,\n    COALESCE(bot_reasons.reason_group, chat_reasons.reason_group) AS reason_group,\n    chats.bots_completed_solution_c as bot_solution,\n    CASE\n        WHEN lcb.developer_name LIKE 'SumUp_Live_Chat' THEN 'EN'\n        WHEN lcb.developer_name LIKE '%UK%' THEN 'EN'\n        WHEN lcb.developer_name LIKE '%PL%' THEN 'PL'\n        WHEN lcb.developer_name LIKE '%DE%' THEN 'DE'\n        WHEN lcb.developer_name LIKE '%EN%' THEN 'EN'\n        WHEN lcb.developer_name LIKE '%FR%' THEN 'FR'\n        WHEN lcb.developer_name LIKE '%IT%' THEN 'IT'\n        WHEN lcb.developer_name LIKE '%NL%' THEN 'NL'\n        WHEN lcb.developer_name LIKE '%FI%' THEN 'FI'\n        WHEN lcb.developer_name LIKE '%HU%' THEN 'HU'\n        WHEN lcb.developer_name LIKE '%ES%' THEN 'ES'\n        ELSE NULL\n    END AS language,\n     CASE\n        WHEN lcb.developer_name LIKE ('Chat_Button_CL%')                                      THEN 'CL'\n        WHEN lcb.developer_name LIKE ('Chat_Button_COL%')                                     THEN 'COL'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_DE%') AND sfc.country IN ('Austria'))\n             OR lcb.developer_name IN ('Support_Centre_DE_AT')                                THEN 'AT'\n        WHEN lcb.developer_name LIKE ('Chat_Button_DE%') OR\n             lcb.developer_name IN ('Support_Centre_DE_DE')                                   THEN 'DE'\n        WHEN lcb.developer_name LIKE ('Chat_Button_FI%')                                      THEN 'FI'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_FR%') AND sfc.country IN ('Luxembourg'))\n             OR lcb.developer_name IN ('Support_Centre_DE_LU', 'Support_Centre_FR_LU')        THEN 'LU'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_FR%') AND sfc.country IN ('Belgium'))     THEN 'BE'\n        WHEN ((lcb.developer_name LIKE ('Chat_Button_FR%')\n            OR lcb.developer_name LIKE  ('Chat_Button_IT%')\n            OR lcb.developer_name LIKE ('Chat_Button_DE%')) AND sfc.country IN ('Switzerland'))\n            OR lcb.developer_name IN ('Support_Centre_DE_CH', 'Support_Centre_FR_CH',\n            'Support_Centre_IT_CH')                                                           THEN 'CH'\n        WHEN lcb.developer_name LIKE ('Chat_Button_FR%') OR\n             lcb.developer_name IN ('Support_Centre_FR_FR')                                   THEN 'FR'\n        WHEN lcb.developer_name LIKE ('Chat_Button_HU%') OR\n             lcb.developer_name IN ('Support_Centre_HU_HU')                                   THEN 'HU'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_IT%') AND sfc.country IN ('Switzerland')) THEN 'CH'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_IT%') OR\n             lcb.developer_name IN ('Support_Centre_IT_IT'))                                  THEN 'IT'\n        WHEN ((lcb.developer_name LIKE ('Chat_Button_NL_BE%')) OR\n            (lcb.developer_name IN ('Support_Centre_FR_BE', 'Support_Centre_NL_BE')) OR\n            (lcb.developer_name LIKE ('Chat_Button_NL%') AND sfc.country IN ('Belgium')))     THEN 'BE'\n        WHEN (lcb.developer_name LIKE ('Chat_Button_NL%') AND sfc.country IN ('Luxembourg'))  THEN 'LU'\n        WHEN lcb.developer_name LIKE ('Chat_Button_NL%') OR\n             lcb.developer_name IN ('Support_Centre_NL_NL')                                   THEN 'NL'\n        WHEN lcb.developer_name LIKE ('Chat_Button_PL%') OR\n             lcb.developer_name IN ('Support_Centre_PL_PL')                                   THEN 'PL'\n        WHEN (lcb.developer_name IN  ('Chat_Button_UK%') AND sfc.country IN ('Ireland'))\n             OR lcb.developer_name IN ('Support_Centre_EN_IE')                                THEN 'IE'\n        WHEN lcb.developer_name LIKE ('Chat_Button_UK%')                                      THEN 'GB'\n        WHEN lcb.developer_name LIKE ('Chat_Button_US%') OR\n             lcb.developer_name IN ('Support_Centre_EN_US')                                   THEN 'US'\n        WHEN (lcb.developer_name IN ('SumUp_Live_Chat') AND sfc.country IN ('Ireland'))       THEN 'IE'\n        WHEN lcb.developer_name LIKE ('Chat_Button_ES%')  OR\n             lcb.developer_name IN ('Support_Centre_ES_ES')                                   THEN 'ES'\n        WHEN lcb.developer_name IN ('SumUp_Live_Chat', 'Support_Centre_EN_UK')                THEN 'GB'\n        ELSE NULL\n        END AS country,\n    CASE chats.origin_c\n    \tWHEN 'app_Android' THEN 'App (Android)'\n    \tWHEN 'app_iOS' THEN 'App (iOS)'\n    \tWHEN 'Marketing_Website' THEN 'Web'\n    \tELSE chats.origin_c\n    END AS origin,\n    timestampdiff(second, chats.request_time,  chats.start_time) AS waiting_time,\n    CASE\n     -- Only human chats where there is an agent available.\n     WHEN (chats.ACCEPTED_BY_CHATBOT_C IS NULL AND ACCEPTED_BY_AGENT_C IS NOT NULL)\n        THEN timestampdiff(second, chats.request_time,  chats.ACCEPTED_BY_AGENT_C)\n\n     -- Only human chats with no agents available.\n     WHEN (chats.ACCEPTED_BY_CHATBOT_C IS NULL AND chats.ACCEPTED_BY_AGENT_C IS NULL)\n        THEN timestampdiff(second, chats.request_time,  chats.end_time)\n\n     -- Failed transfer from Bot with new method.\n     WHEN (chats.owner_id IN ('005D0000002BnYSIA0', '00557000008WTxiAAG')  AND chats.ACCEPTED_BY_CHATBOT_C IS NOT NULL\n     AND chats.transferred_toqueue_c IS NOT NULL AND chats.created_date > '2021-09-03')\n        THEN timestampdiff(second, chats.transferred_toqueue_c, chats.end_time)\n\n     -- Transfer time from Bot to an available agent with new method.\n     WHEN (chats.owner_id NOT IN ('005D0000002BnYSIA0', '00557000008WTxiAAG')  AND chats.ACCEPTED_BY_CHATBOT_C IS NOT NULL\n     AND chats.transferred_toqueue_c IS NOT NULL AND chats.created_date::DATE > '2021-09-03')\n        THEN timestampdiff(second, chats.transferred_toqueue_c, chats.ACCEPTED_BY_AGENT_C)\n    END AS transfer_time,\n    CASE\n           --Fallback to old method for measuring handling time\n           WHEN chats.created_date::DATE < '2021-09-03'\n           THEN timestampdiff(second, chats.start_time, chats.end_time)\n           --Handling time for human and bot, which can be dissected by agent_type field.\n           --When agent_type is 'Bot', the handling_time might include transfer times.\n           WHEN chats.owner_id NOT IN ('005D0000002BnYSIA0', '00557000008WTxiAAG')\n           THEN timestampdiff(second, chats.accepted_by_agent_c, chats.end_time)\n           ELSE ba.session_duration\n    END AS handling_time,\n    --Bot session duration isolated from handling_time field which is dictated by agent type.\n    ba.session_duration AS bot_handling_time,\n    timestampdiff(second, chats.request_time,  chats.end_time) AS total_time,\n    CASE\n        WHEN ACCEPTED_BY_CHATBOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END AS first_contact_agent_type,\n    CASE\n        WHEN TRANSFERRED_TOQUEUE_C IS NULL AND ACCEPTED_BY_CHATBOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END AS agent_type,\n    ba.bot_name as bot_name,\n    chats.operator_message_count as agent_message_count,\n    chats.visitor_message_count as visitor_message_count,\n    chats.average_response_time_visitor as avg_response_time_visitor,\n    chats.average_response_time_operator as avg_response_time_operator,\n    chats.platform as platform,\n    CASE\n        WHEN TRANSFERRED_TOQUEUE_C IS NOT NULL AND ACCEPTED_BY_CHATBOT_C IS NOT NULL\n        THEN TRUE\n        WHEN TRANSFERRED_TOQUEUE_C IS NULL AND ACCEPTED_BY_CHATBOT_C IS NOT NULL\n        THEN FALSE\n        ELSE NULL\n    END AS escalated,\n    CASE\n        WHEN (\n            ba.last_dialog_name NOT IN ('Welcome')\n            OR chats.visitor_message_count > 0\n        ) THEN TRUE\n        ELSE FALSE\n    END AS is_conversation,\n    CASE\n        WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n        WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n        WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n        ELSE 'SUMUP'\n    END AS agent_company,\n    su.country_c AS agent_location,\n    CASE\n        WHEN chats.owner_id in ('005D0000002BnYSIA0', '00557000008WTxiAAG') THEN NULL\n        ELSE su.department END AS agent_department,\n    chats.callback_request_c as callback_request_id,\n    CASE\n        -- Agent is the same as chatbot session false\n        WHEN NOT is_chatbot_session THEN timestampdiff(second, chats.request_time, chats.accepted_by_agent_c)\n        -- IF( OwnerId = LEFT($CustomMetadata.User__mdt.SystemUser.UserId__c,15) , \"Bot\",\"BotToAgent\")) for bot\n        WHEN is_chatbot_session THEN timestampdiff(second, chats.transferred_toqueue_c, chats.accepted_by_agent_c)\n        END AS agent_first_response_time,\n    CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM\n    SUMUP_DWH_PROD.SRC_SALESFORCE.live_chat_transcript chats\n    LEFT JOIN chats_customized_vars ccv\n        ON ccv.id = chats.id\n            AND ccv.case_id = chats.case_id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.live_chat_button lcb\n        ON lcb.id = chats.live_chat_button_id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user su\n        ON chats.owner_id = su.id\n    LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact sfc\n        ON sfc.id::text = chats.contact_id::text\n    LEFT JOIN SUMUP_DWH_PROD.OLAP.v_m_dim_merchant merchants\n        ON sfc.merchant_code = merchants.merchant_code\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.analytics_bot_session AS ba\n        ON chats.id = ba.source_id\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_chat AS chat_reasons\n        ON chats.chat_reason_c = chat_reasons.old_reason\n    LEFT JOIN bot_reasons\n        ON chats.id = bot_reasons.id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation sm ON merchants.merchant_id::int = sm.merchant_id\n                   AND CASE\n                       WHEN date_trunc('month', chats.request_time)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', chats.request_time) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', chats.request_time)::date END\nWHERE\n    1=1\n    AND lcb.developer_name NOT IN ('SumUp_Support_Chat_Brazil')\n    AND (\n        ba.bot_name LIKE '%UK%'\n        OR ba.bot_name LIKE '%DE%'\n        OR ba.bot_name LIKE '%FR%'\n        OR ba.bot_name LIKE '%IT%'\n        OR ba.bot_name LIKE '%Sam_the_SumUp_Bot%'\n        OR ba.bot_name = 'SumUp_Chatbot'\n        OR ba.bot_name IS NULL\n    )\n)\n\nSELECT tpc.*,\n       rm.region                AS region\n  FROM no_region_tp_chat tpc\n  LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping rm\n      ON tpc.country = rm.country_code\nORDER BY tpc.created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat"}, "model.merchant_experience_unified_touchpoints.tp_facebook": {"raw_sql": "/*\n* Facebook touchpoints table\n*/\n\n{{ config(materialized='table') }}\n\nWITH no_region_tp_facebook AS (\nSELECT DISTINCT\n    ms.id::text AS id,\n    ms.case_id::text as case_id,\n    CASE\n        WHEN ms.channel_name like('%IT%')\n          OR ms.channel_name like('%GB%')\n          OR ms.channel_name like('%FR%')\n          OR ms.channel_name like('%DE%')\n          THEN convert_timezone('Europe/Berlin', ms.created_date)\n        WHEN ms.channel_name like('%BR%')\n          THEN convert_timezone('America/Sao_Paulo', ms.created_date)\n        ELSE ms.created_date\n        END AS created_date,\n    CASE\n        -- bot chats only\n        WHEN ms.is_drop_conversation_c\n        OR (bot.abandoned_dialog_count > 0 AND bot.session_end_type='SessionTimedOut') THEN 'Abandoned'\n        -- agent chats\n        WHEN ms.agent_message_count = 0\n        AND ms.agent_s_first_message_c IS NULL\n        AND ms.end_user_message_count > 0\n        AND ms.agent_type != 'Bot' THEN 'Missed'\n        -- combined bot and agent chats\n        WHEN ms.did_botsolve_c='Yes'\n        OR ms.did_agentsolve_c='Yes'\n        OR ms.solution_presented_c -- chatbot automation\n        OR (bot.from_bot_message_count > 0 AND ms.end_user_message_count > 1)\n        OR (ms.agent_message_count > 1 AND ms.end_user_message_count > 1) THEN 'Serviced'\n        ELSE 'Accepted'\n    END AS status,\n    sp.merchant_id :: int AS merchant_id,\n    sp.merchant_code::text AS merchant_code,\n    reasons.reason AS reason,\n    reasons.detailed_reason AS detailed_reason,\n    reasons.reason_group AS reason_group,\n    CASE\n        WHEN ms.channel_name like('%IT%') THEN 'IT'\n        WHEN ms.channel_name like('%GB%') THEN 'EN'\n        WHEN ms.channel_name like('%FR%') THEN 'FR'\n        WHEN ms.channel_name like('%DE%') THEN 'DE'\n        WHEN ms.channel_name like('%US%') THEN 'EN'\n        WHEN ms.channel_name like('%BR%') THEN 'PT'\n    END AS language,\n    CASE\n        WHEN ms.channel_name like('%IT%') THEN 'IT'\n        WHEN ms.channel_name like('%GB%') THEN 'GB'\n        WHEN ms.channel_name like('%FR%') THEN 'FR'\n        WHEN ms.channel_name like('%DE%') THEN 'DE'\n        WHEN ms.channel_name like('%US%') THEN 'US'\n        WHEN ms.channel_name like('%BR%') THEN 'BR'\n    END AS country,\n    TIMESTAMPDIFF(second, ms.start_time, ms.end_time) AS total_session_time,\n    CASE\n        WHEN ORIGIN_BOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END                                                                   AS first_contact_agent_type,\n    CASE WHEN (ms.agent_type='Bot' OR ms.did_botsolve_c='Yes') THEN 'Bot'\n    ELSE 'Human'\n    END as agent_type,\n    CASE\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NOT NULL THEN true\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NULL THEN false\n       ELSE NULL\n       END                                                                 AS escalated,\n    (bot.from_bot_message_count > 0 AND ms.end_user_message_count > 1)\n        OR (ms.agent_message_count > 1 AND ms.end_user_message_count > 1)  as is_conversation,\n    CASE\n        WHEN su.email like('%concentrix%') THEN 'CNX'\n        WHEN su.email like('%terceiro%')   THEN 'TERCEIRO'\n        WHEN su.email LIKE ('%teleperformance%') THEN 'TLP'\n        ELSE 'SUMUP'\n    END AS agent_company,\n    su.country_c AS agent_location,\n    CASE WHEN ms.agent_type='Bot' THEN 'Bot' ELSE su.department END AS agent_department,\n        CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM\n    {{ source('salesforce', 'messaging_session') }} ms\n    LEFT JOIN {{ source('salesforce', 'user') }} su\n        ON ms.owner_id = su.id\n    LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_chat') }} reasons\n        ON ms.messaging_session_reason_c=reasons.old_reason\n    LEFT JOIN {{ source('salesforce', 'analytics_bot_session') }} bot\n        ON ms.session_key = bot.conversation_session_key\n    LEFT JOIN {{ ref('v_merchant_sf_contact') }} sp\n        ON sp.id :: text = ms.end_user_contact_id::text\n    LEFT JOIN {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }} sm\n        ON sp.merchant_id :: int = sm.merchant_id\n        AND CASE WHEN date_trunc('month', ms.created_date)::date = date_trunc('month', current_date)::date\n            THEN (date_trunc('month', ms.created_date) - INTERVAL '1 month')= SM.TX_MONTH\n            ELSE sm.tx_month = date_trunc('month', ms.created_date)::date\n            END\nWHERE\n    1 = 1\n    AND ms.status = 'Ended'\n    AND ms.start_time IS NOT NULL\n    AND ms.channel_type = 'Facebook'\n)\nSELECT tpf.*,\n       rm.region                AS region\n  FROM no_region_tp_facebook tpf\n  LEFT JOIN {{ source('touchpoint_sources_internal','region_mapping') }} rm\n      ON tpf.country = rm.country_code\nORDER BY tpf.created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.salesforce.messaging_session", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_facebook"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_facebook", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_facebook.sql", "original_file_path": "models/unified_touchpoints/tp_facebook.sql", "name": "tp_facebook", "alias": "tp_facebook", "checksum": {"name": "sha256", "checksum": "5f4a148017b6afefa6da5030c1da2c3526d288b3931d19a66c2f6cd20684664f"}, "tags": [], "refs": [["v_merchant_sf_contact"]], "sources": [["salesforce", "user"], ["salesforce", "messaging_session"], ["merchant_segmentation", "ae_t_small_merchant_segmentation"], ["salesforce", "analytics_bot_session"], ["touchpoint_sources_internal", "region_mapping"], ["touchpoint_sources_internal", "tp_reasons_chat"]], "description": "Facebook touchpoints table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_facebook.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7879384, "compiled_sql": "/*\n* Facebook touchpoints table\n*/\n\n\n\nWITH no_region_tp_facebook AS (\nSELECT DISTINCT\n    ms.id::text AS id,\n    ms.case_id::text as case_id,\n    CASE\n        WHEN ms.channel_name like('%IT%')\n          OR ms.channel_name like('%GB%')\n          OR ms.channel_name like('%FR%')\n          OR ms.channel_name like('%DE%')\n          THEN convert_timezone('Europe/Berlin', ms.created_date)\n        WHEN ms.channel_name like('%BR%')\n          THEN convert_timezone('America/Sao_Paulo', ms.created_date)\n        ELSE ms.created_date\n        END AS created_date,\n    CASE\n        -- bot chats only\n        WHEN ms.is_drop_conversation_c\n        OR (bot.abandoned_dialog_count > 0 AND bot.session_end_type='SessionTimedOut') THEN 'Abandoned'\n        -- agent chats\n        WHEN ms.agent_message_count = 0\n        AND ms.agent_s_first_message_c IS NULL\n        AND ms.end_user_message_count > 0\n        AND ms.agent_type != 'Bot' THEN 'Missed'\n        -- combined bot and agent chats\n        WHEN ms.did_botsolve_c='Yes'\n        OR ms.did_agentsolve_c='Yes'\n        OR ms.solution_presented_c -- chatbot automation\n        OR (bot.from_bot_message_count > 0 AND ms.end_user_message_count > 1)\n        OR (ms.agent_message_count > 1 AND ms.end_user_message_count > 1) THEN 'Serviced'\n        ELSE 'Accepted'\n    END AS status,\n    sp.merchant_id :: int AS merchant_id,\n    sp.merchant_code::text AS merchant_code,\n    reasons.reason AS reason,\n    reasons.detailed_reason AS detailed_reason,\n    reasons.reason_group AS reason_group,\n    CASE\n        WHEN ms.channel_name like('%IT%') THEN 'IT'\n        WHEN ms.channel_name like('%GB%') THEN 'EN'\n        WHEN ms.channel_name like('%FR%') THEN 'FR'\n        WHEN ms.channel_name like('%DE%') THEN 'DE'\n        WHEN ms.channel_name like('%US%') THEN 'EN'\n        WHEN ms.channel_name like('%BR%') THEN 'PT'\n    END AS language,\n    CASE\n        WHEN ms.channel_name like('%IT%') THEN 'IT'\n        WHEN ms.channel_name like('%GB%') THEN 'GB'\n        WHEN ms.channel_name like('%FR%') THEN 'FR'\n        WHEN ms.channel_name like('%DE%') THEN 'DE'\n        WHEN ms.channel_name like('%US%') THEN 'US'\n        WHEN ms.channel_name like('%BR%') THEN 'BR'\n    END AS country,\n    TIMESTAMPDIFF(second, ms.start_time, ms.end_time) AS total_session_time,\n    CASE\n        WHEN ORIGIN_BOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END                                                                   AS first_contact_agent_type,\n    CASE WHEN (ms.agent_type='Bot' OR ms.did_botsolve_c='Yes') THEN 'Bot'\n    ELSE 'Human'\n    END as agent_type,\n    CASE\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NOT NULL THEN true\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NULL THEN false\n       ELSE NULL\n       END                                                                 AS escalated,\n    (bot.from_bot_message_count > 0 AND ms.end_user_message_count > 1)\n        OR (ms.agent_message_count > 1 AND ms.end_user_message_count > 1)  as is_conversation,\n    CASE\n        WHEN su.email like('%concentrix%') THEN 'CNX'\n        WHEN su.email like('%terceiro%')   THEN 'TERCEIRO'\n        WHEN su.email LIKE ('%teleperformance%') THEN 'TLP'\n        ELSE 'SUMUP'\n    END AS agent_company,\n    su.country_c AS agent_location,\n    CASE WHEN ms.agent_type='Bot' THEN 'Bot' ELSE su.department END AS agent_department,\n        CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM\n    SUMUP_DWH_PROD.SRC_SALESFORCE.messaging_session ms\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user su\n        ON ms.owner_id = su.id\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_chat reasons\n        ON ms.messaging_session_reason_c=reasons.old_reason\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.analytics_bot_session bot\n        ON ms.session_key = bot.conversation_session_key\n    LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact sp\n        ON sp.id :: text = ms.end_user_contact_id::text\n    LEFT JOIN SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation sm\n        ON sp.merchant_id :: int = sm.merchant_id\n        AND CASE WHEN date_trunc('month', ms.created_date)::date = date_trunc('month', current_date)::date\n            THEN (date_trunc('month', ms.created_date) - INTERVAL '1 month')= SM.TX_MONTH\n            ELSE sm.tx_month = date_trunc('month', ms.created_date)::date\n            END\nWHERE\n    1 = 1\n    AND ms.status = 'Ended'\n    AND ms.start_time IS NOT NULL\n    AND ms.channel_type = 'Facebook'\n)\nSELECT tpf.*,\n       rm.region                AS region\n  FROM no_region_tp_facebook tpf\n  LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping rm\n      ON tpf.country = rm.country_code\nORDER BY tpf.created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_facebook"}, "model.merchant_experience_unified_touchpoints.new_tp_email": {"raw_sql": "/* This is a new table for tp_email containing current email data for the case centralisation project. \n   This data considers every single email message record regardless if it is linked to a case. \n   This table will be unioned with the historical email table considering a case as a touchpoint. \n\n   This table is still in development.\n*/\n\n{{ config(materialized='table') }}\n \nSELECT id, \n       case_id, \n       status,\n       merchant_id,\n       merchant_code,\n       reason,\n       detailed_reason,\n       reason_group,\n       country,\n       language,\n       origin,\n       agent_company,\n       agent_location,\n       agent_department,\n       response_time,\n       replying_department,\n       replying_agent_location,\n       replying_agent_company,\n       comment,\n       subject,\n       regulatory_environment,\n       is_internal_case,\n       merchant_type,\n       email_direction,\n       created_at\nFROM {{ ref('ref_email_staging') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.ref_email_staging"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "new_tp_email"], "unique_id": "model.merchant_experience_unified_touchpoints.new_tp_email", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/new_tp_email.sql", "original_file_path": "models/unified_touchpoints/new_tp_email.sql", "name": "new_tp_email", "alias": "new_tp_email", "checksum": {"name": "sha256", "checksum": "fcab4aaf821b1933e94c40d117a513b8425aa840d730f3aecf1b82abe3b3a0f8"}, "tags": [], "refs": [["ref_email_staging"]], "sources": [], "description": "New email data table for Case Centralisation", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/new_tp_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7882504, "compiled_sql": "/* This is a new table for tp_email containing current email data for the case centralisation project. \n   This data considers every single email message record regardless if it is linked to a case. \n   This table will be unioned with the historical email table considering a case as a touchpoint. \n\n   This table is still in development.\n*/\n\n\n \nSELECT id, \n       case_id, \n       status,\n       merchant_id,\n       merchant_code,\n       reason,\n       detailed_reason,\n       reason_group,\n       country,\n       language,\n       origin,\n       agent_company,\n       agent_location,\n       agent_department,\n       response_time,\n       replying_department,\n       replying_agent_location,\n       replying_agent_company,\n       comment,\n       subject,\n       regulatory_environment,\n       is_internal_case,\n       merchant_type,\n       email_direction,\n       created_at\nFROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.ref_email_staging", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.new_tp_email"}, "model.merchant_experience_unified_touchpoints.ref_email_staging": {"raw_sql": "/* This is a staging table to create a logic for our email statuses and response times. \n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT *,\n       LEAD(email_direction) OVER (PARTITION BY case_id ORDER BY created_at ASC)            AS next_email_direction,\n       LEAD(created_at) OVER (PARTITION BY case_id ORDER BY created_at ASC)                 AS next_email_created_at,\n       --TODO: Currently only calculating the time between an Inbound and the next Outbound email, \n       --but doesn't take into consideration the possible Inbound emails before the latest Inbound email, \n       --if the merchant sent multiple emails.\n       CASE \n            WHEN email_direction = 'Inbound' AND next_email_direction = 'Outbound'\n            THEN TIMESTAMPDIFF('minute', created_at,next_email_created_at)\n       END                                                                                  AS response_time,\n       --TODO: This may not be necessary to keep, but could help identifying when we or the merchant sent two emails in a row.\n       CASE\n           WHEN email_direction = 'Inbound' AND next_email_direction = 'Inbound' THEN true\n           WHEN email_direction = 'Outbound' AND next_email_direction = 'Outbound' THEN true\n           ELSE false\n       END                                                                                  AS double_email,\n       --TODO: Currently only marks the email where the next touchpoint after is Outbound, \n       --and doesn't mark multiple emails from merchants also as Serviced when we finally answer.\n       CASE\n            WHEN email_direction = 'Outbound' THEN NULL\n            WHEN email_direction = 'Inbound' AND next_email_direction = 'Outbound' THEN 'Serviced'\n            WHEN email_direction = 'Inbound' AND next_email_direction = 'Inbound' THEN NULL\n       ELSE 'New'\n       END                                                                                  AS status,\n       --TODO: These fields should help us identifying who replied to the incoming email from the merchant.\n       LEAD(agent_department) OVER (PARTITION BY case_id ORDER BY created_at ASC)           AS replying_department,\n       LEAD(agent_location) OVER (PARTITION BY case_id ORDER BY created_at ASC)             AS replying_agent_location,\n       LEAD(agent_company) OVER (PARTITION BY case_id ORDER BY created_at ASC)              AS replying_agent_company\nFROM {{ ref('ref_tp_email') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.ref_tp_email"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "refinement", "ref_email_staging"], "unique_id": "model.merchant_experience_unified_touchpoints.ref_email_staging", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "refinement/ref_email_staging.sql", "original_file_path": "models/refinement/ref_email_staging.sql", "name": "ref_email_staging", "alias": "ref_email_staging", "checksum": {"name": "sha256", "checksum": "6151cb26a00715efd996f76779a86f7984141597255d00b31d8bd2cdf6cb2443"}, "tags": [], "refs": [["ref_tp_email"]], "sources": [], "description": "Staging table for email replies, response times and statuses", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/refinement/ref_email_staging.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/refinement/ref_email_staging.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.8233538, "compiled_sql": "/* This is a staging table to create a logic for our email statuses and response times. \n*/\n\n\n\nSELECT DISTINCT *,\n       LEAD(email_direction) OVER (PARTITION BY case_id ORDER BY created_at ASC)            AS next_email_direction,\n       LEAD(created_at) OVER (PARTITION BY case_id ORDER BY created_at ASC)                 AS next_email_created_at,\n       --TODO: Currently only calculating the time between an Inbound and the next Outbound email, \n       --but doesn't take into consideration the possible Inbound emails before the latest Inbound email, \n       --if the merchant sent multiple emails.\n       CASE \n            WHEN email_direction = 'Inbound' AND next_email_direction = 'Outbound'\n            THEN TIMESTAMPDIFF('minute', created_at,next_email_created_at)\n       END                                                                                  AS response_time,\n       --TODO: This may not be necessary to keep, but could help identifying when we or the merchant sent two emails in a row.\n       CASE\n           WHEN email_direction = 'Inbound' AND next_email_direction = 'Inbound' THEN true\n           WHEN email_direction = 'Outbound' AND next_email_direction = 'Outbound' THEN true\n           ELSE false\n       END                                                                                  AS double_email,\n       --TODO: Currently only marks the email where the next touchpoint after is Outbound, \n       --and doesn't mark multiple emails from merchants also as Serviced when we finally answer.\n       CASE\n            WHEN email_direction = 'Outbound' THEN NULL\n            WHEN email_direction = 'Inbound' AND next_email_direction = 'Outbound' THEN 'Serviced'\n            WHEN email_direction = 'Inbound' AND next_email_direction = 'Inbound' THEN NULL\n       ELSE 'New'\n       END                                                                                  AS status,\n       --TODO: These fields should help us identifying who replied to the incoming email from the merchant.\n       LEAD(agent_department) OVER (PARTITION BY case_id ORDER BY created_at ASC)           AS replying_department,\n       LEAD(agent_location) OVER (PARTITION BY case_id ORDER BY created_at ASC)             AS replying_agent_location,\n       LEAD(agent_company) OVER (PARTITION BY case_id ORDER BY created_at ASC)              AS replying_agent_company\nFROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.ref_tp_email", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.ref_email_staging"}, "model.merchant_experience_unified_touchpoints.ref_tp_email": {"raw_sql": "/* This is a refinement table for tp_email, refining historical app and dashboard (SmartServiceApi) case data, \n   unioning it to emailmessage records.\n*/\n\n\n{{ config(materialized='table') }}\n\n/* App and Dashboard cases created by SmartServiceApi\n   These cases don't create an emailmessage record, therefore we have to separately union them as individual 'email' records.\n*/\n\nSELECT DISTINCT\n       cases.case_id                                                                     AS id,\n       cases.case_id                                                                     AS case_id,\n       contacts.merchant_id                                                              AS merchant_id,\n       contacts.merchant_code                                                            AS merchant_code,\n       CASE\n           WHEN cases.origin = 'ayuda@sumup.cl' THEN 'CL'\n           WHEN cases.origin = 'ayuda@sumup.co' THEN 'CO'\n           WHEN cases.origin = 'ayuda@sumup.pe' THEN 'PE'\n       ELSE COALESCE(contact_country.iso_code, case_country.iso_code)\n       END                                                                               AS country,\n       UPPER(languages.iso_code)                                                         AS language,\n       contacts.regulatory_environment_c                                                 AS regulatory_environment,\n       CASE\n           WHEN sm.is_small_merchant = TRUE THEN 'Small Merchant'\n           WHEN sm.is_small_merchant = FALSE THEN 'Micro/Nano Merchant'\n       ELSE 'Unknown'\n       END                                                                               AS merchant_type,\n       CASE\n           WHEN cases.origin = 'app_iOS' THEN 'App (iOS)'\n           WHEN cases.origin = 'app_Android' THEN 'App (Android)'\n           WHEN cases.origin = 'App - Case' THEN 'App'\n           WHEN cases.origin in ('Dashboard', 'Web Case Registration') THEN 'Dashboard'\n           ELSE 'Unknown'\n       END                                                                               AS origin,\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_reason,cases.reason)\n           ELSE cases.reason\n       END                                                                               AS reason,\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_detailed_reason,cases.detailed_reason)\n           ELSE cases.detailed_reason\n       END                                                                               AS detailed_reason,\n       email_reasons.reason_group                                                        AS reason_group,\n       NULL                                                                              AS comment,          --TODO:is Comment required anymore on a touchpoint level, or on a case level?\n       cases.subject                                                                     AS subject,\n       NULL                                                                              AS agent_company,    --TODO: not sure if we can take this from the Case object? Then it would be who closed the case\n       NULL                                                                              AS agent_location,   --TODO: not sure if we can take this from the Case object? Then it would be who closed the case\n       NULL                                                                              AS agent_department, --TODO: not sure if we can take this from the Case object? Then it would be who closed the case\n       FALSE                                                                             AS is_internal_case,\n       'Inbound'                                                                         AS email_direction,\n       CASE\n           WHEN rt.name IN ('Case BR') THEN cases.created_at\n           ELSE convert_timezone('Europe/Berlin', cases.created_at)\n       END                                                                               AS created_at\nFROM {{ ref('stg_sf_case') }} cases\n     JOIN  {{ ref('stg_record_type') }} AS rt ON rt.record_type_id = cases.record_type_id\nLEFT JOIN src_payment.countries AS case_country\n        ON cases.country = case_country.en_name --TODO: this hopefully can be remmoved, as this transformation should be done in the contacts view\nLEFT JOIN {{ ref('v_merchant_sf_contact') }} contacts\n        ON cases.contact_id = contacts.id\nLEFT JOIN src_payment.countries AS contact_country\n        ON contacts.country = contact_country.en_name\nLEFT JOIN {{ source('touchpoint_sources_external','languages') }} AS languages\n        ON cases.language = languages.en_name\nLEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_email') }} AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n            AND cases.detailed_reason = email_reasons.old_detailed_reason\nLEFT JOIN {{ ref('stg_small_merchant_segmentation') }} sm ON contacts.merchant_code = sm.merchant_code\n                   AND CASE\n                       WHEN date_trunc('month', cases.created_at)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', cases.created_at) - INTERVAL '1 month')= sm.month_transaction_date\n                                ELSE sm.month_transaction_date = date_trunc('month', cases.created_at)::date END\nWHERE 1=1\nAND cases.is_deleted = FALSE\nAND cases.created_by_id = '0052p00000AACZ4AAP' --Smart Service Api\n--AND cases.created_at < '2023-01-01' --TODO: Needs to be added once Case Centralisation goes live\nUNION ALL\n/*\n Email message records created by when we or the merchant sends us an email.\n*/\nSELECT DISTINCT\n       emails.email_id                                                                   AS id,\n       emails.parent_id                                                                  AS case_id,\n       contacts.merchant_id                                                              AS merchant_id,\n       contacts.merchant_code                                                            AS merchant_code,\n       CASE\n           WHEN emails.to_address = 'ayuda@sumup.cl' THEN 'CL'\n           WHEN emails.to_address = 'ayuda@sumup.co' THEN 'CO'\n           WHEN emails.to_address = 'ayuda@sumup.pe' THEN 'PE'\n       ELSE COALESCE(contact_country.iso_code, case_country.iso_code)\n       END                                                                               AS country,\n       UPPER(languages.iso_code)                                                         AS language,\n       contacts.regulatory_environment_c                                                 AS regulatory_environment,\n       CASE\n           WHEN sm.is_small_merchant = TRUE THEN 'Small Merchant'\n           WHEN sm.is_small_merchant = FALSE THEN 'Micro/Nano Merchant'\n       ELSE 'Unknown'\n       END                                                                               AS merchant_type,\n       CASE\n          WHEN emails.is_incoming = TRUE THEN emails.to_address\n       ELSE 'Internal'\n       END                                                                               AS  origin,       --TODO: Should we use Case Origin or the to_address_c information? I guess if we aggregate data per origin,\n                                                                                                           -- it is misleading if we use Case Origin for every incoming email.\n                                                                                                           -- The case can originate from Dashboard but every subsequent email will also have the Origin Dashboard,\n                                                                                                           -- but in truth the merchant was emailing us from their inbox.\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_reason,cases.reason)\n       ELSE cases.reason\n       END                                                                               AS reason,\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_detailed_reason,cases.detailed_reason)\n       ELSE cases.detailed_reason\n       END                                                                               AS detailed_reason,\n       email_reasons.reason_group                                                        AS reason_group,\n       NULL                                                                              AS comment,       --TODO: is Comment required anymore on a touchpoint level, or on a case level?\n       emails.subject                                                                    AS subject,\n       CASE\n            WHEN emails.is_incoming = false then users.agent_company\n       ELSE 'Merchant'\n       END                                                                               AS agent_company,\n       CASE WHEN emails.is_incoming = false then users.agent_country\n       ELSE 'Merchant'\n       END                                                                               AS agent_location,\n       CASE\n           WHEN emails.is_incoming = false then users.agent_current_department\n       ELSE 'Merchant'\n       END                                                                               AS agent_department,\n       CASE\n           WHEN cases.created_by_id not IN (\n                                            '00557000008WTxiAAG', -- System User\n                                            '0052p00000AACZ4AAP', -- SmartServiceAPI\n                                            '005D0000002BnYSIA0', -- Automated Process\n                                            '005D0000001rRU5IAM', -- Clement Luton\n                                            '005570000071PuFAAU', -- Case Api\n                                            '0055700000853caAAA', -- API Five9\n                                            '0052p00000A99boAAB', -- Salesforce API BonBon++\n                                            '005D0000003XE5iIAG', -- Salesforce API BonBon++OLD\n                                            '0052p00000A4Ke1AAF', -- Mulesoft\n                                            '0055700000850a7AAA'  -- Platform Integration User\n               )\n           THEN TRUE\n           ELSE FALSE\n       END                                                                               AS is_internal_case,\n       CASE\n           WHEN emails.is_incoming = FALSE THEN 'Outbound'\n           ELSE 'Inbound'\n       END                                                                               AS email_direction,\n                CASE\n           WHEN rt.name IN ('Case BR') THEN emails.created_at\n           ELSE convert_timezone('Europe/Berlin', emails.created_at)\n           END                                                                           AS created_at\nFROM {{ ref('stg_email_messages') }} emails\nLEFT JOIN {{ ref('stg_sf_case') }} cases\n        ON emails.parent_id = cases.case_id\n     JOIN  src_salesforce.record_type AS rt ON rt.id = cases.record_type_id\nLEFT JOIN {{ ref('v_merchant_sf_contact') }} contacts\n        ON cases.contact_id = contacts.id\nLEFT JOIN src_payment.countries AS case_country\n        ON cases.country = case_country.en_name --TODO: this hopefully can be remmoved, as this transformation should be done in the contacts view\nLEFT JOIN src_payment.countries AS contact_country\n        ON contacts.country = contact_country.en_name --TODO: this hopefully can be remmoved, as this transformation should be done in the contacts view\nLEFT JOIN {{ source('touchpoint_sources_external','languages') }} AS languages\n        ON cases.language = languages.en_name\nLEFT JOIN  {{ source('touchpoint_sources_internal','tp_reasons_email') }} AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n            AND cases.detailed_reason = email_reasons.old_detailed_reason\nLEFT JOIN  {{ ref('v_user') }} users\n          ON emails.created_by_id = users.agent_id\nLEFT JOIN {{ ref('stg_small_merchant_segmentation') }} sm ON contacts.merchant_code = sm.merchant_code\n                   AND CASE\n                       WHEN date_trunc('month', cases.created_at)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', cases.created_at) - INTERVAL '1 month')= sm.month_transaction_date\n                                ELSE sm.month_transaction_date = date_trunc('month', cases.created_at)::date END\nWHERE 1=1\nAND emails.translated_message_id IS NULL --EXCLUDING EMAIL MESSAGES CREATED BY THE TRANSLATION TOOL\nAND emails.is_private_draft = FALSE\nAND emails.is_deleted = FALSE\nAND \n    NOT (emails.from_address LIKE ANY('no-reply@sumup%', \n                                      '%+api@sumup.com', \n                                      '%+bonbonapi@sumup.com', \n                                      'mailer-daemon@sumup.com',\n                                      'naoresponda@payleven.com.br',\n                                      'noreply@natterbox.com',\n                                      'sfdc.user@sumup.com',\n                                      'api@sumup.com',\n                                      'api@debitoor.com'))\nAND cases.is_deleted = FALSE\nAND\n  (rt.name IN (\n    'Case BR'\n    , 'Case EU'\n    , 'CNP Payment Requests'\n    , 'GdprPurged'\n    , 'Invoicing EU'\n    , 'Merchant Complaint'\n    , 'Non-Merchant Complaint'\n    , 'Shoplo EU'\n    , 'Support'\n    , 'Case Latam')\n    OR rt.name IS NULL)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.touchpoint_sources_external.languages", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email", "model.merchant_experience_unified_touchpoints.stg_sf_case", "model.merchant_experience_unified_touchpoints.stg_record_type", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation", "model.merchant_experience_unified_touchpoints.stg_email_messages", "model.merchant_experience_unified_touchpoints.stg_sf_case", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "model.merchant_experience_unified_touchpoints.v_user", "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "refinement", "ref_tp_email"], "unique_id": "model.merchant_experience_unified_touchpoints.ref_tp_email", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "refinement/ref_tp_email.sql", "original_file_path": "models/refinement/ref_tp_email.sql", "name": "ref_tp_email", "alias": "ref_tp_email", "checksum": {"name": "sha256", "checksum": "e08fd1eb104c206fd22380f92120b77314a7965fa078bb572c10408884253d42"}, "tags": [], "refs": [["stg_sf_case"], ["stg_record_type"], ["v_merchant_sf_contact"], ["stg_small_merchant_segmentation"], ["stg_email_messages"], ["stg_sf_case"], ["v_merchant_sf_contact"], ["v_user"], ["stg_small_merchant_segmentation"]], "sources": [["touchpoint_sources_external", "languages"], ["touchpoint_sources_internal", "tp_reasons_email"]], "description": "Refinement table to union app/dashboard cases created by smartserviceapi and emailmessages", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/refinement/ref_tp_email.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/refinement/ref_tp_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.8231378, "compiled_sql": "/* This is a refinement table for tp_email, refining historical app and dashboard (SmartServiceApi) case data, \n   unioning it to emailmessage records.\n*/\n\n\n\n\n/* App and Dashboard cases created by SmartServiceApi\n   These cases don't create an emailmessage record, therefore we have to separately union them as individual 'email' records.\n*/\n\nSELECT DISTINCT\n       cases.case_id                                                                     AS id,\n       cases.case_id                                                                     AS case_id,\n       contacts.merchant_id                                                              AS merchant_id,\n       contacts.merchant_code                                                            AS merchant_code,\n       CASE\n           WHEN cases.origin = 'ayuda@sumup.cl' THEN 'CL'\n           WHEN cases.origin = 'ayuda@sumup.co' THEN 'CO'\n           WHEN cases.origin = 'ayuda@sumup.pe' THEN 'PE'\n       ELSE COALESCE(contact_country.iso_code, case_country.iso_code)\n       END                                                                               AS country,\n       UPPER(languages.iso_code)                                                         AS language,\n       contacts.regulatory_environment_c                                                 AS regulatory_environment,\n       CASE\n           WHEN sm.is_small_merchant = TRUE THEN 'Small Merchant'\n           WHEN sm.is_small_merchant = FALSE THEN 'Micro/Nano Merchant'\n       ELSE 'Unknown'\n       END                                                                               AS merchant_type,\n       CASE\n           WHEN cases.origin = 'app_iOS' THEN 'App (iOS)'\n           WHEN cases.origin = 'app_Android' THEN 'App (Android)'\n           WHEN cases.origin = 'App - Case' THEN 'App'\n           WHEN cases.origin in ('Dashboard', 'Web Case Registration') THEN 'Dashboard'\n           ELSE 'Unknown'\n       END                                                                               AS origin,\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_reason,cases.reason)\n           ELSE cases.reason\n       END                                                                               AS reason,\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_detailed_reason,cases.detailed_reason)\n           ELSE cases.detailed_reason\n       END                                                                               AS detailed_reason,\n       email_reasons.reason_group                                                        AS reason_group,\n       NULL                                                                              AS comment,          --TODO:is Comment required anymore on a touchpoint level, or on a case level?\n       cases.subject                                                                     AS subject,\n       NULL                                                                              AS agent_company,    --TODO: not sure if we can take this from the Case object? Then it would be who closed the case\n       NULL                                                                              AS agent_location,   --TODO: not sure if we can take this from the Case object? Then it would be who closed the case\n       NULL                                                                              AS agent_department, --TODO: not sure if we can take this from the Case object? Then it would be who closed the case\n       FALSE                                                                             AS is_internal_case,\n       'Inbound'                                                                         AS email_direction,\n       CASE\n           WHEN rt.name IN ('Case BR') THEN cases.created_at\n           ELSE convert_timezone('Europe/Berlin', cases.created_at)\n       END                                                                               AS created_at\nFROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_sf_case cases\n     JOIN  SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_record_type AS rt ON rt.record_type_id = cases.record_type_id\nLEFT JOIN src_payment.countries AS case_country\n        ON cases.country = case_country.en_name --TODO: this hopefully can be remmoved, as this transformation should be done in the contacts view\nLEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact contacts\n        ON cases.contact_id = contacts.id\nLEFT JOIN src_payment.countries AS contact_country\n        ON contacts.country = contact_country.en_name\nLEFT JOIN SUMUP_DWH_PROD.SRC_PAYMENT.languages AS languages\n        ON cases.language = languages.en_name\nLEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_email AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n            AND cases.detailed_reason = email_reasons.old_detailed_reason\nLEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_small_merchant_segmentation sm ON contacts.merchant_code = sm.merchant_code\n                   AND CASE\n                       WHEN date_trunc('month', cases.created_at)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', cases.created_at) - INTERVAL '1 month')= sm.month_transaction_date\n                                ELSE sm.month_transaction_date = date_trunc('month', cases.created_at)::date END\nWHERE 1=1\nAND cases.is_deleted = FALSE\nAND cases.created_by_id = '0052p00000AACZ4AAP' --Smart Service Api\n--AND cases.created_at < '2023-01-01' --TODO: Needs to be added once Case Centralisation goes live\nUNION ALL\n/*\n Email message records created by when we or the merchant sends us an email.\n*/\nSELECT DISTINCT\n       emails.email_id                                                                   AS id,\n       emails.parent_id                                                                  AS case_id,\n       contacts.merchant_id                                                              AS merchant_id,\n       contacts.merchant_code                                                            AS merchant_code,\n       CASE\n           WHEN emails.to_address = 'ayuda@sumup.cl' THEN 'CL'\n           WHEN emails.to_address = 'ayuda@sumup.co' THEN 'CO'\n           WHEN emails.to_address = 'ayuda@sumup.pe' THEN 'PE'\n       ELSE COALESCE(contact_country.iso_code, case_country.iso_code)\n       END                                                                               AS country,\n       UPPER(languages.iso_code)                                                         AS language,\n       contacts.regulatory_environment_c                                                 AS regulatory_environment,\n       CASE\n           WHEN sm.is_small_merchant = TRUE THEN 'Small Merchant'\n           WHEN sm.is_small_merchant = FALSE THEN 'Micro/Nano Merchant'\n       ELSE 'Unknown'\n       END                                                                               AS merchant_type,\n       CASE\n          WHEN emails.is_incoming = TRUE THEN emails.to_address\n       ELSE 'Internal'\n       END                                                                               AS  origin,       --TODO: Should we use Case Origin or the to_address_c information? I guess if we aggregate data per origin,\n                                                                                                           -- it is misleading if we use Case Origin for every incoming email.\n                                                                                                           -- The case can originate from Dashboard but every subsequent email will also have the Origin Dashboard,\n                                                                                                           -- but in truth the merchant was emailing us from their inbox.\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_reason,cases.reason)\n       ELSE cases.reason\n       END                                                                               AS reason,\n       CASE\n           WHEN rt.name IN ('Case BR')\n           THEN COALESCE(email_reasons.old_detailed_reason,cases.detailed_reason)\n       ELSE cases.detailed_reason\n       END                                                                               AS detailed_reason,\n       email_reasons.reason_group                                                        AS reason_group,\n       NULL                                                                              AS comment,       --TODO: is Comment required anymore on a touchpoint level, or on a case level?\n       emails.subject                                                                    AS subject,\n       CASE\n            WHEN emails.is_incoming = false then users.agent_company\n       ELSE 'Merchant'\n       END                                                                               AS agent_company,\n       CASE WHEN emails.is_incoming = false then users.agent_country\n       ELSE 'Merchant'\n       END                                                                               AS agent_location,\n       CASE\n           WHEN emails.is_incoming = false then users.agent_current_department\n       ELSE 'Merchant'\n       END                                                                               AS agent_department,\n       CASE\n           WHEN cases.created_by_id not IN (\n                                            '00557000008WTxiAAG', -- System User\n                                            '0052p00000AACZ4AAP', -- SmartServiceAPI\n                                            '005D0000002BnYSIA0', -- Automated Process\n                                            '005D0000001rRU5IAM', -- Clement Luton\n                                            '005570000071PuFAAU', -- Case Api\n                                            '0055700000853caAAA', -- API Five9\n                                            '0052p00000A99boAAB', -- Salesforce API BonBon++\n                                            '005D0000003XE5iIAG', -- Salesforce API BonBon++OLD\n                                            '0052p00000A4Ke1AAF', -- Mulesoft\n                                            '0055700000850a7AAA'  -- Platform Integration User\n               )\n           THEN TRUE\n           ELSE FALSE\n       END                                                                               AS is_internal_case,\n       CASE\n           WHEN emails.is_incoming = FALSE THEN 'Outbound'\n           ELSE 'Inbound'\n       END                                                                               AS email_direction,\n                CASE\n           WHEN rt.name IN ('Case BR') THEN emails.created_at\n           ELSE convert_timezone('Europe/Berlin', emails.created_at)\n           END                                                                           AS created_at\nFROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_email_messages emails\nLEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_sf_case cases\n        ON emails.parent_id = cases.case_id\n     JOIN  src_salesforce.record_type AS rt ON rt.id = cases.record_type_id\nLEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact contacts\n        ON cases.contact_id = contacts.id\nLEFT JOIN src_payment.countries AS case_country\n        ON cases.country = case_country.en_name --TODO: this hopefully can be remmoved, as this transformation should be done in the contacts view\nLEFT JOIN src_payment.countries AS contact_country\n        ON contacts.country = contact_country.en_name --TODO: this hopefully can be remmoved, as this transformation should be done in the contacts view\nLEFT JOIN SUMUP_DWH_PROD.SRC_PAYMENT.languages AS languages\n        ON cases.language = languages.en_name\nLEFT JOIN  SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_email AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n            AND cases.detailed_reason = email_reasons.old_detailed_reason\nLEFT JOIN  SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_user users\n          ON emails.created_by_id = users.agent_id\nLEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.stg_small_merchant_segmentation sm ON contacts.merchant_code = sm.merchant_code\n                   AND CASE\n                       WHEN date_trunc('month', cases.created_at)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', cases.created_at) - INTERVAL '1 month')= sm.month_transaction_date\n                                ELSE sm.month_transaction_date = date_trunc('month', cases.created_at)::date END\nWHERE 1=1\nAND emails.translated_message_id IS NULL --EXCLUDING EMAIL MESSAGES CREATED BY THE TRANSLATION TOOL\nAND emails.is_private_draft = FALSE\nAND emails.is_deleted = FALSE\nAND \n    NOT (emails.from_address LIKE ANY('no-reply@sumup%', \n                                      '%+api@sumup.com', \n                                      '%+bonbonapi@sumup.com', \n                                      'mailer-daemon@sumup.com',\n                                      'naoresponda@payleven.com.br',\n                                      'noreply@natterbox.com',\n                                      'sfdc.user@sumup.com',\n                                      'api@sumup.com',\n                                      'api@debitoor.com'))\nAND cases.is_deleted = FALSE\nAND\n  (rt.name IN (\n    'Case BR'\n    , 'Case EU'\n    , 'CNP Payment Requests'\n    , 'GdprPurged'\n    , 'Invoicing EU'\n    , 'Merchant Complaint'\n    , 'Non-Merchant Complaint'\n    , 'Shoplo EU'\n    , 'Support'\n    , 'Case Latam')\n    OR rt.name IS NULL)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.ref_tp_email"}, "model.merchant_experience_unified_touchpoints.five9_id_domain_mapping": {"raw_sql": "{{ config(materialized='table') }}\n\nWITH\n    EU_TABLE AS (\n    SELECT TIMESTAMP                                                          AS timestamp,\n           CALL_ID                                                            AS call_id,\n           RIGHT(ANI, 10)                                                     AS ani, --we look at the last 10 digits as both domains do not have the same ANI structure \n           ROW_NUMBER() OVER (PARTITION BY RIGHT(ANI, 10) ORDER BY TIMESTAMP) AS call_rank -- we rank the row per phone number and order by timestamp in order to join on the rank. \n                                                                                           -- we need such rank because the timestamp are different between domains.\n    FROM {{ ref('STG_FIVE9_EU') }}\n    WHERE 1 = 1\n      AND CAMPAIGN = 'SUP - US transfer to CNX' -- US calls are always transferred to that specific campaign\n    ORDER BY 1),\n    US_TABLE AS (\n    SELECT TIMESTAMP                                                          AS timestamp,\n           CALL_ID                                                            AS call_id,\n           RIGHT(ANI, 10)                                                     AS ani, --we look at the last 10 digits as both domains do not have the same ANI structure\n           ROW_NUMBER() OVER (PARTITION BY RIGHT(ANI, 10) ORDER BY TIMESTAMP) AS call_rank -- we rank the row per phone number and order by timestamp in order to join on the rank. \n                                                                                           -- we need such rank because the timestamp are different between domains.\n    FROM {{ ref('STG_FIVE9_ESLATAM_US') }}\n    WHERE 1 = 1\n      AND TIMESTAMP > '2023-01-20'\n      AND DISPOSITION = 'Transferred to CNX EU' -- The system always add this disposition when a call is transferred to EU.\n    ORDER BY 1)\nSELECT EU.CALL_ID AS eu_call_id,\n       US.CALL_ID AS us_call_id\nFROM EU_TABLE EU\n         LEFT JOIN US_TABLE US\n                   ON EU.CALL_RANK = US.CALL_RANK\n                       AND EU.ANI = US.ANI\n                       AND EU.TIMESTAMP::DATE = US.TIMESTAMP::DATE -- we cannot join on timestamp as the time is different", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "refinement", "five9", "five9_id_domain_mapping"], "unique_id": "model.merchant_experience_unified_touchpoints.five9_id_domain_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "refinement/five9/five9_id_domain_mapping.sql", "original_file_path": "models/refinement/five9/five9_id_domain_mapping.sql", "name": "five9_id_domain_mapping", "alias": "five9_id_domain_mapping", "checksum": {"name": "sha256", "checksum": "07122427ad446ae5bf6cc9ef08abfad3b57136c1940fc9f638411247d004e659"}, "tags": [], "refs": [["STG_FIVE9_EU"], ["STG_FIVE9_ESLATAM_US"]], "sources": [], "description": "This model is created in order to link the US calls (creataed on the US Five9 domains) that are transferred to the EU domain in CNX. When the US domain transfers calls to the EU domain, it would create a new call with different call_id and different session_id. The main purpose of this model is to be able to join both models to get EU agent_email for the US CSAT", "columns": {"eu_call_id": {"name": "eu_call_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "us_call_id": {"name": "us_call_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/refinement/five9/five9_id_domain_mapping.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/refinement/five9/five9_id_domain_mapping.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.8301709, "compiled_sql": "\n\nWITH\n    EU_TABLE AS (\n    SELECT TIMESTAMP                                                          AS timestamp,\n           CALL_ID                                                            AS call_id,\n           RIGHT(ANI, 10)                                                     AS ani, --we look at the last 10 digits as both domains do not have the same ANI structure \n           ROW_NUMBER() OVER (PARTITION BY RIGHT(ANI, 10) ORDER BY TIMESTAMP) AS call_rank -- we rank the row per phone number and order by timestamp in order to join on the rank. \n                                                                                           -- we need such rank because the timestamp are different between domains.\n    FROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_EU\n    WHERE 1 = 1\n      AND CAMPAIGN = 'SUP - US transfer to CNX' -- US calls are always transferred to that specific campaign\n    ORDER BY 1),\n    US_TABLE AS (\n    SELECT TIMESTAMP                                                          AS timestamp,\n           CALL_ID                                                            AS call_id,\n           RIGHT(ANI, 10)                                                     AS ani, --we look at the last 10 digits as both domains do not have the same ANI structure\n           ROW_NUMBER() OVER (PARTITION BY RIGHT(ANI, 10) ORDER BY TIMESTAMP) AS call_rank -- we rank the row per phone number and order by timestamp in order to join on the rank. \n                                                                                           -- we need such rank because the timestamp are different between domains.\n    FROM SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.STG_FIVE9_ESLATAM_US\n    WHERE 1 = 1\n      AND TIMESTAMP > '2023-01-20'\n      AND DISPOSITION = 'Transferred to CNX EU' -- The system always add this disposition when a call is transferred to EU.\n    ORDER BY 1)\nSELECT EU.CALL_ID AS eu_call_id,\n       US.CALL_ID AS us_call_id\nFROM EU_TABLE EU\n         LEFT JOIN US_TABLE US\n                   ON EU.CALL_RANK = US.CALL_RANK\n                       AND EU.ANI = US.ANI\n                       AND EU.TIMESTAMP::DATE = US.TIMESTAMP::DATE -- we cannot join on timestamp as the time is different", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.five9_id_domain_mapping"}, "analysis.merchant_experience_unified_touchpoints.case_staging": {"raw_sql": "/*\n * Case staging table.\n */\n\n{{ config(materialized='table') }}\n\nSELECT\n    id AS tp_id,\n    merchant_id,\n    created_date, \n    status,\n    language,\n    country,    \n    reason,\n    detailed_reason,\n    handling_time,\n    channel,\n    agent_type,\n    agent_department,\n    agent_company,\n    lead(reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) AS next_reason,\n    lead(detailed_reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) AS next_detailed_reason,\n    lead(created_date) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) AS next_created_date\nFROM\n    {{ ref('tp_unified') }} tp\nWHERE created_date > '2020-01-01 00:00:00'\nAND country != 'BR'", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": ["model.merchant_experience_unified_touchpoints.tp_unified"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "analysis", "archive", "case_staging"], "unique_id": "analysis.merchant_experience_unified_touchpoints.case_staging", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "analysis/archive/case_staging.sql", "original_file_path": "analyses/archive/case_staging.sql", "name": "case_staging", "alias": "case_staging", "checksum": {"name": "sha256", "checksum": "2491f83b2ffaf19ead66f3b66b58242f6592015d0883ffc86caaf9049bca26a6"}, "tags": [], "refs": [["tp_unified"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/analyses/archive/case_staging.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676305531.7792995, "compiled_sql": "/*\n * Case staging table.\n */\n\n\n\nSELECT\n    id AS tp_id,\n    merchant_id,\n    created_date, \n    status,\n    language,\n    country,    \n    reason,\n    detailed_reason,\n    handling_time,\n    channel,\n    agent_type,\n    agent_department,\n    agent_company,\n    lead(reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) AS next_reason,\n    lead(detailed_reason) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) AS next_detailed_reason,\n    lead(created_date) OVER (PARTITION BY merchant_id ORDER BY created_date ASC) AS next_created_date\nFROM\n    SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified tp\nWHERE created_date > '2020-01-01 00:00:00'\nAND country != 'BR'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.merchant_experience_unified_touchpoints.not_null_tp_call_id.af7d3f6c2f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_tp_call_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_tp_call_id.af7d3f6c2f", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_tp_call_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_tp_call_id", "alias": "not_null_tp_call_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_call"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_tp_call_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.7920747, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_call\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_call"}, "test.merchant_experience_unified_touchpoints.not_null_tp_unified_id.0c4e915190": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_unified')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_unified"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_tp_unified_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_tp_unified_id.0c4e915190", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_tp_unified_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_tp_unified_id", "alias": "not_null_tp_unified_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_unified"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_tp_unified_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.7972877, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_unified\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_unified"}, "test.merchant_experience_unified_touchpoints.unique_tp_chat_id.53e9f44142": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_chat')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_chat"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "unique_tp_chat_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_tp_chat_id.53e9f44142", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_tp_chat_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "unique_tp_chat_id", "alias": "unique_tp_chat_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_chat"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/unique_tp_chat_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8003466, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_chat"}, "test.merchant_experience_unified_touchpoints.not_null_tp_chat_id.a7e82fb398": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_chat')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_chat"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_tp_chat_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_tp_chat_id.a7e82fb398", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_tp_chat_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_tp_chat_id", "alias": "not_null_tp_chat_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_chat"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_tp_chat_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8042128, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_chat\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_chat"}, "test.merchant_experience_unified_touchpoints.unique_tp_facebook_id.7e27a2f707": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_facebook')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_facebook"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "unique_tp_facebook_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_tp_facebook_id.7e27a2f707", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_tp_facebook_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "unique_tp_facebook_id", "alias": "unique_tp_facebook_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_facebook"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/unique_tp_facebook_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8102512, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_facebook\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_facebook"}, "test.merchant_experience_unified_touchpoints.not_null_tp_facebook_id.c859ab7900": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_facebook')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_facebook"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_tp_facebook_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_tp_facebook_id.c859ab7900", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_tp_facebook_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_tp_facebook_id", "alias": "not_null_tp_facebook_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_facebook"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_tp_facebook_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8130805, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_facebook\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_facebook"}, "test.merchant_experience_unified_touchpoints.not_null_new_tp_email_id.92acbc0de8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('new_tp_email')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.new_tp_email"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_new_tp_email_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_new_tp_email_id.92acbc0de8", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_new_tp_email_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_new_tp_email_id", "alias": "not_null_new_tp_email_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["new_tp_email"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_new_tp_email_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8162527, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.new_tp_email\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.new_tp_email"}, "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_eu_call_id.bb898e4f55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "eu_call_id", "model": "{{ get_where_subquery(ref('five9_id_domain_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "refinement", "five9", "not_null_five9_id_domain_mapping_eu_call_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_eu_call_id.bb898e4f55", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_five9_id_domain_mapping_eu_call_id.sql", "original_file_path": "models/refinement/five9/five9_id_domain_mapping.yml", "name": "not_null_five9_id_domain_mapping_eu_call_id", "alias": "not_null_five9_id_domain_mapping_eu_call_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["five9_id_domain_mapping"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/refinement/five9/five9_id_domain_mapping.yml/not_null_five9_id_domain_mapping_eu_call_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8306851, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.five9_id_domain_mapping\nwhere eu_call_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "eu_call_id", "file_key_name": "models.five9_id_domain_mapping"}, "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_eu_call_id.393ffdaf6c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "eu_call_id", "model": "{{ get_where_subquery(ref('five9_id_domain_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "refinement", "five9", "unique_five9_id_domain_mapping_eu_call_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_eu_call_id.393ffdaf6c", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_five9_id_domain_mapping_eu_call_id.sql", "original_file_path": "models/refinement/five9/five9_id_domain_mapping.yml", "name": "unique_five9_id_domain_mapping_eu_call_id", "alias": "unique_five9_id_domain_mapping_eu_call_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["five9_id_domain_mapping"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/refinement/five9/five9_id_domain_mapping.yml/unique_five9_id_domain_mapping_eu_call_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8338017, "compiled_sql": "\n    \n    \n\nselect\n    eu_call_id as unique_field,\n    count(*) as n_records\n\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.five9_id_domain_mapping\nwhere eu_call_id is not null\ngroup by eu_call_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "eu_call_id", "file_key_name": "models.five9_id_domain_mapping"}, "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_us_call_id.dc1b987733": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "us_call_id", "model": "{{ get_where_subquery(ref('five9_id_domain_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "refinement", "five9", "not_null_five9_id_domain_mapping_us_call_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_us_call_id.dc1b987733", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_five9_id_domain_mapping_us_call_id.sql", "original_file_path": "models/refinement/five9/five9_id_domain_mapping.yml", "name": "not_null_five9_id_domain_mapping_us_call_id", "alias": "not_null_five9_id_domain_mapping_us_call_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["five9_id_domain_mapping"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/refinement/five9/five9_id_domain_mapping.yml/not_null_five9_id_domain_mapping_us_call_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1676305531.83701, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.five9_id_domain_mapping\nwhere us_call_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "us_call_id", "file_key_name": "models.five9_id_domain_mapping"}, "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_us_call_id.cab5955b58": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "us_call_id", "model": "{{ get_where_subquery(ref('five9_id_domain_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "refinement", "five9", "unique_five9_id_domain_mapping_us_call_id"], "unique_id": "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_us_call_id.cab5955b58", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unique_five9_id_domain_mapping_us_call_id.sql", "original_file_path": "models/refinement/five9/five9_id_domain_mapping.yml", "name": "unique_five9_id_domain_mapping_us_call_id", "alias": "unique_five9_id_domain_mapping_us_call_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["five9_id_domain_mapping"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/refinement/five9/five9_id_domain_mapping.yml/unique_five9_id_domain_mapping_us_call_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676305531.8399065, "compiled_sql": "\n    \n    \n\nselect\n    us_call_id as unique_field,\n    count(*) as n_records\n\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.five9_id_domain_mapping\nwhere us_call_id is not null\ngroup by us_call_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "us_call_id", "file_key_name": "models.five9_id_domain_mapping"}, "model.merchant_experience_unified_touchpoints.tp_email": {"raw_sql": "/*\n* Email touchpoints table\n*/\n\n{{ config(materialized='table') }}\n\nSELECT DISTINCT cases.id::text                                                            AS id,\n       NULL                                                                          as case_id,\n       CASE\n           WHEN rt.name IN ('Case BR') THEN cases.created_date\n           ELSE convert_timezone('Europe/Berlin', cases.created_date)\n           END                                                                       AS created_date,\n       CASE\n           WHEN status IN ('Resolved', 'Closed - Resolved') THEN 'Serviced'\n           WHEN status IN ('Closed - Not Resolved') THEN 'Abandoned'\n           WHEN status IN ('Closed') THEN 'Closed'\n           ELSE 'Accepted'\n           END                                                                       AS status,\n       merch.merchant_id                                                         AS merchant_id,\n       merch.merchant_code                                                      AS merchant_code,\n       CASE \n            WHEN rt.name in ('Case BR')\n            THEN coalesce(email_reasons.old_reason,cases.reason)\n            ELSE email_reasons.reason\n            END                                                                      AS reason,\n       CASE \n            WHEN rt.name IN ('Case BR')\n            THEN coalesce(email_reasons.old_detailed_reason,cases.detailed_case_reason_c)\n            ELSE email_reasons.detailed_reason\n            END                                                                      AS detailed_reason,\n       email_reasons.reason_group                                                    AS reason_group,\n       UPPER(lm.language_code)                                                       AS language,\n       CASE\n           WHEN origin = 'ayuda@sumup.cl' THEN 'CL'\n           WHEN origin = 'ayuda@sumup.co' THEN 'CO'\n           WHEN origin = 'ayuda@sumup.pe' THEN 'PE'\n           ELSE rm.country_code\n       END                                                                           AS country,\n       rm.region AS region,\n       CASE\n           WHEN origin = 'app_iOS' THEN 'App (iOS)'\n           WHEN origin = 'app_Android' THEN 'App (Android)'\n           WHEN origin = 'App - Case' THEN 'App'\n           WHEN origin in ('Dashboard', 'Web Case Registration') THEN 'Dashboard'\n           WHEN origin like 'Support%' OR origin like 'ayuda@%' THEN 'Support Email'\n           WHEN origin like 'Onboarding%' THEN 'Onboarding Email'\n           WHEN origin like 'Internal%' THEN 'Internal'\n           ELSE 'Unknown'\n       END                                                                          AS  origin,\n       CASE\n        --    WHEN cases.created_date < '2021-01-01 00:00:00' THEN cases.first_response_time_c\n           WHEN cases.created_date < '2021-01-01 00:00:00' THEN NULL\n           ELSE frt.first_response_time\n           END                                                                       AS first_response_time,\n       frt.first_response_team                                                       AS first_response_team,\n       frt.first_response_timestamp                                                  AS first_response_timestamp,\n       timestampdiff(second, cases.created_date, cases.closed_date)                  AS total_time,\n       CASE\n           WHEN users.email LIKE '%concentrix%' THEN 'CNX'\n           WHEN users.email LIKE '%teleperformance%' THEN 'TLP'\n           WHEN users.email LIKE '%terceiro%' THEN 'TRC'\n           ELSE 'SUMUP'\n           END                                                                       AS agent_company,\n       users.country_c                                                               AS agent_location,\n       users.department                                                              AS agent_department,\n       replace(regexp_replace(cases.reason_comment_c, '\\r|\\n', ''), ',', '')    AS comment,\n       cases.subject                                                                 AS subject,\n       contact.regulatory_environment_c                                              AS regulatory_environment,\n       CASE\n           WHEN cases.CREATED_BY_ID not in (\n                                            '00557000008WTxiAAG', -- System User\n                                            '0052p00000AACZ4AAP' -- SmartServiceAPI\n               )\n           THEN TRUE\n           ELSE FALSE\n           END                                                                       AS is_internal_case,\n           CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM {{ source('salesforce', 'case') }} cases\n    JOIN {{ source('salesforce', 'record_type') }} as rt\n        ON rt.id = cases.record_type_id\n    LEFT JOIN {{ source('salesforce', 'user') }} users\n        ON cases.closed_by_c = users.id\n    LEFT JOIN {{ source('salesforce', 'contact') }}\n        ON cases.CONTACT_ID = contact.ID\n    LEFT JOIN {{ source('merchants_olap', 'v_m_dim_merchant') }} merch\n        ON merch.merchant_code = contact.MERCHANT_CODE_C\n    LEFT JOIN {{ source('touchpoint_sources_internal','region_mapping') }} rm\n        -- lots of null values using cases.case_origin_country_c only(especially general = >1.5million unmapped countries)\n        ON  COALESCE(contact.BACKEND_MERCHANT_COUNTRY_C, cases.case_origin_country_c) = rm.country_name\n    LEFT JOIN {{ source('touchpoint_sources_internal','language_mapping') }} lm\n        ON cases.language_c = lm.language_name\n    LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_email') }} AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n            AND cases.detailed_case_reason_c = email_reasons.old_detailed_reason\n    LEFT JOIN {{ ref ('v_email_first_response') }} AS frt\n        ON cases.id=frt.case_id\n    LEFT JOIN {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }} sm ON merch.merchant_code = sm.MERCHANT_CODE\n                   AND CASE\n                       WHEN date_trunc('month', cases.created_date)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', cases.created_date) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', cases.created_date)::date END\nWHERE\n  rt.name IN (\n    'Case BR'\n    , 'Case EU'\n    , 'CNP Payment Requests'\n    , 'GdprPurged'\n    , 'Invoicing EU'\n    , 'Merchant Complaint'\n    , 'Non-Merchant Complaint'\n    , 'Shoplo EU'\n    , 'Support'\n    , 'Case Latam'\n    )\n-- Excluding Duplicates to try and test if this is causing the discrepancies of our resolution rates between PG and SF\n  AND (cases.DETAILED_CASE_REASON_C NOT IN ('No-Reply'\n    , 'Duplicate'\n    , 'Spam') or cases.DETAILED_CASE_REASON_C is null)\n-- Exclude BR cases created from other channels.\n  AND cases.origin NOT IN ('Auto Case'\n    , 'Five9'\n    , 'whatsapp')\n  AND (cases.subject != 'BR WhatsApp Support'\n   OR cases.subject IS NULL)\n  AND cases.IS_DELETED = FALSE\nORDER BY\n    created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.language_mapping", "source.merchant_experience_unified_touchpoints.salesforce.contact", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.salesforce.record_type", "source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "model.merchant_experience_unified_touchpoints.v_email_first_response"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_email"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_email", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_email.sql", "original_file_path": "models/unified_touchpoints/tp_email.sql", "name": "tp_email", "alias": "tp_email", "checksum": {"name": "sha256", "checksum": "ece38c7edb2237ea79aac4eb9b8078b245b0f66e2e8872747d07f9494bbf9294"}, "tags": [], "refs": [["v_email_first_response"]], "sources": [["touchpoint_sources_internal", "language_mapping"], ["salesforce", "contact"], ["merchant_segmentation", "ae_t_small_merchant_segmentation"], ["salesforce", "record_type"], ["salesforce", "user"], ["merchants_olap", "v_m_dim_merchant"], ["salesforce", "case"], ["touchpoint_sources_internal", "tp_reasons_email"], ["touchpoint_sources_internal", "region_mapping"]], "description": "Email touchpoints table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676306385.1998038, "compiled_sql": "/*\n* Email touchpoints table\n*/\n\n\n\nSELECT DISTINCT cases.id::text                                                            AS id,\n       NULL                                                                          as case_id,\n       CASE\n           WHEN rt.name IN ('Case BR') THEN cases.created_date\n           ELSE convert_timezone('Europe/Berlin', cases.created_date)\n           END                                                                       AS created_date,\n       CASE\n           WHEN status IN ('Resolved', 'Closed - Resolved') THEN 'Serviced'\n           WHEN status IN ('Closed - Not Resolved') THEN 'Abandoned'\n           WHEN status IN ('Closed') THEN 'Closed'\n           ELSE 'Accepted'\n           END                                                                       AS status,\n       merch.merchant_id                                                         AS merchant_id,\n       merch.merchant_code                                                      AS merchant_code,\n       CASE \n            WHEN rt.name in ('Case BR')\n            THEN coalesce(email_reasons.old_reason,cases.reason)\n            ELSE email_reasons.reason\n            END                                                                      AS reason,\n       CASE \n            WHEN rt.name IN ('Case BR')\n            THEN coalesce(email_reasons.old_detailed_reason,cases.detailed_case_reason_c)\n            ELSE email_reasons.detailed_reason\n            END                                                                      AS detailed_reason,\n       email_reasons.reason_group                                                    AS reason_group,\n       UPPER(lm.language_code)                                                       AS language,\n       CASE\n           WHEN origin = 'ayuda@sumup.cl' THEN 'CL'\n           WHEN origin = 'ayuda@sumup.co' THEN 'CO'\n           WHEN origin = 'ayuda@sumup.pe' THEN 'PE'\n           ELSE rm.country_code\n       END                                                                           AS country,\n       rm.region AS region,\n       CASE\n           WHEN origin = 'app_iOS' THEN 'App (iOS)'\n           WHEN origin = 'app_Android' THEN 'App (Android)'\n           WHEN origin = 'App - Case' THEN 'App'\n           WHEN origin in ('Dashboard', 'Web Case Registration') THEN 'Dashboard'\n           WHEN origin like 'Support%' OR origin like 'ayuda@%' THEN 'Support Email'\n           WHEN origin like 'Onboarding%' THEN 'Onboarding Email'\n           WHEN origin like 'Internal%' THEN 'Internal'\n           ELSE 'Unknown'\n       END                                                                          AS  origin,\n       CASE\n        --    WHEN cases.created_date < '2021-01-01 00:00:00' THEN cases.first_response_time_c\n           WHEN cases.created_date < '2021-01-01 00:00:00' THEN NULL\n           ELSE frt.first_response_time\n           END                                                                       AS first_response_time,\n       frt.first_response_team                                                       AS first_response_team,\n       frt.first_response_timestamp                                                  AS first_response_timestamp,\n       timestampdiff(second, cases.created_date, cases.closed_date)                  AS total_time,\n       CASE\n           WHEN users.email LIKE '%concentrix%' THEN 'CNX'\n           WHEN users.email LIKE '%teleperformance%' THEN 'TLP'\n           WHEN users.email LIKE '%terceiro%' THEN 'TRC'\n           ELSE 'SUMUP'\n           END                                                                       AS agent_company,\n       users.country_c                                                               AS agent_location,\n       users.department                                                              AS agent_department,\n       replace(regexp_replace(cases.reason_comment_c, '\\r|\\n', ''), ',', '')    AS comment,\n       cases.subject                                                                 AS subject,\n       contact.regulatory_environment_c                                              AS regulatory_environment,\n       CASE\n           WHEN cases.CREATED_BY_ID not in (\n                                            '00557000008WTxiAAG', -- System User\n                                            '0052p00000AACZ4AAP' -- SmartServiceAPI\n               )\n           THEN TRUE\n           ELSE FALSE\n           END                                                                       AS is_internal_case,\n           CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM SUMUP_DWH_PROD.SRC_SALESFORCE.case cases\n    JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.record_type as rt\n        ON rt.id = cases.record_type_id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user users\n        ON cases.closed_by_c = users.id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.contact\n        ON cases.CONTACT_ID = contact.ID\n    LEFT JOIN SUMUP_DWH_PROD.OLAP.v_m_dim_merchant merch\n        ON merch.merchant_code = contact.MERCHANT_CODE_C\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping rm\n        -- lots of null values using cases.case_origin_country_c only(especially general = >1.5million unmapped countries)\n        ON  COALESCE(contact.BACKEND_MERCHANT_COUNTRY_C, cases.case_origin_country_c) = rm.country_name\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.language_mapping lm\n        ON cases.language_c = lm.language_name\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_email AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n            AND cases.detailed_case_reason_c = email_reasons.old_detailed_reason\n    LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_email_first_response AS frt\n        ON cases.id=frt.case_id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation sm ON merch.merchant_code = sm.MERCHANT_CODE\n                   AND CASE\n                       WHEN date_trunc('month', cases.created_date)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', cases.created_date) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', cases.created_date)::date END\nWHERE\n  rt.name IN (\n    'Case BR'\n    , 'Case EU'\n    , 'CNP Payment Requests'\n    , 'GdprPurged'\n    , 'Invoicing EU'\n    , 'Merchant Complaint'\n    , 'Non-Merchant Complaint'\n    , 'Shoplo EU'\n    , 'Support'\n    , 'Case Latam'\n    )\n-- Excluding Duplicates to try and test if this is causing the discrepancies of our resolution rates between PG and SF\n  AND (cases.DETAILED_CASE_REASON_C NOT IN ('No-Reply'\n    , 'Duplicate'\n    , 'Spam') or cases.DETAILED_CASE_REASON_C is null)\n-- Exclude BR cases created from other channels.\n  AND cases.origin NOT IN ('Auto Case'\n    , 'Five9'\n    , 'whatsapp')\n  AND (cases.subject != 'BR WhatsApp Support'\n   OR cases.subject IS NULL)\n  AND cases.IS_DELETED = FALSE\nORDER BY\n    created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_email"}, "model.merchant_experience_unified_touchpoints.tp_whatsapp": {"raw_sql": "/*\n* Whatsapp touchpoints table\n*/\n\n{{ config(materialized='table') }}\n\nWITH no_region_tp_whatsapp AS (\nSELECT DISTINCT\n    ms.id :: text                                                           AS id,\n    ms.case_id :: text                                                       AS case_id,\n    CASE\n        WHEN ms.channel_name like('%+39%')\n          OR ms.channel_name like('%+44%')\n          OR ms.channel_name like('%+33%')\n          OR ms.channel_name like('%+49%')\n          THEN convert_timezone('Europe/Berlin', ms.created_date)\n        ELSE ms.created_date\n        END                                                                 AS created_date,\n    CASE\n        -- agent whatsapps\n        WHEN ms.agent_message_count = 0\n          AND ms.agent_s_first_message_c IS NULL\n          AND ms.end_user_message_count > 0\n          AND su.name != 'Automated Process' THEN 'Missed'\n        -- bot serviced\n        WHEN su.name = 'Automated Process'\n          AND (ms.did_botsolve_c = 'Yes' OR ms.solution_presented_c)\n          AND ms.bot_closed_transfer_c <> TRUE THEN 'Serviced'\n         -- agent serviced\n        WHEN (su.name != 'Automated Process'\n          AND (ms.agent_message_count > 1 AND ms.end_user_message_count > 1)\n          OR ms.did_agentsolve_c = 'Yes') THEN 'Serviced'\n        -- abandonment bot chats only\n        WHEN ms.is_drop_conversation_c\n          OR (bot.abandoned_dialog_count > 0 AND bot.session_end_type='SessionTimedOut') THEN 'Abandoned'\n          ELSE 'Accepted'\n    END                                                                     AS status,\n    sp.merchant_id :: int                                                   AS merchant_id,\n    sp.merchant_code::text                                                  AS merchant_code,\n        CASE\n         WHEN ms.channel_name LIKE '%+55%'\n         THEN COALESCE(email_reasons.old_reason, cases.reason)\n         WHEN (ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+5715088459%'\n                OR ms.channel_name LIKE '%+5116409914%')\n         THEN COALESCE(email_reasons.reason, cases.reason)\n         ELSE eu_reasons.reason\n    END                                                                     AS reason,\n    CASE\n         WHEN ms.channel_name LIKE '%+55%'\n         THEN COALESCE(email_reasons.old_detailed_reason, cases.detailed_case_reason_c)\n         WHEN (ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+5715088459%'\n                OR ms.channel_name LIKE '%+5116409914%')\n         THEN COALESCE(email_reasons.detailed_reason, cases.detailed_case_reason_c)\n         ELSE eu_reasons.detailed_reason\n    END                                                                     AS detailed_reason,\n    CASE\n         WHEN (ms.channel_name LIKE '%+551130807797%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+5715088459%'\n                OR ms.channel_name LIKE '%+5116409914%')\n         THEN email_reasons.reason_group\n         ELSE eu_reasons.reason_group\n         END                                                                AS reason_group,\n    ms.bot_solution_c                                                       AS bot_solution,\n    CASE\n        WHEN ms.channel_name like '%+39%' THEN 'IT'\n        WHEN ms.channel_name like '%+44%' THEN 'EN'\n        WHEN ms.channel_name like '%+33%' THEN 'FR'\n        WHEN ms.channel_name like '%+49%' THEN 'DE'\n        WHEN ms.channel_name like '%+55%' THEN 'PT'\n        WHEN ms.channel_name like '%+56%' OR ms.channel_name like('%+57%') OR ms.channel_name like '%+51%' THEN 'ES'\n    END                                                                     AS language,\n    CASE\n        WHEN ms.channel_name like '%+39%' THEN 'IT'\n        WHEN ms.channel_name like '%+44%' THEN 'GB'\n        WHEN ms.channel_name like '%+33%' THEN 'FR'\n        WHEN ms.channel_name like '%+49%' THEN 'DE'\n        WHEN ms.channel_name like '%+55%' THEN 'BR'\n        WHEN ms.channel_name like '%+56%' THEN 'CL'\n        WHEN ms.channel_name like '%+57%' THEN 'CO'\n        WHEN ms.channel_name like '%+51%' THEN 'PE'\n    END                                                                    AS country,\n    TIMESTAMPDIFF(second, ms.start_time,  ms.end_time)                     AS total_session_time,\n    --First Response Time would be the waiting time, includes queue time and agents sla\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN timestampdiff(second, ms.bot_escalation_c, ms.agent_s_first_message_c)\n    END                                                                    AS first_response_time,\n    --Agent SLA would be the time the agent takes to send the first message since he accepted the message\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN TIMESTAMPDIFF(second, ms.accept_time, ms.agent_s_first_message_c)\n    END                                                                    AS agent_sla_time,\n    --Talk Time can be split by Agent Type\n    --(includes the actual time the agent interacts with the merchant)\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN TIMESTAMPDIFF(second, ms.agent_s_first_message_c, ms.agents_last_message_c)\n        ELSE TIMESTAMPDIFF(second, ms.start_time, ms.end_time)\n    END                                                                    AS talk_time,\n    --Handling time that can be split by Agent Type\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN TIMESTAMPDIFF(second, ms.agent_s_first_message_c, ms.end_time)\n        ELSE TIMESTAMPDIFF(second, ms.start_time, ms.end_time)\n    END                                                                    AS handling_time,\n    ms.end_user_message_count                                                 AS merchant_message_count,\n    ms.agent_message_count                                                   AS agent_message_count,\n    CASE\n        WHEN ORIGIN_BOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END                                                                     AS first_contact_agent_type,\n    CASE\n        WHEN su.name = 'Automated Process' THEN 'Bot'\n        ELSE 'Human'\n    END                                                                    AS agent_type,\n    ms.acting_bot_c                                                        AS bot_name,\n    CASE\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NOT NULL THEN true\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NULL THEN false\n       ELSE NULL\n       END                                                                 AS escalated,\n    (bot.from_bot_message_count > 0 AND ms.end_user_message_count > 1)\n    OR (ms.agent_message_count > 1 AND ms.end_user_message_count > 1)           AS is_conversation,\n    CASE\n        WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n        WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n        WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n        ELSE 'SUMUP'\n    END                                                                    AS agent_company,\n    su.country_c                                                           AS agent_location,\n    CASE\n        WHEN su.name = 'Automated Process' THEN 'Bot'\n        ELSE su.department\n    END                                                                    AS agent_department,\n        CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM\n    {{ source('salesforce', 'messaging_session') }} ms\n    LEFT JOIN {{ source('salesforce', 'user') }} su\n        ON ms.owner_id = su.id\n    LEFT JOIN {{ source('salesforce', 'case') }} cases\n        ON ms.case_id=cases.id\n    LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_email') }} AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n                       AND cases.detailed_case_reason_c = email_reasons.old_detailed_reason\n    LEFT JOIN {{ source('touchpoint_sources_internal','tp_reasons_chat') }} eu_reasons\n        ON ms.messaging_session_reason_c = eu_reasons.old_reason\n    LEFT JOIN {{ source('salesforce', 'analytics_bot_session') }} bot\n        ON ms.id = bot.source_id\n    LEFT JOIN {{ ref('v_merchant_sf_contact') }} sp\n        ON sp.id::text = ms.end_user_contact_id::text\n    LEFT JOIN {{ source('merchant_segmentation', 'ae_t_small_merchant_segmentation') }} sm ON sp.merchant_code = sm.merchant_code\n                   AND CASE\n                       WHEN date_trunc('month', ms.created_date)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', ms.created_date) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', ms.created_date)::date END\nWHERE\n    1 = 1\n    AND ms.status = 'Ended'\n    AND ms.start_time IS NOT NULL\n    AND ms.channel_type = 'WhatsApp'\n    AND ms.is_survey_session_c = FALSE\n    AND ms.origin = 'InboundInitiated'\n    AND (\n        -- All BR Whatsapp numbers\n        ms.channel_name LIKE '%+55%' -- Brazil support\n\t\tOR (ms.channel_name LIKE '%+443%' AND ms.created_date < '2021-07-02') -- UK support\n\t\t-- including the 443 we exclude the Consultant sessions by +442035104678 in UK\n\t\tOR (ms.channel_name LIKE '%+39%' AND ms.created_date < '2021-07-02') -- Italy support\n\t\tOR (ms.channel_name LIKE '%+33%' AND ms.created_date < '2021-07-02') -- France support\n\t\tOR (ms.channel_name LIKE '%+49%' AND ms.created_date < '2021-07-02') -- Germany support\n\t\t-- Main CL Payment Bot (exclude CL Sales and Lending bots)\n\t\tOR ms.channel_name LIKE '%+56442044345%' -- Chile support\n\t\t-- Main CO Payment Bot (exclude CO Sales and Lending bots)\n        OR ms.channel_name LIKE '%+5715088459%' -- Colombia support\n        -- Main PE Payment Bot (exclude PE Sales and Lending bots)\n        OR ms.channel_name LIKE '%+5116409914%' -- Peru support\n\n    )\n)\n\nSELECT tpw.*,\n       rm.region                AS region\n  FROM no_region_tp_whatsapp tpw\n  LEFT JOIN {{ source('touchpoint_sources_internal','region_mapping') }} rm\n      ON tpw.country = rm.country_code\nORDER BY\n    tpw.created_date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session", "source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.salesforce.messaging_session", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "tp_whatsapp"], "unique_id": "model.merchant_experience_unified_touchpoints.tp_whatsapp", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "unified_touchpoints/tp_whatsapp.sql", "original_file_path": "models/unified_touchpoints/tp_whatsapp.sql", "name": "tp_whatsapp", "alias": "tp_whatsapp", "checksum": {"name": "sha256", "checksum": "1780addbad9cad0f4283f6ba9e76f11860e02eaa067347e1401a49c4ae3561c3"}, "tags": [], "refs": [["v_merchant_sf_contact"]], "sources": [["touchpoint_sources_internal", "tp_reasons_chat"], ["merchant_segmentation", "ae_t_small_merchant_segmentation"], ["salesforce", "analytics_bot_session"], ["salesforce", "user"], ["salesforce", "messaging_session"], ["salesforce", "case"], ["touchpoint_sources_internal", "tp_reasons_email"], ["touchpoint_sources_internal", "region_mapping"]], "description": "Whatsapp touchpoints table", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "merchant_experience_unified_touchpoints://models/unified_touchpoints/schema.yml", "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/tp_whatsapp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1676306385.2002804, "compiled_sql": "/*\n* Whatsapp touchpoints table\n*/\n\n\n\nWITH no_region_tp_whatsapp AS (\nSELECT DISTINCT\n    ms.id :: text                                                           AS id,\n    ms.case_id :: text                                                       AS case_id,\n    CASE\n        WHEN ms.channel_name like('%+39%')\n          OR ms.channel_name like('%+44%')\n          OR ms.channel_name like('%+33%')\n          OR ms.channel_name like('%+49%')\n          THEN convert_timezone('Europe/Berlin', ms.created_date)\n        ELSE ms.created_date\n        END                                                                 AS created_date,\n    CASE\n        -- agent whatsapps\n        WHEN ms.agent_message_count = 0\n          AND ms.agent_s_first_message_c IS NULL\n          AND ms.end_user_message_count > 0\n          AND su.name != 'Automated Process' THEN 'Missed'\n        -- bot serviced\n        WHEN su.name = 'Automated Process'\n          AND (ms.did_botsolve_c = 'Yes' OR ms.solution_presented_c)\n          AND ms.bot_closed_transfer_c <> TRUE THEN 'Serviced'\n         -- agent serviced\n        WHEN (su.name != 'Automated Process'\n          AND (ms.agent_message_count > 1 AND ms.end_user_message_count > 1)\n          OR ms.did_agentsolve_c = 'Yes') THEN 'Serviced'\n        -- abandonment bot chats only\n        WHEN ms.is_drop_conversation_c\n          OR (bot.abandoned_dialog_count > 0 AND bot.session_end_type='SessionTimedOut') THEN 'Abandoned'\n          ELSE 'Accepted'\n    END                                                                     AS status,\n    sp.merchant_id :: int                                                   AS merchant_id,\n    sp.merchant_code::text                                                  AS merchant_code,\n        CASE\n         WHEN ms.channel_name LIKE '%+55%'\n         THEN COALESCE(email_reasons.old_reason, cases.reason)\n         WHEN (ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+5715088459%'\n                OR ms.channel_name LIKE '%+5116409914%')\n         THEN COALESCE(email_reasons.reason, cases.reason)\n         ELSE eu_reasons.reason\n    END                                                                     AS reason,\n    CASE\n         WHEN ms.channel_name LIKE '%+55%'\n         THEN COALESCE(email_reasons.old_detailed_reason, cases.detailed_case_reason_c)\n         WHEN (ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+5715088459%'\n                OR ms.channel_name LIKE '%+5116409914%')\n         THEN COALESCE(email_reasons.detailed_reason, cases.detailed_case_reason_c)\n         ELSE eu_reasons.detailed_reason\n    END                                                                     AS detailed_reason,\n    CASE\n         WHEN (ms.channel_name LIKE '%+551130807797%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+56442044345%'\n                OR ms.channel_name LIKE '%+5715088459%'\n                OR ms.channel_name LIKE '%+5116409914%')\n         THEN email_reasons.reason_group\n         ELSE eu_reasons.reason_group\n         END                                                                AS reason_group,\n    ms.bot_solution_c                                                       AS bot_solution,\n    CASE\n        WHEN ms.channel_name like '%+39%' THEN 'IT'\n        WHEN ms.channel_name like '%+44%' THEN 'EN'\n        WHEN ms.channel_name like '%+33%' THEN 'FR'\n        WHEN ms.channel_name like '%+49%' THEN 'DE'\n        WHEN ms.channel_name like '%+55%' THEN 'PT'\n        WHEN ms.channel_name like '%+56%' OR ms.channel_name like('%+57%') OR ms.channel_name like '%+51%' THEN 'ES'\n    END                                                                     AS language,\n    CASE\n        WHEN ms.channel_name like '%+39%' THEN 'IT'\n        WHEN ms.channel_name like '%+44%' THEN 'GB'\n        WHEN ms.channel_name like '%+33%' THEN 'FR'\n        WHEN ms.channel_name like '%+49%' THEN 'DE'\n        WHEN ms.channel_name like '%+55%' THEN 'BR'\n        WHEN ms.channel_name like '%+56%' THEN 'CL'\n        WHEN ms.channel_name like '%+57%' THEN 'CO'\n        WHEN ms.channel_name like '%+51%' THEN 'PE'\n    END                                                                    AS country,\n    TIMESTAMPDIFF(second, ms.start_time,  ms.end_time)                     AS total_session_time,\n    --First Response Time would be the waiting time, includes queue time and agents sla\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN timestampdiff(second, ms.bot_escalation_c, ms.agent_s_first_message_c)\n    END                                                                    AS first_response_time,\n    --Agent SLA would be the time the agent takes to send the first message since he accepted the message\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN TIMESTAMPDIFF(second, ms.accept_time, ms.agent_s_first_message_c)\n    END                                                                    AS agent_sla_time,\n    --Talk Time can be split by Agent Type\n    --(includes the actual time the agent interacts with the merchant)\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN TIMESTAMPDIFF(second, ms.agent_s_first_message_c, ms.agents_last_message_c)\n        ELSE TIMESTAMPDIFF(second, ms.start_time, ms.end_time)\n    END                                                                    AS talk_time,\n    --Handling time that can be split by Agent Type\n    --(whenever accept time is not null means there was an agent involved, and therefore only shows results for Human agent type.)\n    CASE\n        WHEN ms.accept_time IS NOT NULL THEN TIMESTAMPDIFF(second, ms.agent_s_first_message_c, ms.end_time)\n        ELSE TIMESTAMPDIFF(second, ms.start_time, ms.end_time)\n    END                                                                    AS handling_time,\n    ms.end_user_message_count                                                 AS merchant_message_count,\n    ms.agent_message_count                                                   AS agent_message_count,\n    CASE\n        WHEN ORIGIN_BOT_C IS NOT NULL THEN 'Bot'\n        ELSE 'Human'\n    END                                                                     AS first_contact_agent_type,\n    CASE\n        WHEN su.name = 'Automated Process' THEN 'Bot'\n        ELSE 'Human'\n    END                                                                    AS agent_type,\n    ms.acting_bot_c                                                        AS bot_name,\n    CASE\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NOT NULL THEN true\n         WHEN ORIGIN_BOT_C IS NOT NULL AND BOT_ESCALATION_C IS NULL THEN false\n       ELSE NULL\n       END                                                                 AS escalated,\n    (bot.from_bot_message_count > 0 AND ms.end_user_message_count > 1)\n    OR (ms.agent_message_count > 1 AND ms.end_user_message_count > 1)           AS is_conversation,\n    CASE\n        WHEN su.email LIKE '%concentrix%' THEN 'CNX'\n        WHEN su.email LIKE '%teleperformance%' THEN 'TLP'\n        WHEN su.email LIKE '%terceiro%' THEN 'TRC'\n        ELSE 'SUMUP'\n    END                                                                    AS agent_company,\n    su.country_c                                                           AS agent_location,\n    CASE\n        WHEN su.name = 'Automated Process' THEN 'Bot'\n        ELSE su.department\n    END                                                                    AS agent_department,\n        CASE\n             WHEN sm.small_merchant_in_month_t_f = TRUE THEN 'Small Merchant'\n             WHEN sm.small_merchant_in_month_t_f = FALSE THEN 'Micro/Nano Merchant'\n             ELSE 'Unknown'\n             END                                                                      AS merchant_type\nFROM\n    SUMUP_DWH_PROD.SRC_SALESFORCE.messaging_session ms\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.user su\n        ON ms.owner_id = su.id\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.case cases\n        ON ms.case_id=cases.id\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_email AS email_reasons\n        ON cases.reason = email_reasons.old_reason\n                       AND cases.detailed_case_reason_c = email_reasons.old_detailed_reason\n    LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_chat eu_reasons\n        ON ms.messaging_session_reason_c = eu_reasons.old_reason\n    LEFT JOIN SUMUP_DWH_PROD.SRC_SALESFORCE.analytics_bot_session bot\n        ON ms.id = bot.source_id\n    LEFT JOIN SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.v_merchant_sf_contact sp\n        ON sp.id::text = ms.end_user_contact_id::text\n    LEFT JOIN SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation sm ON sp.merchant_code = sm.merchant_code\n                   AND CASE\n                       WHEN date_trunc('month', ms.created_date)::date = date_trunc('month', current_date)::date\n                                THEN (date_trunc('month', ms.created_date) - INTERVAL '1 month')= SM.TX_MONTH\n                                ELSE sm.tx_month = date_trunc('month', ms.created_date)::date END\nWHERE\n    1 = 1\n    AND ms.status = 'Ended'\n    AND ms.start_time IS NOT NULL\n    AND ms.channel_type = 'WhatsApp'\n    AND ms.is_survey_session_c = FALSE\n    AND ms.origin = 'InboundInitiated'\n    AND (\n        -- All BR Whatsapp numbers\n        ms.channel_name LIKE '%+55%' -- Brazil support\n\t\tOR (ms.channel_name LIKE '%+443%' AND ms.created_date < '2021-07-02') -- UK support\n\t\t-- including the 443 we exclude the Consultant sessions by +442035104678 in UK\n\t\tOR (ms.channel_name LIKE '%+39%' AND ms.created_date < '2021-07-02') -- Italy support\n\t\tOR (ms.channel_name LIKE '%+33%' AND ms.created_date < '2021-07-02') -- France support\n\t\tOR (ms.channel_name LIKE '%+49%' AND ms.created_date < '2021-07-02') -- Germany support\n\t\t-- Main CL Payment Bot (exclude CL Sales and Lending bots)\n\t\tOR ms.channel_name LIKE '%+56442044345%' -- Chile support\n\t\t-- Main CO Payment Bot (exclude CO Sales and Lending bots)\n        OR ms.channel_name LIKE '%+5715088459%' -- Colombia support\n        -- Main PE Payment Bot (exclude PE Sales and Lending bots)\n        OR ms.channel_name LIKE '%+5116409914%' -- Peru support\n\n    )\n)\n\nSELECT tpw.*,\n       rm.region                AS region\n  FROM no_region_tp_whatsapp tpw\n  LEFT JOIN SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping rm\n      ON tpw.country = rm.country_code\nORDER BY\n    tpw.created_date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_whatsapp"}, "test.merchant_experience_unified_touchpoints.not_null_tp_email_id.9ce7eee1e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_email')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_email"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_tp_email_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_tp_email_id.9ce7eee1e1", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_tp_email_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_tp_email_id", "alias": "not_null_tp_email_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_email"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_tp_email_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676306385.2042336, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_email\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_email"}, "test.merchant_experience_unified_touchpoints.not_null_tp_whatsapp_id.2510774df3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('tp_whatsapp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.merchant_experience_unified_touchpoints.tp_whatsapp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "SUMUP_DWH_DEV", "schema": "ANALYST_MERCHANT_SUCCESS_dbt_test__audit", "fqn": ["merchant_experience_unified_touchpoints", "unified_touchpoints", "not_null_tp_whatsapp_id"], "unique_id": "test.merchant_experience_unified_touchpoints.not_null_tp_whatsapp_id.2510774df3", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "not_null_tp_whatsapp_id.sql", "original_file_path": "models/unified_touchpoints/schema.yml", "name": "not_null_tp_whatsapp_id", "alias": "not_null_tp_whatsapp_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tp_whatsapp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/merchant_experience_unified_touchpoints/models/unified_touchpoints/schema.yml/not_null_tp_whatsapp_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1676306385.208792, "compiled_sql": "\n    \n    \n\nselect *\nfrom SUMUP_DWH_DEV.ANALYST_MERCHANT_SUCCESS.tp_whatsapp\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.tp_whatsapp"}}, "sources": {"source.merchant_experience_unified_touchpoints.ds_models.tp_volume_forecast": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "ds_models", "ds_models", "tp_volume_forecast"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.ds_models.tp_volume_forecast", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/ds_models/ds_models.yml", "original_file_path": "models/sources/ds_models/ds_models.yml", "name": "tp_volume_forecast", "source_name": "ds_models", "source_description": "this source contains the touchpoint volume forecast", "loader": "", "identifier": "tp_volume_forecast", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "recorded_at", "freshness": {"warn_after": {"count": 16, "period": "day"}, "error_after": {"count": 31, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_volume_forecast", "created_at": 1676045139.3399076}, "source.merchant_experience_unified_touchpoints.ds_models.tp_chat_reason_labels": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "ds_models", "ds_models", "tp_chat_reason_labels"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.ds_models.tp_chat_reason_labels", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/ds_models/ds_models.yml", "original_file_path": "models/sources/ds_models/ds_models.yml", "name": "tp_chat_reason_labels", "source_name": "ds_models", "source_description": "this source contains the touchpoint volume forecast", "loader": "", "identifier": "tp_chat_reason_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "recorded_at", "freshness": {"warn_after": {"count": 16, "period": "day"}, "error_after": {"count": 31, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_chat_reason_labels", "created_at": 1676045139.3402152}, "source.merchant_experience_unified_touchpoints.five9.five9_report": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "five9", "five9", "five9_report"], "database": "SUMUP_DWH_PROD", "schema": "SRC_FIVE9", "unique_id": "source.merchant_experience_unified_touchpoints.five9.five9_report", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/five9/src_five9.yml", "original_file_path": "models/sources/five9/src_five9.yml", "name": "five9_report", "source_name": "five9", "source_description": "this source contains the tables with five9 data", "loader": "", "identifier": "five9_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_modified", "freshness": null, "external": null, "description": "BR historical data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_FIVE9.five9_report", "created_at": 1676045139.3402977}, "source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "five9", "five9", "calllog_report_from_yesterday_without_notes"], "database": "SUMUP_DWH_PROD", "schema": "SRC_FIVE9", "unique_id": "source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/five9/src_five9.yml", "original_file_path": "models/sources/five9/src_five9.yml", "name": "calllog_report_from_yesterday_without_notes", "source_name": "five9", "source_description": "this source contains the tables with five9 data", "loader": "", "identifier": "calllog_report_from_yesterday_without_notes", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_modified", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "BR current data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_FIVE9.calllog_report_from_yesterday_without_notes", "created_at": 1676045139.3403702}, "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "five9", "five9", "five9_us_cl_standard_report"], "database": "SUMUP_DWH_PROD", "schema": "SRC_FIVE9", "unique_id": "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/five9/src_five9.yml", "original_file_path": "models/sources/five9/src_five9.yml", "name": "five9_us_cl_standard_report", "source_name": "five9", "source_description": "this source contains the tables with five9 data", "loader": "", "identifier": "five9_us_cl_standard_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_modified", "freshness": null, "external": null, "description": "ES_LATAM and US historical data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_FIVE9.five9_us_cl_standard_report", "created_at": 1676045139.3404202}, "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "five9", "five9", "call_logreport_dwh_cl_us"], "database": "SUMUP_DWH_PROD", "schema": "SRC_FIVE9", "unique_id": "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/five9/src_five9.yml", "original_file_path": "models/sources/five9/src_five9.yml", "name": "call_logreport_dwh_cl_us", "source_name": "five9", "source_description": "this source contains the tables with five9 data", "loader": "", "identifier": "call_logreport_dwh_cl_us", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_modified", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "ES_LATAM and US current data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_FIVE9.call_logreport_dwh_cl_us", "created_at": 1676045139.340484}, "source.merchant_experience_unified_touchpoints.five9.five9_europe_report": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "five9", "five9", "five9_europe_report"], "database": "SUMUP_DWH_PROD", "schema": "SRC_FIVE9", "unique_id": "source.merchant_experience_unified_touchpoints.five9.five9_europe_report", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/five9/src_five9.yml", "original_file_path": "models/sources/five9/src_five9.yml", "name": "five9_europe_report", "source_name": "five9", "source_description": "this source contains the tables with five9 data", "loader": "", "identifier": "five9_europe_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_modified", "freshness": null, "external": null, "description": "EU historical data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_FIVE9.five9_europe_report", "created_at": 1676045139.340528}, "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "five9", "five9", "call_logreport_dwh"], "database": "SUMUP_DWH_PROD", "schema": "SRC_FIVE9", "unique_id": "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/five9/src_five9.yml", "original_file_path": "models/sources/five9/src_five9.yml", "name": "call_logreport_dwh", "source_name": "five9", "source_description": "this source contains the tables with five9 data", "loader": "", "identifier": "call_logreport_dwh", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_modified", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "EU current data", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_FIVE9.call_logreport_dwh", "created_at": 1676045139.340575}, "source.merchant_experience_unified_touchpoints.funnel.agent_state_five9": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "five9", "funnel", "agent_state_five9"], "database": "SHARED_FUNNEL_EU_OPERATIONS__MGBXANDJKGW6VCVANQV", "schema": "FUNNEL__MGBXANDJKGW6VCVANQV", "unique_id": "source.merchant_experience_unified_touchpoints.funnel.agent_state_five9", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/five9/src_five9.yml", "original_file_path": "models/sources/five9/src_five9.yml", "name": "agent_state_five9", "source_name": "funnel", "source_description": "this source contains five9 data coming from funnel.io", "loader": "funnel.io", "identifier": "agent_state_five9", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SHARED_FUNNEL_EU_OPERATIONS__MGBXANDJKGW6VCVANQV.FUNNEL__MGBXANDJKGW6VCVANQV.agent_state_five9", "created_at": 1676045139.340627}, "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchants_olap", "v_m_dim_merchant"], "database": "SUMUP_DWH_PROD", "schema": "OLAP", "unique_id": "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "v_m_dim_merchant", "source_name": "merchants_olap", "source_description": "this source contains the olap tables used for merchant data", "loader": "", "identifier": "v_m_dim_merchant", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.OLAP.v_m_dim_merchant", "created_at": 1676045139.3406923}, "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchants_olap", "v_m_facts_transaction"], "database": "SUMUP_DWH_PROD", "schema": "OLAP", "unique_id": "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "v_m_facts_transaction", "source_name": "merchants_olap", "source_description": "this source contains the olap tables used for merchant data", "loader": "", "identifier": "v_m_facts_transaction", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.OLAP.v_m_facts_transaction", "created_at": 1676045139.3407416}, "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchants_olap", "v_m_dim_cooperation"], "database": "SUMUP_DWH_PROD", "schema": "OLAP", "unique_id": "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "v_m_dim_cooperation", "source_name": "merchants_olap", "source_description": "this source contains the olap tables used for merchant data", "loader": "", "identifier": "v_m_dim_cooperation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.OLAP.v_m_dim_cooperation", "created_at": 1676045139.3407857}, "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchants_olap", "v_m_dim_acquisition_cohort"], "database": "SUMUP_DWH_PROD", "schema": "OLAP", "unique_id": "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "v_m_dim_acquisition_cohort", "source_name": "merchants_olap", "source_description": "this source contains the olap tables used for merchant data", "loader": "", "identifier": "v_m_dim_acquisition_cohort", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.OLAP.v_m_dim_acquisition_cohort", "created_at": 1676045139.3408287}, "source.merchant_experience_unified_touchpoints.merchants_olap.m_dim_private": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchants_olap", "m_dim_private"], "database": "SUMUP_DWH_PROD", "schema": "OLAP", "unique_id": "source.merchant_experience_unified_touchpoints.merchants_olap.m_dim_private", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "m_dim_private", "source_name": "merchants_olap", "source_description": "this source contains the olap tables used for merchant data", "loader": "", "identifier": "m_dim_private", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.OLAP.m_dim_private", "created_at": 1676045139.3408768}, "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchant_segmentation", "ae_t_small_merchant_segmentation"], "database": "SUMUP_DWH_PROD", "schema": "SRC_ANALYST_EUROPE", "unique_id": "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "ae_t_small_merchant_segmentation", "source_name": "merchant_segmentation", "source_description": "this source contains the merchant segmentation data", "loader": "", "identifier": "ae_t_small_merchant_segmentation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_ANALYST_EUROPE.ae_t_small_merchant_segmentation", "created_at": 1676045139.340925}, "source.merchant_experience_unified_touchpoints.merchants.merchants": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchants", "merchants"], "database": "SUMUP_DWH_PROD", "schema": "SRC_PAYMENT", "unique_id": "source.merchant_experience_unified_touchpoints.merchants.merchants", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "merchants", "source_name": "merchants", "source_description": "this source contains other merchant data (legal_type, card reader owner data)", "loader": "", "identifier": "merchants", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "created_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_PAYMENT.merchants", "created_at": 1676045139.3409727}, "source.merchant_experience_unified_touchpoints.merchants.legal_types": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "merchants", "legal_types"], "database": "SUMUP_DWH_PROD", "schema": "SRC_PAYMENT", "unique_id": "source.merchant_experience_unified_touchpoints.merchants.legal_types", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "legal_types", "source_name": "merchants", "source_description": "this source contains other merchant data (legal_type, card reader owner data)", "loader": "", "identifier": "legal_types", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "created_at", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_PAYMENT.legal_types", "created_at": 1676045139.3410509}, "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "plugger", "plugger", "fulfillment_request"], "database": "SUMUP_DWH_PROD", "schema": "SRC_PLUGGER", "unique_id": "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/plugger/src_plugger.yml", "original_file_path": "models/sources/plugger/src_plugger.yml", "name": "fulfillment_request", "source_name": "plugger", "source_description": "this source contains data related to replacement requests", "loader": "", "identifier": "fulfillment_request", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_PLUGGER.fulfillment_request", "created_at": 1676045139.3410983}, "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request_item": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "plugger", "plugger", "fulfillment_request_item"], "database": "SUMUP_DWH_PROD", "schema": "SRC_PLUGGER", "unique_id": "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request_item", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/plugger/src_plugger.yml", "original_file_path": "models/sources/plugger/src_plugger.yml", "name": "fulfillment_request_item", "source_name": "plugger", "source_description": "this source contains data related to replacement requests", "loader": "", "identifier": "fulfillment_request_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "updated_at", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_PLUGGER.fulfillment_request_item", "created_at": 1676045139.3411455}, "source.merchant_experience_unified_touchpoints.merchant_cases.case_history_status_rank": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "cases", "merchant_cases", "case_history_status_rank"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.merchant_cases.case_history_status_rank", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/cases/src_cases.yml", "original_file_path": "models/sources/cases/src_cases.yml", "name": "case_history_status_rank", "source_name": "merchant_cases", "source_description": "this source contains the relevant case tables used for modelling", "loader": "", "identifier": "case_history_status_rank", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.case_history_status_rank", "created_at": 1676295769.005623}, "source.merchant_experience_unified_touchpoints.touchpoint_sources_external.languages": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "touchpoints", "touchpoint_sources_external", "languages"], "database": "SUMUP_DWH_PROD", "schema": "SRC_PAYMENT", "unique_id": "source.merchant_experience_unified_touchpoints.touchpoint_sources_external.languages", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/touchpoints/src_touchpoints.yml", "original_file_path": "models/sources/touchpoints/src_touchpoints.yml", "name": "languages", "source_name": "touchpoint_sources_external", "source_description": "this source contains sources for touchpoints data external to our schema", "loader": "", "identifier": "languages", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_PAYMENT.languages", "created_at": 1676303616.8698833}, "source.merchant_experience_unified_touchpoints.department_merchants.department_mapping": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "merchants", "department_merchants", "department_mapping"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.department_merchants.department_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/merchants/src_merchants.yml", "original_file_path": "models/sources/merchants/src_merchants.yml", "name": "department_mapping", "source_name": "department_merchants", "source_description": "this source contains the sources pertaining to department mapping", "loader": "", "identifier": "department_mapping", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.department_mapping", "created_at": 1676303616.8699398}, "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "analytics_bot_session"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "analytics_bot_session", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "analytics_bot_session", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 7, "period": "day"}, "error_after": {"count": 14, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.analytics_bot_session", "created_at": 1676303616.8699877}, "source.merchant_experience_unified_touchpoints.salesforce.case_history": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "case_history"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.case_history", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "case_history", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "case_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.case_history", "created_at": 1676303616.870034}, "source.merchant_experience_unified_touchpoints.salesforce.live_chat_button": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "live_chat_button"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.live_chat_button", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "live_chat_button", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "live_chat_button", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.live_chat_button", "created_at": 1676303616.8700774}, "source.merchant_experience_unified_touchpoints.salesforce.contact": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "contact"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.contact", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "contact", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.contact", "created_at": 1676303616.8701167}, "source.merchant_experience_unified_touchpoints.salesforce.email_message": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "email_message"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.email_message", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "email_message", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "email_message", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.email_message", "created_at": 1676303616.870156}, "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "live_chat_transcript"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "live_chat_transcript", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "live_chat_transcript", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.live_chat_transcript", "created_at": 1676303616.870194}, "source.merchant_experience_unified_touchpoints.salesforce.messaging_session": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "messaging_session"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.messaging_session", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "messaging_session", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "messaging_session", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.messaging_session", "created_at": 1676303616.870232}, "source.merchant_experience_unified_touchpoints.salesforce.record_type": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "record_type"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.record_type", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "record_type", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "record_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.record_type", "created_at": 1676303616.8702705}, "source.merchant_experience_unified_touchpoints.salesforce.case": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "case"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.case", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "case", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "case", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.case", "created_at": 1676303616.870309}, "source.merchant_experience_unified_touchpoints.salesforce.user": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "user"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.user", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "user", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.user", "created_at": 1676303616.8703477}, "source.merchant_experience_unified_touchpoints.salesforce.task": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "task"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.task", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "task", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "task", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.task", "created_at": 1676303616.8703864}, "source.merchant_experience_unified_touchpoints.salesforce.account": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "account"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.account", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "account", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.account", "created_at": 1676303616.8704255}, "source.merchant_experience_unified_touchpoints.salesforce.userhistory_user_field_history_c": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "salesforce", "salesforce", "userhistory_user_field_history_c"], "database": "SUMUP_DWH_PROD", "schema": "SRC_SALESFORCE", "unique_id": "source.merchant_experience_unified_touchpoints.salesforce.userhistory_user_field_history_c", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/salesforce/src_salesforce.yml", "original_file_path": "models/sources/salesforce/src_salesforce.yml", "name": "userhistory_user_field_history_c", "source_name": "salesforce", "source_description": "this source contains all the tables with data coming from salesforce", "loader": "Fivetran", "identifier": "userhistory_user_field_history_c", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.SRC_SALESFORCE.userhistory_user_field_history_c", "created_at": 1676303616.8704777}, "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_call": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "touchpoints", "touchpoint_sources_internal", "tp_reasons_call"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_call", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/touchpoints/src_touchpoints.yml", "original_file_path": "models/sources/touchpoints/src_touchpoints.yml", "name": "tp_reasons_call", "source_name": "touchpoint_sources_internal", "source_description": "this source contains sources for touchpoints data", "loader": "", "identifier": "tp_reasons_call", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_call", "created_at": 1676305531.8430626}, "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "touchpoints", "touchpoint_sources_internal", "region_mapping"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/touchpoints/src_touchpoints.yml", "original_file_path": "models/sources/touchpoints/src_touchpoints.yml", "name": "region_mapping", "source_name": "touchpoint_sources_internal", "source_description": "this source contains sources for touchpoints data", "loader": "", "identifier": "region_mapping", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.region_mapping", "created_at": 1676305531.8431702}, "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "touchpoints", "touchpoint_sources_internal", "tp_reasons_chat"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/touchpoints/src_touchpoints.yml", "original_file_path": "models/sources/touchpoints/src_touchpoints.yml", "name": "tp_reasons_chat", "source_name": "touchpoint_sources_internal", "source_description": "this source contains sources for touchpoints data", "loader": "", "identifier": "tp_reasons_chat", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_chat", "created_at": 1676305531.8432198}, "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "touchpoints", "touchpoint_sources_internal", "tp_reasons_email"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/touchpoints/src_touchpoints.yml", "original_file_path": "models/sources/touchpoints/src_touchpoints.yml", "name": "tp_reasons_email", "source_name": "touchpoint_sources_internal", "source_description": "this source contains sources for touchpoints data", "loader": "", "identifier": "tp_reasons_email", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.tp_reasons_email", "created_at": 1676305531.8432643}, "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.language_mapping": {"fqn": ["merchant_experience_unified_touchpoints", "sources", "touchpoints", "touchpoint_sources_internal", "language_mapping"], "database": "SUMUP_DWH_PROD", "schema": "ANALYST_MERCHANT_SUCCESS", "unique_id": "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.language_mapping", "package_name": "merchant_experience_unified_touchpoints", "root_path": "/app", "path": "models/sources/touchpoints/src_touchpoints.yml", "original_file_path": "models/sources/touchpoints/src_touchpoints.yml", "name": "language_mapping", "source_name": "touchpoint_sources_internal", "source_description": "this source contains sources for touchpoints data", "loader": "", "identifier": "language_mapping", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SUMUP_DWH_PROD.ANALYST_MERCHANT_SUCCESS.language_mapping", "created_at": 1676305531.8433065}}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5656374}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5659382}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5663493}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5670118}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5677023}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5681956}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5686328}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5689247}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5689948}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5691633}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5692546}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5694141}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5696304}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5698075}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5702577}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.570418}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5708182}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.571304}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5719404}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5721369}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5723395}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.575371}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5788856}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5791736}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5794084}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5817509}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5839934}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5882418}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5914555}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.591937}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5937488}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.5977693}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.598108}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.601355}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6015892}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6017554}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6018915}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.602081}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6023085}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6024892}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6027513}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6029181}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6031003}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6057687}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6060588}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6062224}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6064115}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.606566}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.606702}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6069415}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6071897}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6073997}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6078653}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6080728}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.608243}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.610321}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.61046}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6106799}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.611121}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6143584}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6145287}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6147132}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6148562}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6152227}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6157625}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6185884}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.618727}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6188848}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6193957}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6227717}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.623032}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6233168}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6234875}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6238003}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6240215}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.624556}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.624787}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6255193}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6274047}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6275792}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.627724}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6278813}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6303065}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6305587}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6331615}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6333869}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.635652}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6359098}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6365476}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6395743}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.64011}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.640379}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6437807}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6449893}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6457448}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6459608}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6482832}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6485784}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6488616}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6523018}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6525273}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6526704}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.652804}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.652929}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.658032}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6627476}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6629646}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6651535}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6653316}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6655078}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6657598}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6691878}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.672856}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6736352}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.674367}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6824222}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6834455}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6836486}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6841223}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6844628}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.68509}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6881464}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6949935}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.696374}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6974955}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.6981835}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7054994}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.711849}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7147627}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7149417}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7153094}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.715715}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7236397}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7289543}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7292516}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7294157}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.729498}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7296805}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7304914}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7306616}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7308857}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7313085}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7364318}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7365937}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7367902}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7369263}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.737033}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7376785}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7380946}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.73825}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7391224}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.740757}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7434464}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.743704}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7459593}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7463903}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.748554}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7489057}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7536705}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7596178}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7604659}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7606711}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7610972}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7612278}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7613287}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7614634}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7615688}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7620728}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7622318}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.763267}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7674415}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7706838}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.77242}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7754672}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7779853}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7805824}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7808075}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.7811363}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1676045138.781405}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/conda/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.merchant_experience_unified_touchpoints.STG_FIVE9_BR": ["source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes", "source.merchant_experience_unified_touchpoints.five9.five9_report"], "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us", "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report"], "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh", "source.merchant_experience_unified_touchpoints.five9.five9_europe_report"], "model.merchant_experience_unified_touchpoints.stg_five9_br_new": ["source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes", "source.merchant_experience_unified_touchpoints.five9.five9_report"], "model.merchant_experience_unified_touchpoints.stg_five9_eslatam_us_new": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us", "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report"], "model.merchant_experience_unified_touchpoints.stg_five9_eu_new": ["source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh", "source.merchant_experience_unified_touchpoints.five9.five9_europe_report"], "model.merchant_experience_unified_touchpoints.stg_five9_states_eu": ["source.merchant_experience_unified_touchpoints.funnel.agent_state_five9"], "model.merchant_experience_unified_touchpoints.stg_acquisition_cohort": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort"], "model.merchant_experience_unified_touchpoints.stg_cooperation": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation"], "model.merchant_experience_unified_touchpoints.stg_dim_merchants": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant"], "model.merchant_experience_unified_touchpoints.stg_facts_transactions": ["source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction"], "model.merchant_experience_unified_touchpoints.stg_legal_types": ["source.merchant_experience_unified_touchpoints.merchants.legal_types", "source.merchant_experience_unified_touchpoints.merchants.merchants"], "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation": ["source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation"], "model.merchant_experience_unified_touchpoints.stg_fulfillment_requests": ["source.merchant_experience_unified_touchpoints.plugger.fulfillment_request", "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request_item"], "model.merchant_experience_unified_touchpoints.v_user_manager": [], "analysis.merchant_experience_unified_touchpoints.callback_request": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_EU"], "seed.merchant_experience_unified_touchpoints.case_history_status_rank": [], "seed.merchant_experience_unified_touchpoints.department_mapping": [], "seed.merchant_experience_unified_touchpoints.language_mapping": [], "seed.merchant_experience_unified_touchpoints.qa_agent_email_mapping": [], "seed.merchant_experience_unified_touchpoints.qa_monitor_email_mapping": [], "seed.merchant_experience_unified_touchpoints.qa_question_name_mapping": [], "seed.merchant_experience_unified_touchpoints.region_mapping": [], "seed.merchant_experience_unified_touchpoints.time_zones": [], "seed.merchant_experience_unified_touchpoints.tp_reasons_call": [], "seed.merchant_experience_unified_touchpoints.tp_reasons_chat": [], "seed.merchant_experience_unified_touchpoints.tp_reasons_email": [], "test.merchant_experience_unified_touchpoints.not_null_agent_tp_unified_tp_id.e39a10f080": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_chat_tp_id.3806982917": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_whatsapp_tp_id.78fce4d9b9": [], "test.merchant_experience_unified_touchpoints.unique_v_agent_tp_facebook_tp_id.1516020ed4": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_facebook_tp_id.45461b8558": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_call_tp_id.5d7d80c2df": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_email_tp_id.c60578d323": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_aggregation_agent_email.c365f5ea07": [], "test.merchant_experience_unified_touchpoints.not_null_v_tp_unified_merchant_dim_id.4847b1dc29": [], "test.merchant_experience_unified_touchpoints.unique_v_user_manager_user_id.5f6766a1fd": ["model.merchant_experience_unified_touchpoints.v_user_manager"], "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_user_id.50fe6cd559": ["model.merchant_experience_unified_touchpoints.v_user_manager"], "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_manager_email.2006af530e": ["model.merchant_experience_unified_touchpoints.v_user_manager"], "test.merchant_experience_unified_touchpoints.relationships_department_mapping_old_department__agent_current_department__ref_stg_users_.bb7b23aabb": ["model.merchant_experience_unified_touchpoints.stg_users", "seed.merchant_experience_unified_touchpoints.department_mapping"], "model.merchant_experience_unified_touchpoints.stg_bot_sessions": ["source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session"], "model.merchant_experience_unified_touchpoints.stg_case_history": ["source.merchant_experience_unified_touchpoints.salesforce.case_history"], "model.merchant_experience_unified_touchpoints.stg_chat_button": ["source.merchant_experience_unified_touchpoints.salesforce.live_chat_button"], "model.merchant_experience_unified_touchpoints.stg_contacts": ["source.merchant_experience_unified_touchpoints.salesforce.contact"], "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact": ["source.merchant_experience_unified_touchpoints.merchants_olap.m_dim_private", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "source.merchant_experience_unified_touchpoints.salesforce.account", "source.merchant_experience_unified_touchpoints.salesforce.contact"], "model.merchant_experience_unified_touchpoints.stg_email_messages": ["source.merchant_experience_unified_touchpoints.salesforce.email_message"], "model.merchant_experience_unified_touchpoints.v_email_first_response": ["source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.salesforce.email_message", "source.merchant_experience_unified_touchpoints.salesforce.user"], "model.merchant_experience_unified_touchpoints.stg_live_chat": ["source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript"], "model.merchant_experience_unified_touchpoints.stg_messaging_sessions": ["source.merchant_experience_unified_touchpoints.salesforce.messaging_session"], "model.merchant_experience_unified_touchpoints.stg_record_type": ["source.merchant_experience_unified_touchpoints.salesforce.record_type"], "model.merchant_experience_unified_touchpoints.stg_sf_case": ["source.merchant_experience_unified_touchpoints.salesforce.case"], "model.merchant_experience_unified_touchpoints.stg_users": ["source.merchant_experience_unified_touchpoints.salesforce.user"], "model.merchant_experience_unified_touchpoints.v_user": ["source.merchant_experience_unified_touchpoints.salesforce.user"], "model.merchant_experience_unified_touchpoints.stg_task": ["source.merchant_experience_unified_touchpoints.salesforce.task"], "test.merchant_experience_unified_touchpoints.unique_v_email_first_response_case_id.ffbef61f57": ["model.merchant_experience_unified_touchpoints.v_email_first_response"], "test.merchant_experience_unified_touchpoints.not_null_v_email_first_response_case_id.39a7287f78": ["model.merchant_experience_unified_touchpoints.v_email_first_response"], "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_sf_account_id.64d6f247d6": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"], "test.merchant_experience_unified_touchpoints.unique_v_merchant_sf_contact_sf_account_id.99898c24a4": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"], "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_merchant_id.53d65861aa": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"], "model.merchant_experience_unified_touchpoints.data_quality_completeness": ["model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_unified", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "model.merchant_experience_unified_touchpoints.data_quality_timeliness": ["model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_unified", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "model.merchant_experience_unified_touchpoints.test_tp_unified": ["model.merchant_experience_unified_touchpoints.test_tp_unified_staging_linked"], "model.merchant_experience_unified_touchpoints.test_tp_unified_staging_linked": ["model.merchant_experience_unified_touchpoints.test_tp_unified_staging"], "model.merchant_experience_unified_touchpoints.test_tp_unified_staging": ["model.merchant_experience_unified_touchpoints.new_tp_email", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "model.merchant_experience_unified_touchpoints.tp_transfers": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.v_user", "model.merchant_experience_unified_touchpoints.v_user", "model.merchant_experience_unified_touchpoints.v_user", "source.merchant_experience_unified_touchpoints.funnel.agent_state_five9", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.salesforce.case_history", "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript"], "model.merchant_experience_unified_touchpoints.tp_attribution": ["model.merchant_experience_unified_touchpoints.tp_unified", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.merchants.legal_types", "source.merchant_experience_unified_touchpoints.merchants.merchants", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction"], "model.merchant_experience_unified_touchpoints.v_tp_forecast_with_actuals": ["model.merchant_experience_unified_touchpoints.tp_unified", "model.merchant_experience_unified_touchpoints.tp_unified", "source.merchant_experience_unified_touchpoints.ds_models.tp_volume_forecast"], "model.merchant_experience_unified_touchpoints.tp_unified": ["model.merchant_experience_unified_touchpoints.tp_unified_staging_linked"], "model.merchant_experience_unified_touchpoints.tp_unified_staging_linked": ["model.merchant_experience_unified_touchpoints.tp_unified_staging"], "model.merchant_experience_unified_touchpoints.tp_unified_staging": ["model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "model.merchant_experience_unified_touchpoints.tp_call": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_BR", "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US", "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US", "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.salesforce.contact", "source.merchant_experience_unified_touchpoints.salesforce.task", "source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_call"], "model.merchant_experience_unified_touchpoints.tp_chat": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "source.merchant_experience_unified_touchpoints.ds_models.tp_chat_reason_labels", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session", "source.merchant_experience_unified_touchpoints.salesforce.live_chat_button", "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript", "source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat"], "model.merchant_experience_unified_touchpoints.tp_facebook": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session", "source.merchant_experience_unified_touchpoints.salesforce.messaging_session", "source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat"], "model.merchant_experience_unified_touchpoints.new_tp_email": ["model.merchant_experience_unified_touchpoints.ref_email_staging"], "model.merchant_experience_unified_touchpoints.ref_email_staging": ["model.merchant_experience_unified_touchpoints.ref_tp_email"], "model.merchant_experience_unified_touchpoints.ref_tp_email": ["model.merchant_experience_unified_touchpoints.stg_email_messages", "model.merchant_experience_unified_touchpoints.stg_record_type", "model.merchant_experience_unified_touchpoints.stg_sf_case", "model.merchant_experience_unified_touchpoints.stg_sf_case", "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation", "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "model.merchant_experience_unified_touchpoints.v_user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_external.languages", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email"], "model.merchant_experience_unified_touchpoints.five9_id_domain_mapping": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US", "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU"], "analysis.merchant_experience_unified_touchpoints.case_staging": ["model.merchant_experience_unified_touchpoints.tp_unified"], "test.merchant_experience_unified_touchpoints.not_null_tp_call_id.af7d3f6c2f": ["model.merchant_experience_unified_touchpoints.tp_call"], "test.merchant_experience_unified_touchpoints.not_null_tp_unified_id.0c4e915190": ["model.merchant_experience_unified_touchpoints.tp_unified"], "test.merchant_experience_unified_touchpoints.unique_tp_chat_id.53e9f44142": ["model.merchant_experience_unified_touchpoints.tp_chat"], "test.merchant_experience_unified_touchpoints.not_null_tp_chat_id.a7e82fb398": ["model.merchant_experience_unified_touchpoints.tp_chat"], "test.merchant_experience_unified_touchpoints.unique_tp_facebook_id.7e27a2f707": ["model.merchant_experience_unified_touchpoints.tp_facebook"], "test.merchant_experience_unified_touchpoints.not_null_tp_facebook_id.c859ab7900": ["model.merchant_experience_unified_touchpoints.tp_facebook"], "test.merchant_experience_unified_touchpoints.not_null_new_tp_email_id.92acbc0de8": ["model.merchant_experience_unified_touchpoints.new_tp_email"], "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_eu_call_id.bb898e4f55": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"], "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_eu_call_id.393ffdaf6c": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"], "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_us_call_id.dc1b987733": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"], "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_us_call_id.cab5955b58": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping"], "model.merchant_experience_unified_touchpoints.tp_email": ["model.merchant_experience_unified_touchpoints.v_email_first_response", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.salesforce.contact", "source.merchant_experience_unified_touchpoints.salesforce.record_type", "source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.language_mapping", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email"], "model.merchant_experience_unified_touchpoints.tp_whatsapp": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact", "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation", "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session", "source.merchant_experience_unified_touchpoints.salesforce.case", "source.merchant_experience_unified_touchpoints.salesforce.messaging_session", "source.merchant_experience_unified_touchpoints.salesforce.user", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat", "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email"], "test.merchant_experience_unified_touchpoints.not_null_tp_email_id.9ce7eee1e1": ["model.merchant_experience_unified_touchpoints.tp_email"], "test.merchant_experience_unified_touchpoints.not_null_tp_whatsapp_id.2510774df3": ["model.merchant_experience_unified_touchpoints.tp_whatsapp"], "source.merchant_experience_unified_touchpoints.ds_models.tp_volume_forecast": [], "source.merchant_experience_unified_touchpoints.ds_models.tp_chat_reason_labels": [], "source.merchant_experience_unified_touchpoints.five9.five9_report": [], "source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes": [], "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report": [], "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us": [], "source.merchant_experience_unified_touchpoints.five9.five9_europe_report": [], "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh": [], "source.merchant_experience_unified_touchpoints.funnel.agent_state_five9": [], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant": [], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction": [], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation": [], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort": [], "source.merchant_experience_unified_touchpoints.merchants_olap.m_dim_private": [], "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation": [], "source.merchant_experience_unified_touchpoints.merchants.merchants": [], "source.merchant_experience_unified_touchpoints.merchants.legal_types": [], "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request": [], "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request_item": [], "source.merchant_experience_unified_touchpoints.merchant_cases.case_history_status_rank": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_external.languages": [], "source.merchant_experience_unified_touchpoints.department_merchants.department_mapping": [], "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session": [], "source.merchant_experience_unified_touchpoints.salesforce.case_history": [], "source.merchant_experience_unified_touchpoints.salesforce.live_chat_button": [], "source.merchant_experience_unified_touchpoints.salesforce.contact": [], "source.merchant_experience_unified_touchpoints.salesforce.email_message": [], "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript": [], "source.merchant_experience_unified_touchpoints.salesforce.messaging_session": [], "source.merchant_experience_unified_touchpoints.salesforce.record_type": [], "source.merchant_experience_unified_touchpoints.salesforce.case": [], "source.merchant_experience_unified_touchpoints.salesforce.user": [], "source.merchant_experience_unified_touchpoints.salesforce.task": [], "source.merchant_experience_unified_touchpoints.salesforce.account": [], "source.merchant_experience_unified_touchpoints.salesforce.userhistory_user_field_history_c": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_call": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.language_mapping": []}, "child_map": {"model.merchant_experience_unified_touchpoints.STG_FIVE9_BR": ["model.merchant_experience_unified_touchpoints.tp_call"], "model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US": ["model.merchant_experience_unified_touchpoints.five9_id_domain_mapping", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_call"], "model.merchant_experience_unified_touchpoints.STG_FIVE9_EU": ["analysis.merchant_experience_unified_touchpoints.callback_request", "model.merchant_experience_unified_touchpoints.five9_id_domain_mapping", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_transfers"], "model.merchant_experience_unified_touchpoints.stg_five9_br_new": [], "model.merchant_experience_unified_touchpoints.stg_five9_eslatam_us_new": [], "model.merchant_experience_unified_touchpoints.stg_five9_eu_new": [], "model.merchant_experience_unified_touchpoints.stg_five9_states_eu": [], "model.merchant_experience_unified_touchpoints.stg_acquisition_cohort": [], "model.merchant_experience_unified_touchpoints.stg_cooperation": [], "model.merchant_experience_unified_touchpoints.stg_dim_merchants": [], "model.merchant_experience_unified_touchpoints.stg_facts_transactions": [], "model.merchant_experience_unified_touchpoints.stg_legal_types": [], "model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation": ["model.merchant_experience_unified_touchpoints.ref_tp_email", "model.merchant_experience_unified_touchpoints.ref_tp_email"], "model.merchant_experience_unified_touchpoints.stg_fulfillment_requests": [], "model.merchant_experience_unified_touchpoints.v_user_manager": ["test.merchant_experience_unified_touchpoints.not_null_v_user_manager_manager_email.2006af530e", "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_user_id.50fe6cd559", "test.merchant_experience_unified_touchpoints.unique_v_user_manager_user_id.5f6766a1fd"], "analysis.merchant_experience_unified_touchpoints.callback_request": [], "seed.merchant_experience_unified_touchpoints.case_history_status_rank": [], "seed.merchant_experience_unified_touchpoints.department_mapping": ["test.merchant_experience_unified_touchpoints.relationships_department_mapping_old_department__agent_current_department__ref_stg_users_.bb7b23aabb"], "seed.merchant_experience_unified_touchpoints.language_mapping": [], "seed.merchant_experience_unified_touchpoints.qa_agent_email_mapping": [], "seed.merchant_experience_unified_touchpoints.qa_monitor_email_mapping": [], "seed.merchant_experience_unified_touchpoints.qa_question_name_mapping": [], "seed.merchant_experience_unified_touchpoints.region_mapping": [], "seed.merchant_experience_unified_touchpoints.time_zones": [], "seed.merchant_experience_unified_touchpoints.tp_reasons_call": [], "seed.merchant_experience_unified_touchpoints.tp_reasons_chat": [], "seed.merchant_experience_unified_touchpoints.tp_reasons_email": [], "test.merchant_experience_unified_touchpoints.not_null_agent_tp_unified_tp_id.e39a10f080": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_chat_tp_id.3806982917": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_whatsapp_tp_id.78fce4d9b9": [], "test.merchant_experience_unified_touchpoints.unique_v_agent_tp_facebook_tp_id.1516020ed4": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_facebook_tp_id.45461b8558": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_call_tp_id.5d7d80c2df": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_email_tp_id.c60578d323": [], "test.merchant_experience_unified_touchpoints.not_null_v_agent_tp_aggregation_agent_email.c365f5ea07": [], "test.merchant_experience_unified_touchpoints.not_null_v_tp_unified_merchant_dim_id.4847b1dc29": [], "test.merchant_experience_unified_touchpoints.unique_v_user_manager_user_id.5f6766a1fd": [], "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_user_id.50fe6cd559": [], "test.merchant_experience_unified_touchpoints.not_null_v_user_manager_manager_email.2006af530e": [], "test.merchant_experience_unified_touchpoints.relationships_department_mapping_old_department__agent_current_department__ref_stg_users_.bb7b23aabb": [], "model.merchant_experience_unified_touchpoints.stg_bot_sessions": [], "model.merchant_experience_unified_touchpoints.stg_case_history": [], "model.merchant_experience_unified_touchpoints.stg_chat_button": [], "model.merchant_experience_unified_touchpoints.stg_contacts": [], "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact": ["model.merchant_experience_unified_touchpoints.ref_tp_email", "model.merchant_experience_unified_touchpoints.ref_tp_email", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp", "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_merchant_id.53d65861aa", "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_sf_account_id.64d6f247d6", "test.merchant_experience_unified_touchpoints.unique_v_merchant_sf_contact_sf_account_id.99898c24a4"], "model.merchant_experience_unified_touchpoints.stg_email_messages": ["model.merchant_experience_unified_touchpoints.ref_tp_email"], "model.merchant_experience_unified_touchpoints.v_email_first_response": ["model.merchant_experience_unified_touchpoints.tp_email", "test.merchant_experience_unified_touchpoints.not_null_v_email_first_response_case_id.39a7287f78", "test.merchant_experience_unified_touchpoints.unique_v_email_first_response_case_id.ffbef61f57"], "model.merchant_experience_unified_touchpoints.stg_live_chat": [], "model.merchant_experience_unified_touchpoints.stg_messaging_sessions": [], "model.merchant_experience_unified_touchpoints.stg_record_type": ["model.merchant_experience_unified_touchpoints.ref_tp_email"], "model.merchant_experience_unified_touchpoints.stg_sf_case": ["model.merchant_experience_unified_touchpoints.ref_tp_email", "model.merchant_experience_unified_touchpoints.ref_tp_email"], "model.merchant_experience_unified_touchpoints.stg_users": ["test.merchant_experience_unified_touchpoints.relationships_department_mapping_old_department__agent_current_department__ref_stg_users_.bb7b23aabb"], "model.merchant_experience_unified_touchpoints.v_user": ["model.merchant_experience_unified_touchpoints.ref_tp_email", "model.merchant_experience_unified_touchpoints.tp_transfers", "model.merchant_experience_unified_touchpoints.tp_transfers", "model.merchant_experience_unified_touchpoints.tp_transfers"], "model.merchant_experience_unified_touchpoints.stg_task": [], "test.merchant_experience_unified_touchpoints.unique_v_email_first_response_case_id.ffbef61f57": [], "test.merchant_experience_unified_touchpoints.not_null_v_email_first_response_case_id.39a7287f78": [], "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_sf_account_id.64d6f247d6": [], "test.merchant_experience_unified_touchpoints.unique_v_merchant_sf_contact_sf_account_id.99898c24a4": [], "test.merchant_experience_unified_touchpoints.not_null_v_merchant_sf_contact_merchant_id.53d65861aa": [], "model.merchant_experience_unified_touchpoints.data_quality_completeness": [], "model.merchant_experience_unified_touchpoints.data_quality_timeliness": [], "model.merchant_experience_unified_touchpoints.test_tp_unified": [], "model.merchant_experience_unified_touchpoints.test_tp_unified_staging_linked": ["model.merchant_experience_unified_touchpoints.test_tp_unified"], "model.merchant_experience_unified_touchpoints.test_tp_unified_staging": ["model.merchant_experience_unified_touchpoints.test_tp_unified_staging_linked"], "model.merchant_experience_unified_touchpoints.tp_transfers": [], "model.merchant_experience_unified_touchpoints.tp_attribution": [], "model.merchant_experience_unified_touchpoints.v_tp_forecast_with_actuals": [], "model.merchant_experience_unified_touchpoints.tp_unified": ["analysis.merchant_experience_unified_touchpoints.case_staging", "model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_timeliness", "model.merchant_experience_unified_touchpoints.tp_attribution", "model.merchant_experience_unified_touchpoints.v_tp_forecast_with_actuals", "model.merchant_experience_unified_touchpoints.v_tp_forecast_with_actuals", "test.merchant_experience_unified_touchpoints.not_null_tp_unified_id.0c4e915190"], "model.merchant_experience_unified_touchpoints.tp_unified_staging_linked": ["model.merchant_experience_unified_touchpoints.tp_unified"], "model.merchant_experience_unified_touchpoints.tp_unified_staging": ["model.merchant_experience_unified_touchpoints.tp_unified_staging_linked"], "model.merchant_experience_unified_touchpoints.tp_call": ["model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_timeliness", "model.merchant_experience_unified_touchpoints.test_tp_unified_staging", "model.merchant_experience_unified_touchpoints.tp_transfers", "model.merchant_experience_unified_touchpoints.tp_unified_staging", "test.merchant_experience_unified_touchpoints.not_null_tp_call_id.af7d3f6c2f"], "model.merchant_experience_unified_touchpoints.tp_chat": ["model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_timeliness", "model.merchant_experience_unified_touchpoints.test_tp_unified_staging", "model.merchant_experience_unified_touchpoints.tp_transfers", "model.merchant_experience_unified_touchpoints.tp_unified_staging", "test.merchant_experience_unified_touchpoints.not_null_tp_chat_id.a7e82fb398", "test.merchant_experience_unified_touchpoints.unique_tp_chat_id.53e9f44142"], "model.merchant_experience_unified_touchpoints.tp_facebook": ["model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_timeliness", "model.merchant_experience_unified_touchpoints.test_tp_unified_staging", "model.merchant_experience_unified_touchpoints.tp_unified_staging", "test.merchant_experience_unified_touchpoints.not_null_tp_facebook_id.c859ab7900", "test.merchant_experience_unified_touchpoints.unique_tp_facebook_id.7e27a2f707"], "model.merchant_experience_unified_touchpoints.new_tp_email": ["model.merchant_experience_unified_touchpoints.test_tp_unified_staging", "test.merchant_experience_unified_touchpoints.not_null_new_tp_email_id.92acbc0de8"], "model.merchant_experience_unified_touchpoints.ref_email_staging": ["model.merchant_experience_unified_touchpoints.new_tp_email"], "model.merchant_experience_unified_touchpoints.ref_tp_email": ["model.merchant_experience_unified_touchpoints.ref_email_staging"], "model.merchant_experience_unified_touchpoints.five9_id_domain_mapping": ["test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_eu_call_id.bb898e4f55", "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_us_call_id.dc1b987733", "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_eu_call_id.393ffdaf6c", "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_us_call_id.cab5955b58"], "analysis.merchant_experience_unified_touchpoints.case_staging": [], "test.merchant_experience_unified_touchpoints.not_null_tp_call_id.af7d3f6c2f": [], "test.merchant_experience_unified_touchpoints.not_null_tp_unified_id.0c4e915190": [], "test.merchant_experience_unified_touchpoints.unique_tp_chat_id.53e9f44142": [], "test.merchant_experience_unified_touchpoints.not_null_tp_chat_id.a7e82fb398": [], "test.merchant_experience_unified_touchpoints.unique_tp_facebook_id.7e27a2f707": [], "test.merchant_experience_unified_touchpoints.not_null_tp_facebook_id.c859ab7900": [], "test.merchant_experience_unified_touchpoints.not_null_new_tp_email_id.92acbc0de8": [], "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_eu_call_id.bb898e4f55": [], "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_eu_call_id.393ffdaf6c": [], "test.merchant_experience_unified_touchpoints.not_null_five9_id_domain_mapping_us_call_id.dc1b987733": [], "test.merchant_experience_unified_touchpoints.unique_five9_id_domain_mapping_us_call_id.cab5955b58": [], "model.merchant_experience_unified_touchpoints.tp_email": ["model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_timeliness", "model.merchant_experience_unified_touchpoints.tp_transfers", "model.merchant_experience_unified_touchpoints.tp_unified_staging", "test.merchant_experience_unified_touchpoints.not_null_tp_email_id.9ce7eee1e1"], "model.merchant_experience_unified_touchpoints.tp_whatsapp": ["model.merchant_experience_unified_touchpoints.data_quality_completeness", "model.merchant_experience_unified_touchpoints.data_quality_timeliness", "model.merchant_experience_unified_touchpoints.test_tp_unified_staging", "model.merchant_experience_unified_touchpoints.tp_unified_staging", "test.merchant_experience_unified_touchpoints.not_null_tp_whatsapp_id.2510774df3"], "test.merchant_experience_unified_touchpoints.not_null_tp_email_id.9ce7eee1e1": [], "test.merchant_experience_unified_touchpoints.not_null_tp_whatsapp_id.2510774df3": [], "source.merchant_experience_unified_touchpoints.ds_models.tp_volume_forecast": ["model.merchant_experience_unified_touchpoints.v_tp_forecast_with_actuals"], "source.merchant_experience_unified_touchpoints.ds_models.tp_chat_reason_labels": ["model.merchant_experience_unified_touchpoints.tp_chat"], "source.merchant_experience_unified_touchpoints.five9.five9_report": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_BR", "model.merchant_experience_unified_touchpoints.stg_five9_br_new"], "source.merchant_experience_unified_touchpoints.five9.calllog_report_from_yesterday_without_notes": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_BR", "model.merchant_experience_unified_touchpoints.stg_five9_br_new"], "source.merchant_experience_unified_touchpoints.five9.five9_us_cl_standard_report": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US", "model.merchant_experience_unified_touchpoints.stg_five9_eslatam_us_new"], "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh_cl_us": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_ESLATAM_US", "model.merchant_experience_unified_touchpoints.stg_five9_eslatam_us_new"], "source.merchant_experience_unified_touchpoints.five9.five9_europe_report": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.stg_five9_eu_new"], "source.merchant_experience_unified_touchpoints.five9.call_logreport_dwh": ["model.merchant_experience_unified_touchpoints.STG_FIVE9_EU", "model.merchant_experience_unified_touchpoints.stg_five9_eu_new"], "source.merchant_experience_unified_touchpoints.funnel.agent_state_five9": ["model.merchant_experience_unified_touchpoints.stg_five9_states_eu", "model.merchant_experience_unified_touchpoints.tp_transfers"], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_merchant": ["model.merchant_experience_unified_touchpoints.stg_dim_merchants", "model.merchant_experience_unified_touchpoints.tp_attribution", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_facts_transaction": ["model.merchant_experience_unified_touchpoints.stg_facts_transactions", "model.merchant_experience_unified_touchpoints.tp_attribution"], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_cooperation": ["model.merchant_experience_unified_touchpoints.stg_cooperation", "model.merchant_experience_unified_touchpoints.tp_attribution"], "source.merchant_experience_unified_touchpoints.merchants_olap.v_m_dim_acquisition_cohort": ["model.merchant_experience_unified_touchpoints.stg_acquisition_cohort", "model.merchant_experience_unified_touchpoints.tp_attribution"], "source.merchant_experience_unified_touchpoints.merchants_olap.m_dim_private": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"], "source.merchant_experience_unified_touchpoints.merchant_segmentation.ae_t_small_merchant_segmentation": ["model.merchant_experience_unified_touchpoints.stg_small_merchant_segmentation", "model.merchant_experience_unified_touchpoints.tp_attribution", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "source.merchant_experience_unified_touchpoints.merchants.merchants": ["model.merchant_experience_unified_touchpoints.stg_legal_types", "model.merchant_experience_unified_touchpoints.tp_attribution"], "source.merchant_experience_unified_touchpoints.merchants.legal_types": ["model.merchant_experience_unified_touchpoints.stg_legal_types", "model.merchant_experience_unified_touchpoints.tp_attribution"], "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request": ["model.merchant_experience_unified_touchpoints.stg_fulfillment_requests"], "source.merchant_experience_unified_touchpoints.plugger.fulfillment_request_item": ["model.merchant_experience_unified_touchpoints.stg_fulfillment_requests"], "source.merchant_experience_unified_touchpoints.merchant_cases.case_history_status_rank": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_external.languages": ["model.merchant_experience_unified_touchpoints.ref_tp_email"], "source.merchant_experience_unified_touchpoints.department_merchants.department_mapping": [], "source.merchant_experience_unified_touchpoints.salesforce.analytics_bot_session": ["model.merchant_experience_unified_touchpoints.stg_bot_sessions", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "source.merchant_experience_unified_touchpoints.salesforce.case_history": ["model.merchant_experience_unified_touchpoints.stg_case_history", "model.merchant_experience_unified_touchpoints.tp_transfers"], "source.merchant_experience_unified_touchpoints.salesforce.live_chat_button": ["model.merchant_experience_unified_touchpoints.stg_chat_button", "model.merchant_experience_unified_touchpoints.tp_chat"], "source.merchant_experience_unified_touchpoints.salesforce.contact": ["model.merchant_experience_unified_touchpoints.stg_contacts", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"], "source.merchant_experience_unified_touchpoints.salesforce.email_message": ["model.merchant_experience_unified_touchpoints.stg_email_messages", "model.merchant_experience_unified_touchpoints.v_email_first_response"], "source.merchant_experience_unified_touchpoints.salesforce.live_chat_transcript": ["model.merchant_experience_unified_touchpoints.stg_live_chat", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_transfers"], "source.merchant_experience_unified_touchpoints.salesforce.messaging_session": ["model.merchant_experience_unified_touchpoints.stg_messaging_sessions", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "source.merchant_experience_unified_touchpoints.salesforce.record_type": ["model.merchant_experience_unified_touchpoints.stg_record_type", "model.merchant_experience_unified_touchpoints.tp_email"], "source.merchant_experience_unified_touchpoints.salesforce.case": ["model.merchant_experience_unified_touchpoints.stg_sf_case", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_transfers", "model.merchant_experience_unified_touchpoints.tp_whatsapp", "model.merchant_experience_unified_touchpoints.v_email_first_response"], "source.merchant_experience_unified_touchpoints.salesforce.user": ["model.merchant_experience_unified_touchpoints.stg_users", "model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp", "model.merchant_experience_unified_touchpoints.v_email_first_response", "model.merchant_experience_unified_touchpoints.v_user"], "source.merchant_experience_unified_touchpoints.salesforce.task": ["model.merchant_experience_unified_touchpoints.stg_task", "model.merchant_experience_unified_touchpoints.tp_call"], "source.merchant_experience_unified_touchpoints.salesforce.account": ["model.merchant_experience_unified_touchpoints.v_merchant_sf_contact"], "source.merchant_experience_unified_touchpoints.salesforce.userhistory_user_field_history_c": [], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_call": ["model.merchant_experience_unified_touchpoints.tp_call"], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.region_mapping": ["model.merchant_experience_unified_touchpoints.tp_call", "model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_chat": ["model.merchant_experience_unified_touchpoints.tp_chat", "model.merchant_experience_unified_touchpoints.tp_facebook", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.tp_reasons_email": ["model.merchant_experience_unified_touchpoints.ref_tp_email", "model.merchant_experience_unified_touchpoints.tp_email", "model.merchant_experience_unified_touchpoints.tp_whatsapp"], "source.merchant_experience_unified_touchpoints.touchpoint_sources_internal.language_mapping": ["model.merchant_experience_unified_touchpoints.tp_email"]}}